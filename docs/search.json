[{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Svajunas Plunge. Author, maintainer. Christoph Schuerz. Author. Michel Strauch. Author. Mikołaj Piniewski. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Plunge S, Schuerz C, Strauch M, Piniewski M (2024). SWATtunR: Soft & Hard Calibration, Validation Package SWAT+ models. R package version 0.0.1.9002, https://github.com/biopsichas/SWATtunR.","code":"@Manual{,   title = {SWATtunR: Soft & Hard Calibration, Validation Package for SWAT+ models},   author = {Svajunas Plunge and Christoph Schuerz and Michel Strauch and Mikołaj Piniewski},   year = {2024},   note = {R package version 0.0.1.9002},   url = {https://github.com/biopsichas/SWATtunR}, }"},{"path":[]},{"path":"/index.html","id":"swattunr","dir":"","previous_headings":"","what":"SWATtunR","title":"Soft & Hard Calibration, Validation Package for SWAT+ models","text":"Text text text","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Soft & Hard Calibration, Validation Package for SWAT+ models","text":"Text text text Text text text","code":"# If the package 'remotes' is not installed run first: install.packages(\"remotes\")  # The installation of `SWATprepR`. remotes::install_github(\"biopsichas/SWATtunR\")"},{"path":"/reference/hello.html","id":null,"dir":"Reference","previous_headings":"","what":"Hello, World! — hello","title":"Hello, World! — hello","text":"Prints 'Hello, world!'.","code":""},{"path":"/reference/hello.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hello, World! — hello","text":"","code":"hello()"},{"path":"/reference/hello.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hello, World! — hello","text":"","code":"hello() #> Error in hello(): could not find function \"hello\""},{"path":"/reference/read_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a SWAT+ input file which has a tabular structure. — read_tbl","title":"Read a SWAT+ input file which has a tabular structure. — read_tbl","text":"function reads SWAT+ input file tabular structure tibble.","code":""},{"path":"/reference/read_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a SWAT+ input file which has a tabular structure. — read_tbl","text":"","code":"read_tbl(file_path, col_names = NULL, n_skip = 1)"},{"path":"/reference/read_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a SWAT+ input file which has a tabular structure. — read_tbl","text":"file_path Path SWAT+ input file. col_names (optional) character vector specifying column names. provided, column names inferred file. Default col_names = NULL. n_skip (optional) Number header rows skip. Default n_skip = 1.","code":""},{"path":"/reference/read_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a SWAT+ input file which has a tabular structure. — read_tbl","text":"tibble representing SWAT+ input file.","code":""},{"path":"/reference/add_suffix_to_duplicate.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a running ID to duplicated names — add_suffix_to_duplicate","title":"Add a running ID to duplicated names — add_suffix_to_duplicate","text":"Add running ID duplicated names","code":""},{"path":"/reference/add_suffix_to_duplicate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a running ID to duplicated names — add_suffix_to_duplicate","text":"","code":"add_suffix_to_duplicate(col_name)"},{"path":"/reference/add_suffix_to_duplicate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a running ID to duplicated names — add_suffix_to_duplicate","text":"col_name Character vector column names","code":""},{"path":"/reference/add_suffix_to_duplicate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a running ID to duplicated names — add_suffix_to_duplicate","text":"col_name character vector IDs duplicated names","code":""},{"path":"/reference/write_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Write SWAT+ input file, which has a tabular structure. — write_tbl","title":"Write SWAT+ input file, which has a tabular structure. — write_tbl","text":"Write SWAT+ input file, tabular structure.","code":""},{"path":"/reference/write_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write SWAT+ input file, which has a tabular structure. — write_tbl","text":"","code":"write_tbl(tbl, file_path, fmt)"},{"path":"/reference/write_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write SWAT+ input file, which has a tabular structure. — write_tbl","text":"tbl SWAT input table tibble (data.frame) format. file_path Write path SWAT+ input file. fmt Character vector format strings define print format table column.","code":""},{"path":"/reference/write_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write SWAT+ input file, which has a tabular structure. — write_tbl","text":"Writes text file table file path.","code":""},{"path":[]},{"path":"/reference/write_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write SWAT+ input file, which has a tabular structure. — write_tbl","text":"","code":"if (FALSE) { ## Read the hydrology.hyd input file hydrology_hyd <- read_tbl(paste0(model_path, '/hydrology.hyd')) hydrology_hyd$esco <- 1 ## Updating hydrology.hyd file hydr_hyd_fmt <- c('%-16s', rep('%12.5f', 14)) write_tbl(hydrology_hyd, paste0(model_path, '/hydrology.hyd'), hydr_hyd_fmt) }"},{"path":"/reference/copy_file_version.html","id":null,"dir":"Reference","previous_headings":"","what":"Copy a file with an optional version suffix. — copy_file_version","title":"Copy a file with an optional version suffix. — copy_file_version","text":"function copies file one location another, optional version suffix appended filename.","code":""},{"path":"/reference/copy_file_version.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Copy a file with an optional version suffix. — copy_file_version","text":"","code":"copy_file_version(model_path, file_name, file_version = NULL)"},{"path":"/reference/copy_file_version.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Copy a file with an optional version suffix. — copy_file_version","text":"model_path path directory containing file. file_name name file copied. file_version optional version suffix appended filename. Default file_version = NULL, adds '.bkp' filename.","code":""},{"path":"/reference/copy_file_version.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Copy a file with an optional version suffix. — copy_file_version","text":"None","code":""},{"path":"/reference/plot_phu_yld_bms.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot PHU, yield, and biomass over days to maturity — plot_phu_yld_bms","title":"Plot PHU, yield, and biomass over days to maturity — plot_phu_yld_bms","text":"function generates boxplots visualize Plant Heat Units (PHU) fractions, yields, biomass changes days maturity.","code":""},{"path":"/reference/plot_phu_yld_bms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot PHU, yield, and biomass over days to maturity — plot_phu_yld_bms","text":"","code":"plot_phu_yld_bms(   sim_result,   x_label,   yield = NULL,   yield_min = NULL,   yield_max = NULL )"},{"path":"/reference/plot_phu_yld_bms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot PHU, yield, and biomass over days to maturity — plot_phu_yld_bms","text":"sim_result simulation results containing PHU, yield, biomass data. x_label Labels x-axis representing changes days maturity. yield (optional) mean yield values crop. Default yield = NULL. yield_min (optional) minimum observed yield values crop. Default yield_min = NULL yield_max (optional) maximum observed yield values crop. Default yield_max = NULL","code":""},{"path":"/reference/plot_phu_yld_bms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot PHU, yield, and biomass over days to maturity — plot_phu_yld_bms","text":"combined ggplot object showing boxplots PHU fractions, yields, biomass.","code":""},{"path":"/reference/plot_phu_yld_bms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot PHU, yield, and biomass over days to maturity — plot_phu_yld_bms","text":"","code":"if (FALSE) { plot_phu_yld_bms(ylds_phu_dmat, dmat_chg, yield_mean, yield_min, yield_max) }"},{"path":"/reference/sample_lhs.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample parameters space — sample_lhs","title":"Sample parameters space — sample_lhs","text":"function samples parameter space using Latin Hypercube Sampling (LHS).","code":""},{"path":"/reference/sample_lhs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample parameters space — sample_lhs","text":"","code":"sample_lhs(par, n)"},{"path":"/reference/sample_lhs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample parameters space — sample_lhs","text":"par matrix data frame specifying parameter ranges. n number samples generate.","code":""},{"path":"/reference/sample_lhs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample parameters space — sample_lhs","text":"tibble containing sampled parameter values.","code":""},{"path":"/reference/sample_lhs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample parameters space — sample_lhs","text":"","code":"# Define parameter ranges parameters <- data.frame(   param1 = c(0, 1),   param2 = c(0, 2),   param3 = c(0, 10) )  # Sample the parameter space sample_space <- sample_lhs(parameters, 3) sample_space #> # A tibble: 3 × 3 #>   param1 param2 param3 #>    <dbl>  <dbl>  <dbl> #> 1  0.631  1.13    7.33 #> 2  0.109  0.294   1.55 #> 3  0.734  1.55    4.90"},{"path":"/reference/plot_dotty_yields.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Dotty Yields — plot_dotty_yields","title":"Plot Dotty Yields — plot_dotty_yields","text":"function creates dotty plots simulated yields, comparing observed yields (available).","code":""},{"path":"/reference/plot_dotty_yields.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Dotty Yields — plot_dotty_yields","text":"","code":"plot_dotty_yields(sim_result, yield = NULL, yield_min = NULL, yield_max = NULL)"},{"path":"/reference/plot_dotty_yields.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Dotty Yields — plot_dotty_yields","text":"sim_result simulation results containing yield data. yield (optional) mean yield values crop. Default yield = NULL. yield_min (optional) minimum observed yield values crop. Default yield_min = NULL yield_max (optional) maximum observed yield values crop. Default yield_max = NULL","code":""},{"path":"/reference/plot_dotty_yields.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Dotty Yields — plot_dotty_yields","text":"combined ggplot object showing dottty plots 4 parameters.","code":""},{"path":"/reference/plot_dotty_yields.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Dotty Yields — plot_dotty_yields","text":"","code":"if (FALSE) { plot_phu_yld_bms(ylds_phu_dmat, dmat_chg, yield_mean, yield_min, yield_max) }"},{"path":"/reference/dotty_fig.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a dotty plot — dotty_fig","title":"Make a dotty plot — dotty_fig","text":"Make dotty plot","code":""},{"path":"/reference/dotty_fig.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a dotty plot — dotty_fig","text":"","code":"dotty_fig(sim_yield, yield = NULL, yield_min = NULL, yield_max = NULL)"},{"path":"/reference/dotty_fig.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a dotty plot — dotty_fig","text":"sim_yield dataframe yield data yield (optional) mean yield values crop. Default yield = NULL. yield_min (optional) minimum observed yield values crop. Default yield_min = NULL. yield_max (optional) maximum observed yield values crop. Default yield_max = NULL.","code":""},{"path":"/reference/dotty_fig.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a dotty plot — dotty_fig","text":"ggplot object dotty plot","code":""},{"path":"/reference/dotty_fig.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a dotty plot — dotty_fig","text":"","code":"if (FALSE) { dotty_fig(sim_yield) }"},{"path":"/reference/plot_dotty.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Dotty — plot_dotty","title":"Plot Dotty — plot_dotty","text":"function creates dotty plot visualize relationship parameter values performance results.","code":""},{"path":"/reference/plot_dotty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Dotty — plot_dotty","text":"","code":"plot_dotty(   par,   var,   y_label = \"y\",   n_col = 3,   y_lim = NULL,   y_inter = NULL,   trend = FALSE,   run_ids = NULL,   low_up = FALSE )"},{"path":"/reference/plot_dotty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Dotty — plot_dotty","text":"par data frame model parameter values simulation. var model performance result vector list vectors plotted parameter values. y_label (optional) Labels y-axis, either single label vector corresponding variable var list. Default y_label = 'y'. n_col (optional) Number columns facet grid. Default n_col = 3. y_lim (optional) Limits y-axis. Default y_lim = NULL. y_inter (optional) Y-axis intercept value. Default y_inter = NULL. trend (optional) Logical, indicating whether add trend line. Default trend = FALSE. run_ids (optional) numeric vector run IDs highlighted plot. Default run_ids = NULL. low_up (optional) Logical, TRUE whole possible parameter range used x axis. Default low_up = FALSE.","code":""},{"path":"/reference/plot_dotty.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Dotty — plot_dotty","text":"ggplot object representing dotty plot.","code":""},{"path":"/reference/plot_dotty.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Dotty — plot_dotty","text":"","code":"if (FALSE) { # plot_dotty(my_data, 'performance', y_label = 'y_label') }"},{"path":"/reference/update_par.html","id":null,"dir":"Reference","previous_headings":"","what":"Update Parameters — update_par","title":"Update Parameters — update_par","text":"function updates parameters based different types changes.","code":""},{"path":"/reference/update_par.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update Parameters — update_par","text":"","code":"update_par(par, par_up, change)"},{"path":"/reference/update_par.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update Parameters — update_par","text":"par Numeric vector: Original parameter values. par_up Numeric vector: Values indicating update parameter. change Character scalar: Type change apply. Options \"relchg\" relative change, \"pctchg\" percentage change, \"abschg\" absolute change, \"absval\" setting absolute value change.","code":""},{"path":"/reference/update_par.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update Parameters — update_par","text":"Numeric vector updated parameter values.","code":""},{"path":"/reference/update_par.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update Parameters — update_par","text":"","code":"par <- c(10, 20, 30, 40) par_up <- c(0.1, 0.2, NA, 0.3) update_par(par, par_up, \"relchg\") # Returns updated parameters with relative change applied. #> [1] 11 24 30 52"},{"path":"/reference/aggregate_aa.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate and Average Annually — aggregate_aa","title":"Aggregate and Average Annually — aggregate_aa","text":"function takes data frame containing date column numerical columns, aggregates data annually, computes average annual sums.","code":""},{"path":"/reference/aggregate_aa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate and Average Annually — aggregate_aa","text":"","code":"aggregate_aa(tbl)"},{"path":"/reference/aggregate_aa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate and Average Annually — aggregate_aa","text":"tbl data frame contains 'date' column numerical columns.","code":""},{"path":"/reference/aggregate_aa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate and Average Annually — aggregate_aa","text":"numeric vector mean annual sums column input data frame.","code":""},{"path":"/reference/aggregate_aa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Aggregate and Average Annually — aggregate_aa","text":"","code":"if (FALSE) { flo <- aggregate_aa(sim$simulation$flo) }"},{"path":"/reference/calculate_wyr.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Water Yield Ratio (WYR) — calculate_wyr","title":"Calculate Water Yield Ratio (WYR) — calculate_wyr","text":"function calculates Water Yield Ratio (WYR) based various components simulation, including precipitation, surface runoff, lateral flow, others. aggregates components computes ratio sum water yields precipitation.","code":""},{"path":"/reference/calculate_wyr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Water Yield Ratio (WYR) — calculate_wyr","text":"","code":"calculate_wyr(sim)"},{"path":"/reference/calculate_wyr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Water Yield Ratio (WYR) — calculate_wyr","text":"sim SWATrunR nested list containing simulation data. named element 'simulation' contains named elements: 'precip', 'surq_cha', 'surq_res', 'latq_cha', 'latq_res', 'qtile', 'flo'.","code":""},{"path":"/reference/calculate_wyr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Water Yield Ratio (WYR) — calculate_wyr","text":"numeric value representing Water Yield Ratio (WYR).","code":""},{"path":"/reference/calculate_wyr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Water Yield Ratio (WYR) — calculate_wyr","text":"","code":"if (FALSE) { # Calculate WYR wyr <- calculate_wyr(sim) }"},{"path":"/reference/find_par_range.html","id":null,"dir":"Reference","previous_headings":"","what":"Find Parameter Range for Simulation — find_par_range","title":"Find Parameter Range for Simulation — find_par_range","text":"function identifies range parameter values produce simulation results within specified relative range target objective value. also returns parameter value minimizes absolute error relative objective.","code":""},{"path":"/reference/find_par_range.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find Parameter Range for Simulation — find_par_range","text":"","code":"find_par_range(par, sim, obj, rel_rng)"},{"path":"/reference/find_par_range.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find Parameter Range for Simulation — find_par_range","text":"par numeric vector parameter values. sim numeric vector simulation results corresponding parameter values. obj numeric value representing objective value compare . rel_rng numeric value specifying relative range acceptable error.","code":""},{"path":"/reference/find_par_range.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find Parameter Range for Simulation — find_par_range","text":"list following components: par_rng numeric vector length 2 containing minimum maximum parameter values within specified relative range objective. par_val numeric value parameter minimizes absolute error relative objective. x numeric vector interpolated parameter values. y numeric vector interpolated simulation results corresponding x.","code":""},{"path":"/reference/find_par_range.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find Parameter Range for Simulation — find_par_range","text":"","code":"if (FALSE) { find_par_range(sim[[1]], calculate_wyr(sim), 0.27, 0.05) }"},{"path":"/reference/plot_esco_range.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot ESCO Range — plot_esco_range","title":"Plot ESCO Range — plot_esco_range","text":"function creates ggplot visualization ESCO range data, highlighting specific values limits horizontal vertical lines.","code":""},{"path":"/reference/plot_esco_range.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot ESCO Range — plot_esco_range","text":"","code":"plot_esco_range(sim, obs_wy_ratio, rel_wyr_lim = 0.05)"},{"path":"/reference/plot_esco_range.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot ESCO Range — plot_esco_range","text":"sim simulation results water balance data. Including: precip Variable 'basin_wb_day' output file. surq_cha Variable 'basin_wb_day' output file. surq_res Variable 'basin_wb_day' output file. latq_cha Variable 'basin_wb_day' output file. latq_res Variable 'basin_wb_day' output file. qtile Variable 'basin_wb_day' output file. flo Variable ''basin_aqu_day' output file. obs_wy_ratio numeric value representing observed water yield ratio. rel_wyr_lim numeric value specifying relative range acceptable error.","code":""},{"path":"/reference/plot_esco_range.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot ESCO Range — plot_esco_range","text":"ggplot object.","code":""},{"path":"/reference/plot_esco_range.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot ESCO Range — plot_esco_range","text":"","code":"if (FALSE) { plot_esco_range(sim_esco, obs_wy_ratio) }"},{"path":"/articles/soft-cal.html","id":"loading-required-packages","dir":"Articles","previous_headings":"","what":"1. Loading required packages","title":"Soft-Cal Crop Yields","text":"SWATtunR package essential soft calibration, provides necessary functions calibration process. Additional packages required data manipulation, visualization, SWAT+ model runs, etc.","code":"library(SWATtunR) library(SWATrunR) library(tidyverse) library(tibble) library(purrr)"},{"path":"/articles/soft-cal.html","id":"defining-settings","dir":"Articles","previous_headings":"","what":"2. Defining settings","title":"Soft-Cal Crop Yields","text":"step requires defining SWAT+ model path, path crop data file, observed water yield precipitation ratio. crop yield soft calibration, ’s essential accurate data observed crop yields dry weight. data typically sourced '*.csv' file, columns specifying plant names corresponding mean yields. additional information accessible, minimum maximum ranges average annual observed yields, ’s advisable include '*.csv' file well, columns labeled yield_min yield_max respectively. ensures comprehensive dataset effective calibration analysis. Crops observed yield data example provided .","code":"# Path to the SWAT+ model model_path <- '../test/my_dearest_model'  # Path to the crop data file crop_data_path <- '../inst/extdata/crop2.csv'  # Observed water yield to precipitation ratio obs_wy_ratio <- 0.27  # Set the path to save results of the soft calibration sc_res <- '../test/simulations' ## crops_obs <- read_csv(crop_data_path, show_col_types = FALSE) %>%    filter(!is.na(yield_mean))  head(crops_obs, 3) ## # A tibble: 3 × 4 ##   plant_name yield_min yield_max yield_mean ##   <chr>          <dbl>     <dbl>      <dbl> ## 1 akgs            8         12         10   ## 2 csil            7.34      13.5       11.2 ## 3 sgbt           11.0       16.9       14.0"},{"path":"/articles/soft-cal.html","id":"days-to-maturity-parameter-changes","dir":"Articles","previous_headings":"","what":"3. Days to maturity parameter changes","title":"Soft-Cal Crop Yields","text":"settings following step allows define, days maturity changes applied soft-calibration.","code":""},{"path":"/articles/soft-cal.html","id":"initialization","dir":"Articles","previous_headings":"3. Days to maturity parameter changes","what":"3.1. Initialization","title":"Soft-Cal Crop Yields","text":"Preparation step requires conversion observed yields information numeric vectors initialization 'plants.plt' file.","code":"# Convert observed yields to numeric vectors for(i in c(\"yield_mean\", \"yield_min\", \"yield_max\")){   if(i %in% colnames(crops_obs)){     assign(i, deframe(select(crops_obs, all_of(c(\"plant_name\", i)))))    } else {     assign(i, NULL)   } }  ## Initialize unmodified backup version of plants.plt if(!file.exists(paste0(model_path, '/plants.plt.bkp0'))) {   copy_file_version(model_path, 'plants.plt', file_version = 0) }"},{"path":"/articles/soft-cal.html","id":"days-to-maturity-changes","dir":"Articles","previous_headings":"3. Days to maturity parameter changes","what":"3.2. Days to maturity changes","title":"Soft-Cal Crop Yields","text":"following code generates parameter input table changes required SWAT+ model run. names converted SWATrunR syntax days maturity parameter. code snippet also samples changes days maturity, allowing users define crops used soft calibration initial values days maturity.","code":"# Reading the plants.plt input file from the initial unchanged backup file plants_plt <- read_tbl(file_path = paste0(model_path, '/plants.plt.bkp0')) plants_plt <- select(plants_plt, - any_of('description'))  # Define all crops which should be calibrated # Alternatively define a name vector (if you also want to consider crops  # which are not given in the observation input file). crops <- crops_obs$plant_name # crops <- c('crop1', 'crop2', 'crop3')  # Get a vector with days_mat initial values for the selected crops dmat_init <- plants_plt %>%   filter(name %in% crops) %>%    select(name, days_mat) %>%   mutate(days_mat = ifelse(days_mat == 0, 110, days_mat)) %>%    ## if days_mat is 0, set it to 110 (as it is the default value)   deframe()  # Sample changes for days to maturity. Depending on the number of cores you have  # available choose a reasonable interval for the days to maturity which you want  # to test. With an interval of 10 e.g. you have to do 12 simulations (3 rounds  # on 4 cores), with an interval of 5 its 23 simulations. dmat_step <- 20 dmat_chg <- round(seq(-30, 100, dmat_step))  # Generate the parameter input table with the changes for all crops and convert  # the names into SWATrunR syntax par_dmat <- map_df(dmat_init, ~ .x + dmat_chg) %>%    set_names(., paste0('dmat_', names(.),                       '::days_mat.pdb | change = absval | name = ' , names(.)))"},{"path":"/articles/soft-cal.html","id":"run-simulations","dir":"Articles","previous_headings":"","what":"4. Run simulations","title":"Soft-Cal Crop Yields","text":"Days maturity parameter changes applied SWAT+ model, simulations run analyze PHU fractions, yields biomass selected crops. SWATrunR package used run simulations.","code":"# Set the number of cores. E.g. for 12 runs use 4 6, or 12 cores (if available) cores <- 3  ylds_phu_dmat <- run_swatplus(project_path = model_path,                               output = list(yld = define_output(file = 'mgtout',                                                                 variable = 'yld',                                                                 unit = crops),                                             bms = define_output(file = 'mgtout',                                                                 variable = 'bioms',                                                                 unit = crops),                                             phu = define_output(file = 'mgtout',                                                                 variable = 'phu',                                                                 unit = crops)                               ),                               parameter = par_dmat,                               start_date = '2015-01-01',                               end_date = '2020-12-31',                               years_skip = 2,                               n_thread = cores)  # Optionally save the simulation runs. if(!dir.exists(sc_res)) dir.create(sc_res) saveRDS(ylds_phu_dmat, paste0(sc_res, \"/ylds_phu_mat3.rds\"))"},{"path":"/articles/soft-cal.html","id":"plot-phu-fractions-yields-and-biomass-for-days-to-maturity-changes","dir":"Articles","previous_headings":"","what":"5. Plot PHU fractions, yields, and biomass for days to maturity changes","title":"Soft-Cal Crop Yields","text":"figure, visualize PHU fractions, yields, biomass various days maturity settings. graphical representation serves reference adjust initial values days_mat crop simulation. grain crops, typically dry harvest, aim PHU fractions ranging approximately 1.2 1.5 optimize yield. Vegetables, hand, tend PHU fraction around 1, possibly slightly , considered optimal. Crops like basil broccoli harvested reaching full maturity. cases, PHU fractions can lower 1, ranging 0.5 0.9. Furthermore, ’s crucial ensure simulated yields fall within range locally observed yields maintain accuracy relevance.","code":"plot_phu_yld_bms(ylds_phu_dmat, dmat_chg, yield_mean, yield_min, yield_max) plot_phu_yld_bms(ylds_phu_dmat, dmat_chg, yield_mean, yield_min, yield_max)"},{"path":"/articles/soft-cal.html","id":"select-days-to-maturity-parameter-changes-to-apply","dir":"Articles","previous_headings":"","what":"6. Select days to maturity parameter changes to apply","title":"Soft-Cal Crop Yields","text":"Based figure provided, identify necessary adjustments days maturity parameter SWAT+ model. adjustments made ensure PHU fractions, yields, biomass values specified crops align observed data.","code":"# Add values based on figure to this line (please add all crops from the initial selection) # names(dmat_init) # Print all crop names chg_dmat_sel <- c(akgs = -30, csil = 10, sgbt =  70,                    wbar =   -10, wira = -10, wiry =  0, wwht =  -30)   # Adding defined changes to initial days_mat values of crops dmat_sel <- chg_dmat_sel[names(dmat_init)] + dmat_init dmat_sel <- enframe(dmat_sel, value = 'days_mat_upd')"},{"path":"/articles/soft-cal.html","id":"write-d_mat-modifications-into-file","dir":"Articles","previous_headings":"","what":"7. Write d_mat modifications into file","title":"Soft-Cal Crop Yields","text":"Write changes plants.plt file update days maturity values selected crops also backup updated file plants.plt.bkp1 file.","code":"## [1] TRUE"},{"path":"/articles/soft-cal.html","id":"check-initial-crop-lai_pot-harv_idx-tmp_base-bm_e-parameters","dir":"Articles","previous_headings":"","what":"8. Check initial crop lai_pot, harv_idx, tmp_base, bm_e parameters","title":"Soft-Cal Crop Yields","text":"fixing days maturity values, might needed address values lai_pot, harv_idx, tmp_base, bm_e parameters selected crops. parameters crucial simulation adjusted PHU fractions, yields, biomass values within expected range.","code":"plants_plt <- read_tbl(file_path = paste0(model_path, '/plants.plt'))  par_ini <- plants_plt %>%   filter(name %in% crops) %>%   select(name, lai_pot, harv_idx, tmp_base, bm_e)#, days_mat) par_ini ## # A tibble: 7 × 5 ##   name  lai_pot harv_idx tmp_base  bm_e ##   <chr>   <dbl>    <dbl>    <dbl> <dbl> ## 1 csil      4       0.9         8  39   ## 2 sgbt      5       2           4  30   ## 3 wbar      4       0.54        0  30   ## 4 wwht      4       0.4         0  30   ## 5 wira      3.5     0.23        5  38   ## 6 wiry      4       0.4         0  30   ## 7 akgs      4       0.75        0  12.5"},{"path":"/articles/soft-cal.html","id":"step9","dir":"Articles","previous_headings":"","what":"9. Create sample of lai_pot, harv_idx, tmp_base, bm_e parameters with LHS","title":"Soft-Cal Crop Yields","text":"use lhs package create sample parameter values selected crops. sample used run SWAT+ simulations evaluate impact parameter changes model output.","code":"## Make sure your updates will not produce unrealistic values (i.e. negative values)!!! par_bnd <- tibble('lai_pot.pdb | change = relchg' = c(-0.3, 0.3),                   'harv_idx.pdb | change = relchg' = c(-0.3, 0.3),                   'tmp_base.pdb | change = relchg' = c(-0.3, 0.3),                   'bm_e.pdb | change = relchg' = c(-0.3, 0.1))  par_crop <- sample_lhs(par_bnd, 10)"},{"path":"/articles/soft-cal.html","id":"step10","dir":"Articles","previous_headings":"","what":"10. Run SWATrunR for prepared parameter set","title":"Soft-Cal Crop Yields","text":"","code":"ylds_plnt_par <- run_swatplus(project_path = model_path,                               output = list(yld = define_output(file = 'mgtout',                                                                 variable = 'yld',                                                                 unit = crops)),                               parameter = par_crop,                               n_thread = cores) saveRDS(ylds_plnt_par, paste0(sc_res, \"/ylds_plnt_par3.rds\"))"},{"path":"/articles/soft-cal.html","id":"step11","dir":"Articles","previous_headings":"","what":"11. Examine results in figures","title":"Soft-Cal Crop Yields","text":"Plotting simulation results dotty plots can help identify parameter sensitivities modify . examining patterns dotty plots, may consider adjusting certain parameter ranges (step 9) rerunning model (step 10) observe changes results. Subsequently, can reanalyze outcomes (step 11) gain insights refine understanding system modeled.","code":"## Plot dotty figures for the selected crops plot_dotty_yields(ylds_plnt_par, yield_mean, yield_min, yield_max)"},{"path":"/articles/sc-crops.html","id":"scc_step1","dir":"Articles","previous_headings":"","what":"1. Loading required packages","title":"Crop Yields","text":"SWATtunR package essential soft calibration, provides necessary functions calibration process. Additional packages required data manipulation, visualization, SWAT+ model runs, etc.","code":"## Required libraries to run workflow library(SWATtunR) library(SWATrunR) library(tidyverse) library(tibble) library(purrr)"},{"path":"/articles/sc-crops.html","id":"scc_step2","dir":"Articles","previous_headings":"","what":"2. Defining settings","title":"Crop Yields","text":"step requires defining SWAT+ model path, path crop data file. crop yield soft calibration, ’s essential accurate data observed crop yields expressed dry matter weight. Since reference data typically provided fresh matter weight, values need multiplied crop-specific conversion factors prior use calibration. proposed workflow, basin-averaged yield data required, solution may fit large river basins spatially heterogeneous yields. data typically sourced '*.csv' file, columns specifying plant names corresponding mean yields. additional information accessible, minimum maximum ranges average annual observed yields, ’s advisable include '*.csv' file well, columns labeled yield_min yield_max respectively. ensures comprehensive dataset effective calibration analysis. example file observed crop yields provided .","code":"# Path to the SWAT+ model model_path <- '../test/my_dearest_model'  # Path to the crop data file crop_data_path <- '../inst/extdata/crop2.csv'  # Set the path to save results of the soft calibration sc_res <- '../test/simulations'  # Set the number of cores available for calculations.   # Number of cores for 12 runs use 3, 4, 6, or 12 cores (if available) cores <- 3  ## Set the start and end date for the simulations and warm-up period start_date <- '2015-01-01' end_date <- '2020-12-31' years_skip <- 2 ## crops_obs <- read_csv(crop_data_path, show_col_types = FALSE) %>%    filter(!is.na(yield_mean))  head(crops_obs, 3) ## # A tibble: 3 × 4 ##   plant_name yield_min yield_max yield_mean ##   <chr>          <dbl>     <dbl>      <dbl> ## 1 akgs            8         12         10   ## 2 csil            7.34      13.5       11.2 ## 3 sgbt           11.0       16.9       14.0"},{"path":"/articles/sc-crops.html","id":"scc_step3","dir":"Articles","previous_headings":"","what":"3. Days to maturity parameter changes","title":"Crop Yields","text":"proposed workflow, one preliminary step actual calibration crop parameters adjusting new SWAT+ parameter days_mat (days maturity) replaced older concept heat units maturity previous SWAT versions. goal set potential heat units (PHU) fraction harvest within plausible ranges different crop types. recommended check stage crop-specific values base temperature parameter (tmp_base) realistic case study.","code":""},{"path":"/articles/sc-crops.html","id":"scc_step31","dir":"Articles","previous_headings":"3. Days to maturity parameter changes","what":"3.1. Initialization","title":"Crop Yields","text":"preparation step requires conversion observed yields information numeric vectors initialization 'plants.plt' file.","code":"# Convert observed yields to numeric vectors for(i in c(\"yield_mean\", \"yield_min\", \"yield_max\")){   if(i %in% colnames(crops_obs)){     assign(i, deframe(select(crops_obs, all_of(c(\"plant_name\", i)))))    } else {     assign(i, NULL)   } }  ## Initialize unmodified backup version of plants.plt if(!file.exists(paste0(model_path, '/plants.plt.bkp0'))) {   copy_file_version(model_path, 'plants.plt', file_version = 0) }"},{"path":"/articles/sc-crops.html","id":"scc_step32","dir":"Articles","previous_headings":"3. Days to maturity parameter changes","what":"3.2. Days to maturity changes","title":"Crop Yields","text":"following code generates parameter input table changes required SWAT+ model run. names converted SWATrunR syntax days maturity parameter. code snippet also samples changes days maturity, allowing users define crops used soft calibration initial values days maturity. initial values originate default plants database may likely lead unreliable simulation PHU fraction. example , addition factor days_mat parameter varies -30 100, adjusted, necessary.","code":"# Reading the plants.plt input file from the initial unchanged backup file plants_plt <- read_tbl(file_path = paste0(model_path, '/plants.plt.bkp0')) plants_plt <- select(plants_plt, - any_of('description'))  # Define all crops which should be calibrated # Alternatively define a name vector (if you also want to consider crops  # which are not given in the observation input file). crops <- crops_obs$plant_name # crops <- c('crop1', 'crop2', 'crop3')  # Get a vector with days_mat initial values for the selected crops dmat_init <- plants_plt %>%   filter(name %in% crops) %>%    select(name, days_mat) %>%   mutate(days_mat = ifelse(days_mat == 0, 110, days_mat)) %>%    ## if days_mat is 0, set it to 110 (as it is the default value in the SWAT+ code)   deframe()  # Sample changes for days to maturity. Depending on the number of cores you have  # available choose a reasonable interval for the days to maturity which you want  # to test. With an interval of 10 e.g. you have to do 12 simulations (3 rounds  # on 4 cores), with an interval of 5 its 23 simulations. dmat_step <- 20 dmat_chg <- round(seq(-30, 100, dmat_step))  # Generate the parameter input table with the changes for all crops and convert  # the names into SWATrunR syntax par_dmat <- map_df(dmat_init, ~ .x + dmat_chg) %>%    set_names(., paste0('dmat_', names(.),                       '::days_mat.pdb | change = absval | name = ' , names(.)))"},{"path":"/articles/sc-crops.html","id":"scc_step4","dir":"Articles","previous_headings":"","what":"4. Run simulations for days_mat adjustment","title":"Crop Yields","text":"step, SWATrunR package used run simulations days_mat parameter varying predefined range, order analyze PHU fractions, yields biomass selected crops.","code":"# make sure to adjust simulation settings (start date, end date and warm-up period) to your situation ylds_phu_dmat <- run_swatplus(project_path = model_path,                               output = list(yld = define_output(file = 'mgtout',                                                                 variable = 'yld',                                                                 unit = crops),                                             bms = define_output(file = 'mgtout',                                                                 variable = 'bioms',                                                                 unit = crops),                                             phu = define_output(file = 'mgtout',                                                                 variable = 'phu',                                                                 unit = crops)                               ),                               parameter = par_dmat,                               start_date = start_date,                               end_date = end_date,                               years_skip = years_skip,                               n_thread = cores)  # Optionally save the simulation runs. if(!dir.exists(sc_res)) dir.create(sc_res) saveRDS(ylds_phu_dmat, paste0(sc_res, \"/ylds_phu_mat.rds\"))"},{"path":"/articles/sc-crops.html","id":"scc_step5","dir":"Articles","previous_headings":"","what":"5. Plot PHU fractions, yields, and biomass for days to maturity changes","title":"Crop Yields","text":"figure, visualize PHU fractions, yields, biomass various days maturity settings. graphical representation serves reference adjust initial values days_mat crop simulation. grain crops, typically dry harvest, aim PHU fractions ranging approximately 1.2 1.5 optimize yield. Vegetables, hand, tend PHU fraction around 1, possibly slightly , considered optimal. Crops like basil broccoli harvested reaching full maturity. cases, PHU fractions can lower 1, ranging 0.5 0.9. Please note values shown plot represent first harvest. case multiple harvests (e.g. grassland, alfalfa), PHU fraction also expected well 1. generic suggestions, recommended check PHU fractions target given case study, can crop- region-specific. Furthermore, useful check already stage simulated yields fall within range locally observed yields maintain accuracy relevance days_mat affects yields. actual soft calibration yields described steps 8-11.","code":"plot_phu_yld_bms(ylds_phu_dmat, dmat_chg, yield_mean, yield_min, yield_max)"},{"path":"/articles/sc-crops.html","id":"scc_step6","dir":"Articles","previous_headings":"","what":"6. Select days to maturity parameter changes to apply","title":"Crop Yields","text":"Based figure provided, identify necessary adjustments days maturity parameter SWAT+ model. adjustments made ensure PHU fractions, yields, biomass values specified crops align observed data.","code":"# Add values based on figure to this line (please add all crops from the initial selection) # names(dmat_init) # Print all crop names chg_dmat_sel <- c(akgs = -30, csil = 10, sgbt =  70,                    wbar =   -10, wira = -10, wiry =  0, wwht =  -30)   # Adding defined changes to initial days_mat values of crops dmat_sel <- chg_dmat_sel[names(dmat_init)] + dmat_init dmat_sel <- enframe(dmat_sel, value = 'days_mat_upd')"},{"path":"/articles/sc-crops.html","id":"scc_step7","dir":"Articles","previous_headings":"","what":"7. Write days_mat modifications into a file","title":"Crop Yields","text":"Write changes 'plants.plt' file update days maturity values selected crops also backup updated file 'plants.plt.bkp1' file.","code":"# Update the days_mat values in plants.plt according to the changes defined above. plants_plt <- plants_plt %>%   left_join(., dmat_sel, by = 'name') %>%   mutate(days_mat = ifelse(!is.na(days_mat_upd), days_mat_upd, days_mat)) %>%   select(-days_mat_upd)  ## Overwriting original plants.plt with the updated days_mat values. plants_plt_fmt <- c('%-12s', '%-18s', '%-12s', rep('%12.5f', ncol(plants_plt) - 3)) write_tbl(plants_plt, paste0(model_path, '/plants.plt'), fmt = plants_plt_fmt)  # Create a backup file with the changed days_mat values copy_file_version(model_path, 'plants.plt', file_version = 1) ## [1] TRUE"},{"path":"/articles/sc-crops.html","id":"scc_step8","dir":"Articles","previous_headings":"","what":"8. Read crop calibration parameters","title":"Crop Yields","text":"proposed workflow, four parameters suggested used crop calibration: lai_pot (maximum potential leaf area index), harv_idx (harvest index optimal growth conditions), tmp_base (minimum temperature plant growth) bm_e (biomass energy ratio). parameters found effective OPTAIN modelling report. However, case user wants add parameters 'plants.plt' file, code can easily adapted.","code":"plants_plt <- read_tbl(file_path = paste0(model_path, '/plants.plt'))  par_ini <- plants_plt %>%   filter(name %in% crops) %>%   select(name, lai_pot, harv_idx, tmp_base, bm_e)#, days_mat) par_ini ## # A tibble: 7 × 5 ##   name  lai_pot harv_idx tmp_base  bm_e ##   <chr>   <dbl>    <dbl>    <dbl> <dbl> ## 1 csil      4       0.9         8  39   ## 2 sgbt      5       2           4  30   ## 3 wbar      4       0.54        0  30   ## 4 wwht      4       0.4         0  30   ## 5 wira      3.5     0.23        5  38   ## 6 wiry      4       0.4         0  30   ## 7 akgs      4       0.75        0  12.5"},{"path":"/articles/sc-crops.html","id":"scc_step9","dir":"Articles","previous_headings":"","what":"9. LHS sampling of crop parameters","title":"Crop Yields","text":"use sample_lhs function create Latin hypercube sample parameter values selected crops. sample used run SWAT+ simulations evaluate impact parameter changes model output. syntax parameter boundaries found SWATrunR page. example , relative changes +/-30% applied parameters (bm_e exception, since changes +10% leading SWAT+ model failed run cases). Since temperature additive variable, absolute change method better option tmp_base. range tmp_base kept narrow, parameter may also affect PHU fraction estimation.","code":"## Define changes to be applied to the initial parameter values ## Make sure your updates will not produce unrealistic values (i.e. negative values)!!! par_bnd <- tibble('lai_pot.pdb | change = relchg' = c(-0.3, 0.3),                   'harv_idx.pdb | change = relchg' = c(-0.3, 0.3),                   'tmp_base.pdb | change = abschg' = c(-1.5, 1.5),                   'bm_e.pdb | change = relchg' = c(-0.3, 0.1))  par_crop <- sample_lhs(par_bnd, 10) ## 10 samples for each parameter will be generated for testing purposes.  ## The number of samples can be adjusted based on the available computational resources. ## Recommended number of samples is 50-100."},{"path":"/articles/sc-crops.html","id":"scc_step10","dir":"Articles","previous_headings":"","what":"10. Make SWAT+ model runs for crop yield calibration","title":"Crop Yields","text":"step run SWAT+ model updated parameters selected crops. simulation results used evaluate effect parameter changes model output.","code":"ylds_plnt_par <- run_swatplus(project_path = model_path,                               output = list(yld = define_output(file = 'mgtout',                                                                 variable = 'yld',                                                                 unit = crops)),                               parameter = par_crop,                               start_date = start_date,                               end_date = end_date,                               years_skip = years_skip,                               n_thread = cores)  ## Save the results to the file saveRDS(ylds_plnt_par, paste0(sc_res, \"/ylds_plnt_par.rds\"))"},{"path":"/articles/sc-crops.html","id":"scc_step11","dir":"Articles","previous_headings":"","what":"11. Examine results in figures","title":"Crop Yields","text":"Plotting simulation results ‘dotty plots’ can help identify parameter sensitivities (yields different crops respond changes individual parameters), thus providing suggestions modify ranges subsequent simulation. examining patterns dotty plots, may consider adjusting certain parameter ranges (step 9) rerunning model (step 10). Subsequently, can reanalyze outcomes plot_dotty_yields function gain insights refine understanding system modeled. ultimate goal simulated yields match observed yields well possible. recommended aim average error 10%. case observed min max provided, good simulated yield variability matches ranges.","code":"## Plot dotty figures for the selected crops plot_dotty_yields(ylds_plnt_par, yield_mean, yield_min, yield_max)"},{"path":"/articles/sc-crops.html","id":"scc_step12","dir":"Articles","previous_headings":"","what":"12. Update parameter values in plants.plt file","title":"Crop Yields","text":"examining results SWAT+ simulations step 11, decision parameter changes implement needs taken. parameters need changed, appeared sensitive helped improve model performance. Different crops can exhibit sensitivities different parameters, important make crop-specific selection parameter changes. following code snippet shows update 'plants.plt' file. Please note actual parameter values, changes parameters (relative absolute change method).","code":"## Fix changes you want to write in plants.plt file chg_par <- tibble(   name     = c(\"akgs\",\"barl\", \"csil\", \"sgbt\", \"wbar\", \"wira\", \"wiry\", \"wwht\"),   lai_pot  = c(    0,     0,      0,      0,      0,      0,      0,      0),   harv_idx = c(    0,     0,      0,      0,      0,      0,    0.3,    0.3),   tmp_base = c(    0,     0,      0,      0,      0,      0,   -0.2,   -0.2),   bm_e     = c(    0,     0,      0,      0,      0,      0,      0,      0)) %>%   left_join(select(plants_plt, name), ., by = 'name')  ## Update parameter values in plants.plt for (i in 1:ncol(par_bnd)) {   par_i <- names(chg_par)[i + 1]   chg_typ_i <- sub(\".*change = \", \"\", names(par_bnd)[i])   plants_plt[par_i] <- update_par(plants_plt[[par_i]], chg_par[[par_i]], chg_typ_i) }  ## Overwriting plants.plt with the updated parameter values. write_tbl(plants_plt, paste0(model_path, '/plants.plt'), fmt = plants_plt_fmt)"},{"path":"/articles/sc-crops.html","id":"scc_step13","dir":"Articles","previous_headings":"","what":"13. Rerun SWAT+ with the final plants.plt file","title":"Crop Yields","text":"updating 'plants.plt' file new parameter values, can rerun SWAT+ model check match simulated observed yields expected. addition yields, biomass PHU outputs also extracted.","code":"phu_yld_final <- run_swatplus(project_path = model_path,                               output = list(yld = define_output(file = 'mgtout',                                                                 variable = 'yld',                                                                 unit = crops),                                             bms = define_output(file = 'mgtout',                                                                 variable = 'bioms',                                                                 unit = crops),                                             phu = define_output(file = 'mgtout',                                                                 variable = 'phu',                                                                 unit = crops)),                               start_date = start_date,                               end_date = end_date,                               years_skip = years_skip)  ## Save the results to the file saveRDS(phu_yld_final, paste0(sc_res, \"/phu_yld_final.rds\"))"},{"path":"/articles/sc-crops.html","id":"scc_step14","dir":"Articles","previous_headings":"","what":"14. Examine the final results","title":"Crop Yields","text":"step, can examine final results (yields, biomass, PHU fraction) SWAT+ simulations. results satisfactory, may consider model setup successfully soft-calibrated crop yields.  -depth analysis, users can employ stage additional SWATdoctR functions, plot_hru_pw_day(). function enables visualization daily time series variables output file 'hru_pw_day.txt' (e.g. biomass, LAI) selected HRUs time periods, thus providing valuable insights simulated crop growth. might help getting better understanding model’s outputs decide crop yield soft calibration results acceptable. proposed workflow, completing soft calibration process crops, users advised proceed soft calibration water yield presented another page.","code":"plot_phu_yld_bms(phu_yld_final, 0, yield_mean, yield_min, yield_max)"},{"path":"/articles/sc-wy.html","id":"scw_step1","dir":"Articles","previous_headings":"","what":"1. Loading required packages","title":"Water Yield","text":"yet loaded crop yields soft calibration, please load following libraries.","code":"## Required libraries to run workflow library(SWATtunR) library(SWATrunR) library(tidyverse) library(tibble) library(purrr)"},{"path":"/articles/sc-wy.html","id":"scw_step2","dir":"Articles","previous_headings":"","what":"2. Defining settings","title":"Water Yield","text":"step requires defining SWAT+ model path observed water yield precipitation ratio.","code":"# Path to the SWAT+ model model_path <- '../test/my_dearest_model'  # Set the path to save results of the soft calibration sc_res <- '../test/simulations'  # Observed water yield to precipitation ratio obs_wy_ratio <- 0.27  # Set the number of cores available for calculations.   # Number of cores for 12 runs use 3, 4, 6, or 12 cores (if available) cores <- 3  ## Set the start and end date for the simulations and warm-up period start_date <- '2015-01-01' end_date <- '2020-12-31' years_skip <- 2"},{"path":"/articles/sc-wy.html","id":"scw_step3","dir":"Articles","previous_headings":"","what":"3. Defining esco parameter range and running model","title":"Water Yield","text":"soil evaporation compensation factor (esco) important coefficient modeling soil moisture dynamics. allows users adjust depth distribution used satisfy soil evaporative demand, accounting factors capillary action, crusting, cracks. increasing esco value, model can draw evaporative demand deeper soil layers. means model reduced amount water available water yield. esco values range 0.01 1.","code":"# The esco parameter range is sampled. esco <- tibble('esco.hru | change = absval' = seq(0.05,0.95, length.out = max(cores, 4)))  sim_esco <- run_swatplus(project_path = model_path,                          output = list(precip  =  define_output('basin_wb_day',                                                                  'precip',                                                                  1),                                        surq_cha = define_output(file = 'basin_wb_day',                                                                 variable = 'surq_cha',                                                                 unit = 1),                                        surq_res = define_output(file = 'basin_wb_day',                                                                 variable = 'surq_res',                                                                 unit = 1),                                        latq_cha = define_output(file = 'basin_wb_day',                                                                 variable = 'latq_cha',                                                                 unit = 1),                                        latq_res = define_output(file = 'basin_wb_day',                                                                 variable = 'latq_res',                                                                 unit = 1),                                        qtile =    define_output(file = 'basin_wb_day',                                                                 variable = 'qtile',                                                                 unit = 1),                                        flo =      define_output(file = 'basin_aqu_day',                                                                 variable = 'flo',                                                                 unit = 1)                          ),                          parameter = esco,                          start_date = start_date,                          end_date = end_date,                          years_skip = years_skip,                          n_thread = cores) ## Save the results to the file saveRDS(sim_esco, paste0(sc_res, \"/sim_esco.rds\"))"},{"path":"/articles/sc-wy.html","id":"scw_step4","dir":"Articles","previous_headings":"","what":"4. Extracting and plotting water yield ratio vs esco parameter values","title":"Water Yield","text":"water yield ratio calculated simulation. range esco values produce water yield ratios within specified range observed water yield ratio identified using plot_esco_range function.","code":"plot_esco_range(sim_esco, obs_wy_ratio)"},{"path":"/articles/sc-wy.html","id":"scw_step5","dir":"Articles","previous_headings":"","what":"5. (Optional) If only esco is not enough, use esco, epco parameters for calibration together","title":"Water Yield","text":"certain situations esco parameter might enough reach observed water yield ratio. Addition plant uptake compensation factor (epco) might help cases. parameter determines water uptake distributed across soil layers meet plant transpiration needs. upper soil layers lack sufficient water, model can draw water deeper layers, process governed epco value. epco close 1.0, greater flexibility, allowing significant compensation lower soil layers. Conversely, epco near 0.0, model restricts water uptake primarily original depth distribution, limiting compensation deeper layers.","code":"# The esco and epco parameter range is defined . par_bnd <- tibble('esco.hru | change = absval' = c(0.05, 0.95),                   'epco.hru | change = absval' = c(0.05, 0.95))  # And sampled with lhs  esco_epco <- sample_lhs(par_bnd, 12)   ##Run simulations for defined parameter sets sim_esco_epco <- run_swatplus(project_path = model_path,                          output = list(precip  =  define_output('basin_wb_day',                                                                  'precip',                                                                  1),                                        surq_cha = define_output(file = 'basin_wb_day',                                                                 variable = 'surq_cha',                                                                 unit = 1),                                        surq_res = define_output(file = 'basin_wb_day',                                                                 variable = 'surq_res',                                                                 unit = 1),                                        latq_cha = define_output(file = 'basin_wb_day',                                                                 variable = 'latq_cha',                                                                 unit = 1),                                        latq_res = define_output(file = 'basin_wb_day',                                                                 variable = 'latq_res',                                                                 unit = 1),                                        qtile =    define_output(file = 'basin_wb_day',                                                                 variable = 'qtile',                                                                 unit = 1),                                        flo =      define_output(file = 'basin_aqu_day',                                                                 variable = 'flo',                                                                 unit = 1)                          ),                          parameter = esco_epco,                          start_date = start_date,                          end_date = end_date,                          years_skip = years_skip,                          n_thread = cores)  ## Save the results to the file saveRDS(sim_esco, paste0(sc_res, \"/sim_esco_epco.rds\"))"},{"path":"/articles/sc-wy.html","id":"scw_step6","dir":"Articles","previous_headings":"","what":"6. Updating parameter values in the 'hydrology.hyd' file with selected values","title":"Water Yield","text":"determining model parameter values allow simulated water yield ratio match observed values, parameters need updated 'hydrology.hyd' file. Following code snippet backs existing file updates values .","code":"## Initialize unmodified backup version of hydrology.hyd if(!file.exists(paste0(model_path, '/hydrology.hyd.bkp0'))) {   copy_file_version(model_path, 'hydrology.hyd', file_version = 0) }  # Read the hydrology.hyd input file hydrology_hyd <- read_tbl(paste0(model_path, '/hydrology.hyd.bkp0'))  hydrology_hyd$esco <- 0.39 ## If needed update epco as well ## hydrology_hyd$epco <- some value  ## Update hydrology.hyd file write_tbl(hydrology_hyd, paste0(model_path, '/hydrology.hyd'), c('%-16s', rep('%12.5f', 14)))"},{"path":"/articles/sc-wy.html","id":"final-recheck-for-yield-results","dir":"Articles","previous_headings":"","what":"7. Final recheck for yield results","title":"Water Yield","text":"Updating parameters 'hydrology.hyd' file might impact crop yield simulation. ensure water yield soft calibration adversely affected crop yield soft calibration, important recheck end. results match observed yields, soft calibration complete, can celebrate. Otherwise, consider revisiting crop yield soft calibration steps.","code":"## Rerun model for crop yields results phu_yld_recheck <- run_swatplus(project_path = model_path,                           output = list(yld = define_output(file = 'mgtout',                                                             variable = 'yld',                                                             unit = crops),                                         bms = define_output(file = 'mgtout',                                                             variable = 'bioms',                                                             unit = crops),                                         phu = define_output(file = 'mgtout',                                                             variable = 'phu',                                                             unit = crops)),                           start_date = start_date,                           end_date = end_date,                           years_skip = years_skip) ## Save the results to the file saveRDS(phu_yld_recheck, paste0(sc_res, \"/phu_yld_recheck.rds\"))  ## Plot yields  plot_phu_yld_bms(phu_yld_recheck, 0, yield_mean, yield_min, yield_max)"},{"path":"/articles/hc.html","id":"hc_step1","dir":"Articles","previous_headings":"","what":"1. Loading required packages","title":"Hard calibration","text":"first step hard calibration workflow load necessary R packages. packages provide functions tools data manipulation, visualization, model calibration. following code chunk loads required packages hard calibration workflow.","code":"library(data.table) library(ggplot2) library(hydroGOF) library(lhs) library(lubridate) library(purrr) library(readr) library(stringr) library(SWATrunR) library(tibble) library(tidyr) library(parallel) library(doParallel) library(scales) library(xts) library(dygraphs) library(SWATprepR) library(dplyr)"},{"path":"/articles/hc.html","id":"hc_step2","dir":"Articles","previous_headings":"","what":"2. Defining settings","title":"Hard calibration","text":"next step define settings hard calibration workflow. includes specifying SWAT+ model path, input files, calibration parameters, observed data, relevant information. following code chunk sets necessary settings hard calibration workflow.","code":"# Path to the SWAT+ model model_path <- '../test/my_dearest_model'  # Path to the crop data file qobs_path <- '../inst/extdata/q_cha.csv'  # Define the path to the observed WQ data wqobs_path <- '../inst/extdata/no3.csv'  # You can define the path to the other observed data, like groundwater depth data, etc. gwobs_path <- '../inst/extdata/gw.csv'  # Set the path to save results of the soft calibration sc_res <- '../test/simulations'  # Set the number of cores available for calculations.   # Number of cores for 12 runs use 3, 4, 6, or 12 cores (if available) cores <- 3  # Channel IDs where gauges are located at the channel outlets. cha_ids <- c(67)  # Define the simulation save file names to be used in SWATrunR save_file_name <- \"sim1\"  # Number parameter combinations to run n_comb <- 500  # Fraction of the best parameter combinations to be used for the final  # WQ calibration n_best <- NULL # example n_best <- .02 # 2% of the best parameter combinations,  # if NULL, n_best = 20/n_comb  # Number of combination drawn for the nutrient parameters (this number  # is multiplied by the number of selected parameter combinations for the flow. # For example n_comb = 1000, n_best .1, means 100 best runs selected, multiplied # with n_nutr = 100 results in 10,000 model runs for the nutrient calibration. # If null, 1000/(n_comb*n_best) formula applied resulting in 1000 runs) n_nutr <- NULL  # Number of cores to be used for the parallelization of the model runs n_cores <- NULL ## If NULL, all available physical cores - 2 will be used  # Define time period to be used in model runs. Please note this period should # match your management data period, if it was prepared with SWATfarmR. You can # safely modify 'start_date_print' and 'end_date' to define the period for which # you want to print the model output. However, please take great care, if you  # modify 'start_date' as you might need to update your management files too.   # Start date for model runs (if NULL, the start date of the model setup files  # will be used!!!) start_date <- NULL # start_date <- '2000-01-01' # End date for model runs (if NULL, the end date of observation data will be used). end_date <- NULL # end_date <- '2010-12-31' # Start printing model output (if NULL, the start date of observation data will used). start_date_print <- NULL # start_date_print <-'2003-01-01'  # Define calibration and validation periods. Please note that the validation  # should take around 1/3 and calibration 2/3 of the total period. Also the  # workflow will run all simulations for the whole period (defined above),  # these periods are only used for the performance calculation and plotting.  # Q calibration period q_cal_period <- c('2007-01-01', '2010-01-01') # Calibration end date q_val_period <- c('2011-01-01', '2022-12-31')  # WQ calibration period wq_cal_period <- c('2012-01-01', '2017-12-31') # Calibration end date wq_val_period <- c('2018-12-31', '2022-12-31')"},{"path":"/articles/hc.html","id":"hc_step3","dir":"Articles","previous_headings":"","what":"3. Preparing parameters sets for the flow (and water quality) calibration","title":"Hard calibration","text":"Adding text ","code":"par_bound <- tibble(   # Suggested list and ranges of SWAT+ paramaters for hydrology calibration in    # OPTAIN. Parameters are roughly divided into groups by processes which they    # affect most. Some groups should be considered optional   # snow (optional - use if average snow fall to precipitation ratio is higher    # than 5%)   'snomelt_tmp.hru | change = absval' = c(-1.5, 1.5),   'snofall_tmp.hru | change = absval' = c(-1.5, 1.5),   # ET (note: it is suggested that a narrow range for esco selected in soft    # calibration of water balance is used instead of the wide (0,1) range)   'esco.hru | change = absval' = c(0.01, 0.95),   'epco.hru | change = absval' = c(0.05, 1),   'awc.sol | change = relchg' = c(-0.25, 0.25),   'canmx.hru | change = relchg' = c(-0.5, 0.5),   #surface runoff   'cn2.hru | change = relchg' = c(-0.15, 0.15),   'cn3_swf.hru | change = absval' = c(0, 1),   'ovn.hru | change  = relchg ' = c(-0.25, 0.25),   'surlag.bsn | change = absval' = c(0.05, 4),   # lateral flow (optional - use if lateral flow constitutes at least 5% of total    # water yield)   #'lat_time.hru | change = relchg' = c(-0,15, 0.15),   'lat_len.hru | change = abschg' = c(-30, 30),   'latq_co.hru | change = absval' = c(0, 1),   'bd.sol | change = relchg' = c(-0.25, 0.25),   'k.sol | change = relchg' = c(-0.5, 2),   # tile flow (optional - use if tile flow constitutes at least 5% of total water   # yield; note: tile_lag and tile_dtime should be active only if tile_drain is    # set to 0 in codes.bsn file))   #'tile_dep.hru | change = relchg' = c(-0.1, 0.2),   #'tile_lag.hru | change = absval' = c(48, 100),   #'tile_dtime.hru | change = absval' = c(48, 100),   #percolation/aquifer   'perco.hru | change = absval' = c(0, 1),   'flo_min.aqu | change = abschg' = c(-2, 2),   'revap_co.aqu | change = absval' = c(0.02, 0.2),   'revap_min.aqu | change = abschg' = c(-2, 2),   'alpha.aqu | change = absval' = c(0.001, 0.5),   # 'sp_yld.aqu | change = absval' = c(0.001, 0.05),   'bf_max.aqu | change = absval' = c(0.5, 2),   #channel routing   'chn.rte | change = absval' = c(0.02, 0.1) )  # Draw a first parameter set of parameter combinations  par_flow <- sample_lhs(par_bound, n_comb)"},{"path":[]},{"path":"/articles/hc.html","id":"initialization-of-parameters","dir":"Articles","previous_headings":"3a. Preparing parameters sets for the flow (and water quality) calibration","what":"Initialization of Parameters","title":"Hard calibration","text":"parameters cn3_swf latq_co initialized based runoff potential Hydrologic Response Unit (HRU), parameter perco initialized based leaching potential. calibration three parameters requires considering different initial values. Therefore, parameter sampling conducted follows:","code":""},{"path":"/articles/hc.html","id":"base-parameter-set","dir":"Articles","previous_headings":"3a. Preparing parameters sets for the flow (and water quality) calibration","what":"Base Parameter Set","title":"Hard calibration","text":"parameters perco, cn3_swf, latq_co, normalized ranges (0, 1) sampled. parameters sampled within actual parameter ranges. base Latin Hypercube Sampling (LHS) set drawn defined parameter boundaries.","code":""},{"path":"/articles/hc.html","id":"translating-base-parameter-values","dir":"Articles","previous_headings":"3a. Preparing parameters sets for the flow (and water quality) calibration","what":"Translating Base Parameter Values","title":"Hard calibration","text":"hydrology.hyd, HRU IDs low, moderate, high leaching runoff potentials drawn. = IDs compiled text strings required parameter definition via parameter names. Parameter boundaries different low, moderate, high potentials defined. normalized parameter ranges translated defined boundaries.","code":""},{"path":"/articles/hc.html","id":"base-parameter-boundary-definition","dir":"Articles","previous_headings":"3a. Preparing parameters sets for the flow (and water quality) calibration","what":"Base Parameter Boundary Definition","title":"Hard calibration","text":"reduced set testing purposes include parameters used OPTAIN model setups. Note: Calibration validation hydrology water quality/load related parameters done one step. , need define nutrient parameters together hydrology. Please refer step 12 example define sediment, nitrogen, phosphorus parameters. example presents hydrology parameters.","code":"# Read the hydrology.hyd file to identify the HRU IDs with the different  # runoff and leaching potentials. hyd_hyd <- read_tbl(paste0(model_path, '/hydrology.hyd'))  # Generate the ID text strings to be included in the parameter names so that  # parameter values for HRUs can be addressed separately. init_perco <- c(low = 0.01, mod = 0.50, high = 0.95)  id_lch_pot <- c(low  = group_values(which(hyd_hyd$perco == init_perco['low'])),                 mod  = group_values(which(hyd_hyd$perco == init_perco['mod'])),                 high = group_values(which(hyd_hyd$perco == init_perco['high'])))  init_cn3 <- c(low = 0.95, mod = 0.30, high = 0.00)  id_run_pot <- c(low  = group_values(which(hyd_hyd$cn3_swf == init_cn3['low'])),                 mod  = group_values(which(hyd_hyd$cn3_swf == init_cn3['mod'])),                 high = group_values(which(hyd_hyd$cn3_swf == init_cn3['high'])))  # Define parameter boundaries in which the parameter values should vary for  # the different leaching and runoff potentials. perco_bound <- list(low = c(0.05, 0.30), mod = c(0.30, 0.60), high = c(0.5, 0.90)) cn3_bound   <- list(low = c(0.50, 0.95), mod = c(0.15, 0.45), high = c(0.0, 0.30)) latq_bound  <- list(low = c(0.01, 0.30), mod = c(0.10, 0.40), high = c(0.5, 0.90))  # Translate the normalized parameter ranges into the defined boundary ranges. for(i in c('low', 'mod', 'high')) {   if(nchar(id_lch_pot[i]) > 0) {     par_flow[[paste0('perco_',                       i, '::perco.hru | change = absval | unit = c(',                       id_lch_pot[i], ')')]] <-         par_flow[['perco.hru | change = absval']] * (perco_bound[[i]][2] - perco_bound[[i]][1]) + perco_bound[[i]][1]   }   if(nchar(id_run_pot[i]) > 0) {     par_flow[[paste0('cn3_', i, '::cn3_swf.hru | change = absval | unit = c(',                       id_run_pot[i], ')')]] <-        par_flow[['cn3_swf.hru | change = absval']] * (cn3_bound[[i]][2] - cn3_bound[[i]][1]) + cn3_bound[[i]][1]     par_flow[[paste0('latq_', i, '::latq_co.hru | change = absval | unit = c(',                       id_run_pot[i], ')')]] <- par_flow[['latq_co.hru | change = absval']] *        (latq_bound[[i]][2] - latq_bound[[i]][1]) + latq_bound[[i]][1]   } }  # Remove the initial normalized parameters. par_flow <- par_flow %>%    select(- starts_with(c('perco.hru', 'cn3_swf.hru', 'latq_co.hru')))"},{"path":"/news/index.html","id":"swattunr-001","dir":"Changelog","previous_headings":"","what":"SWATtunR 0.0.1","title":"SWATtunR 0.0.1","text":"first release package SWATtunR.","code":""}]
