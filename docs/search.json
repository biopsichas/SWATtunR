[{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Svajunas Plunge. Author, maintainer. Christoph Schuerz. Author. Michel Strauch. Author. Mikołaj Piniewski. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Plunge S, Schuerz C, Strauch M, Piniewski M (2024). SWATtunR: Soft & Hard Calibration, Validation Package SWAT+ models. R package version 0.0.1.9000, https://github.com/biopsichas/SWATtunR.","code":"@Manual{,   title = {SWATtunR: Soft & Hard Calibration, Validation Package for SWAT+ models},   author = {Svajunas Plunge and Christoph Schuerz and Michel Strauch and Mikołaj Piniewski},   year = {2024},   note = {R package version 0.0.1.9000},   url = {https://github.com/biopsichas/SWATtunR}, }"},{"path":[]},{"path":"/index.html","id":"swattunr","dir":"","previous_headings":"","what":"SWATtunR","title":"Soft & Hard Calibration, Validation Package for SWAT+ models","text":"Text text text","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Soft & Hard Calibration, Validation Package for SWAT+ models","text":"Text text text Text text text","code":"# If the package 'remotes' is not installed run first: install.packages(\"remotes\")  # The installation of `SWATprepR`. remotes::install_github(\"biopsichas/SWATtunR\")"},{"path":"/reference/hello.html","id":null,"dir":"Reference","previous_headings":"","what":"Hello, World! — hello","title":"Hello, World! — hello","text":"Prints 'Hello, world!'.","code":""},{"path":"/reference/hello.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hello, World! — hello","text":"","code":"hello()"},{"path":"/reference/hello.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hello, World! — hello","text":"","code":"hello() #> Error in hello(): could not find function \"hello\""},{"path":"/reference/read_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a SWAT+ input file which has a tabular structure. — read_tbl","title":"Read a SWAT+ input file which has a tabular structure. — read_tbl","text":"function reads SWAT+ input file tabular structure tibble.","code":""},{"path":"/reference/read_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a SWAT+ input file which has a tabular structure. — read_tbl","text":"","code":"read_tbl(file_path, col_names = NULL, n_skip = 1)"},{"path":"/reference/read_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a SWAT+ input file which has a tabular structure. — read_tbl","text":"file_path Path SWAT+ input file. col_names (optional) character vector specifying column names. provided, column names inferred file. Default col_names = NULL. n_skip (optional) Number header rows skip. Default n_skip = 1.","code":""},{"path":"/reference/read_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a SWAT+ input file which has a tabular structure. — read_tbl","text":"tibble representing SWAT+ input file.","code":""},{"path":"/reference/add_suffix_to_duplicate.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a running ID to duplicated names — add_suffix_to_duplicate","title":"Add a running ID to duplicated names — add_suffix_to_duplicate","text":"Add running ID duplicated names","code":""},{"path":"/reference/add_suffix_to_duplicate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a running ID to duplicated names — add_suffix_to_duplicate","text":"","code":"add_suffix_to_duplicate(col_name)"},{"path":"/reference/add_suffix_to_duplicate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a running ID to duplicated names — add_suffix_to_duplicate","text":"col_name Character vector column names","code":""},{"path":"/reference/add_suffix_to_duplicate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a running ID to duplicated names — add_suffix_to_duplicate","text":"col_name character vector IDs duplicated names","code":""},{"path":"/reference/write_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Write SWAT+ input file, which has a tabular structure. — write_tbl","title":"Write SWAT+ input file, which has a tabular structure. — write_tbl","text":"Write SWAT+ input file, tabular structure.","code":""},{"path":"/reference/write_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write SWAT+ input file, which has a tabular structure. — write_tbl","text":"","code":"write_tbl(tbl, file_path, fmt)"},{"path":"/reference/write_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write SWAT+ input file, which has a tabular structure. — write_tbl","text":"tbl SWAT input table tibble (data.frame) format. file_path Write path SWAT+ input file. fmt Character vector format strings define print format table column.","code":""},{"path":"/reference/write_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write SWAT+ input file, which has a tabular structure. — write_tbl","text":"Writes text file table file path.","code":""},{"path":[]},{"path":"/reference/write_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write SWAT+ input file, which has a tabular structure. — write_tbl","text":"","code":"if (FALSE) { ## Read the hydrology.hyd input file hydrology_hyd <- read_tbl(paste0(model_path, '/hydrology.hyd')) hydrology_hyd$esco <- 1 ## Updating hydrology.hyd file hydr_hyd_fmt <- c('%-16s', rep('%12.5f', 14)) write_tbl(hydrology_hyd, paste0(model_path, '/hydrology.hyd'), hydr_hyd_fmt) }"},{"path":"/reference/copy_file_version.html","id":null,"dir":"Reference","previous_headings":"","what":"Copy a file with an optional version suffix. — copy_file_version","title":"Copy a file with an optional version suffix. — copy_file_version","text":"function copies file one location another, optional version suffix appended filename.","code":""},{"path":"/reference/copy_file_version.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Copy a file with an optional version suffix. — copy_file_version","text":"","code":"copy_file_version(model_path, file_name, file_version = NULL)"},{"path":"/reference/copy_file_version.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Copy a file with an optional version suffix. — copy_file_version","text":"model_path path directory containing file. file_name name file copied. file_version optional version suffix appended filename. Default file_version = NULL, adds '.bkp' filename.","code":""},{"path":"/reference/copy_file_version.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Copy a file with an optional version suffix. — copy_file_version","text":"None","code":""},{"path":"/reference/plot_phu_yld_bms.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot PHU, yield, and biomass over days to maturity — plot_phu_yld_bms","title":"Plot PHU, yield, and biomass over days to maturity — plot_phu_yld_bms","text":"function generates boxplots visualize Plant Heat Units (PHU) fractions, yields, biomass changes days maturity.","code":""},{"path":"/reference/plot_phu_yld_bms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot PHU, yield, and biomass over days to maturity — plot_phu_yld_bms","text":"","code":"plot_phu_yld_bms(   sim_result,   x_label,   yield = NULL,   yield_min = NULL,   yield_max = NULL )"},{"path":"/reference/plot_phu_yld_bms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot PHU, yield, and biomass over days to maturity — plot_phu_yld_bms","text":"sim_result simulation results containing PHU, yield, biomass data. x_label Labels x-axis representing changes days maturity. yield (optional) mean yield values crop. Default yield = NULL. yield_min (optional) minimum observed yield values crop. Default yield_min = NULL yield_max (optional) maximum observed yield values crop. Default yield_max = NULL","code":""},{"path":"/reference/plot_phu_yld_bms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot PHU, yield, and biomass over days to maturity — plot_phu_yld_bms","text":"combined ggplot object showing boxplots PHU fractions, yields, biomass.","code":""},{"path":"/reference/plot_phu_yld_bms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot PHU, yield, and biomass over days to maturity — plot_phu_yld_bms","text":"","code":"if (FALSE) { plot_phu_yld_bms(ylds_phu_dmat, dmat_chg, yield_mean, yield_min, yield_max) }"},{"path":"/reference/sample_lhs.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample parameters space — sample_lhs","title":"Sample parameters space — sample_lhs","text":"function samples parameter space using Latin Hypercube Sampling (LHS).","code":""},{"path":"/reference/sample_lhs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample parameters space — sample_lhs","text":"","code":"sample_lhs(par, n)"},{"path":"/reference/sample_lhs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample parameters space — sample_lhs","text":"par matrix data frame specifying parameter ranges. n number samples generate.","code":""},{"path":"/reference/sample_lhs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample parameters space — sample_lhs","text":"tibble containing sampled parameter values.","code":""},{"path":"/reference/sample_lhs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample parameters space — sample_lhs","text":"","code":"# Define parameter ranges parameters <- data.frame(   param1 = c(0, 1),   param2 = c(0, 2),   param3 = c(0, 10) )  # Sample the parameter space sample_space <- sample_lhs(parameters, 3) sample_space #> # A tibble: 3 × 3 #>   param1 param2 param3 #>    <dbl>  <dbl>  <dbl> #> 1  0.449  0.892   4.65 #> 2  0.900  0.645   2.33 #> 3  0.210  1.51    7.86"},{"path":"/reference/plot_dotty_yields.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Dotty Yields — plot_dotty_yields","title":"Plot Dotty Yields — plot_dotty_yields","text":"function creates dotty plots simulated yields, comparing observed yields (available).","code":""},{"path":"/reference/plot_dotty_yields.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Dotty Yields — plot_dotty_yields","text":"","code":"plot_dotty_yields(sim_result, yield = NULL, yield_min = NULL, yield_max = NULL)"},{"path":"/reference/plot_dotty_yields.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Dotty Yields — plot_dotty_yields","text":"sim_result simulation results containing yield data. yield (optional) mean yield values crop. Default yield = NULL. yield_min (optional) minimum observed yield values crop. Default yield_min = NULL yield_max (optional) maximum observed yield values crop. Default yield_max = NULL","code":""},{"path":"/reference/plot_dotty_yields.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Dotty Yields — plot_dotty_yields","text":"combined ggplot object showing dottty plots 4 parameters.","code":""},{"path":"/reference/plot_dotty_yields.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Dotty Yields — plot_dotty_yields","text":"","code":"if (FALSE) { plot_phu_yld_bms(ylds_phu_dmat, dmat_chg, yield_mean, yield_min, yield_max) }"},{"path":"/reference/dotty_fig.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a dotty plot — dotty_fig","title":"Make a dotty plot — dotty_fig","text":"Make dotty plot","code":""},{"path":"/reference/dotty_fig.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a dotty plot — dotty_fig","text":"","code":"dotty_fig(sim_yield, yield = NULL, yield_min = NULL, yield_max = NULL)"},{"path":"/reference/dotty_fig.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a dotty plot — dotty_fig","text":"sim_yield dataframe yield data yield (optional) mean yield values crop. Default yield = NULL. yield_min (optional) minimum observed yield values crop. Default yield_min = NULL. yield_max (optional) maximum observed yield values crop. Default yield_max = NULL.","code":""},{"path":"/reference/dotty_fig.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a dotty plot — dotty_fig","text":"ggplot object dotty plot","code":""},{"path":"/reference/dotty_fig.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a dotty plot — dotty_fig","text":"","code":"if (FALSE) { dotty_fig(sim_yield) }"},{"path":"/reference/plot_dotty.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Dotty — plot_dotty","title":"Plot Dotty — plot_dotty","text":"function creates dotty plot visualize relationship parameter values performance results.","code":""},{"path":"/reference/plot_dotty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Dotty — plot_dotty","text":"","code":"plot_dotty(   par,   var,   y_label = \"y\",   n_col = 3,   y_lim = NULL,   y_inter = NULL,   trend = FALSE,   run_ids = NULL,   low_up = FALSE )"},{"path":"/reference/plot_dotty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Dotty — plot_dotty","text":"par data frame model parameter values simulation. var model performance result vector list vectors plotted parameter values. y_label (optional) Labels y-axis, either single label vector corresponding variable var list. Default y_label = 'y'. n_col (optional) Number columns facet grid. Default n_col = 3. y_lim (optional) Limits y-axis. Default y_lim = NULL. y_inter (optional) Y-axis intercept value. Default y_inter = NULL. trend (optional) Logical, indicating whether add trend line. Default trend = FALSE. run_ids (optional) numeric vector run IDs highlighted plot. Default run_ids = NULL. low_up (optional) Logical, TRUE whole possible parameter range used x axis. Default low_up = FALSE.","code":""},{"path":"/reference/plot_dotty.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Dotty — plot_dotty","text":"ggplot object representing dotty plot.","code":""},{"path":"/reference/plot_dotty.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Dotty — plot_dotty","text":"","code":"# Example usage: # plot_dotty(my_data, 'performance', y_label = 'y_label')"},{"path":"/reference/update_par.html","id":null,"dir":"Reference","previous_headings":"","what":"Update Parameters — update_par","title":"Update Parameters — update_par","text":"function updates parameters based different types changes.","code":""},{"path":"/reference/update_par.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update Parameters — update_par","text":"","code":"update_par(par, par_up, change)"},{"path":"/reference/update_par.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update Parameters — update_par","text":"par Numeric vector: Original parameter values. par_up Numeric vector: Values indicating update parameter. change Character scalar: Type change apply. Options \"relchg\" relative change, \"pctchg\" percentage change, \"abschg\" absolute change, \"absval\" setting absolute value change.","code":""},{"path":"/reference/update_par.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update Parameters — update_par","text":"Numeric vector updated parameter values.","code":""},{"path":"/reference/update_par.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update Parameters — update_par","text":"","code":"par <- c(10, 20, 30, 40) par_up <- c(0.1, 0.2, NA, 0.3) update_par(par, par_up, \"relchg\") # Returns updated parameters with relative change applied. #> [1] 11 24 30 52"},{"path":"/articles/soft-cal.html","id":"loading-required-packages","dir":"Articles","previous_headings":"","what":"1. Loading required packages","title":"Soft-Cal Crop Yields","text":"SWATtunR package essential soft calibration, provides necessary functions calibration process. Additional packages required data manipulation, visualization, SWAT+ model runs, etc.","code":"library(SWATtunR) library(SWATrunR) library(tidyverse) library(tibble) library(purrr)"},{"path":"/articles/soft-cal.html","id":"defining-settings","dir":"Articles","previous_headings":"","what":"2. Defining settings","title":"Soft-Cal Crop Yields","text":"step requires defining SWAT+ model path, path crop data file, observed water yield precipitation ratio. crop yield soft calibration, ’s essential accurate data observed crop yields dry weight. data typically sourced '*.csv' file, columns specifying plant names corresponding mean yields. additional information accessible, minimum maximum ranges average annual observed yields, ’s advisable include '*.csv' file well, columns labeled yield_min yield_max respectively. ensures comprehensive dataset effective calibration analysis. Crops observed yield data example provided .","code":"# Path to the SWAT+ model model_path <- '../test/my_dearest_model'  # Path to the crop data file crop_data_path <- '../inst/extdata/crop2.csv'  # Observed water yield to precipitation ratio obs_wy_ratio <- 0.27  # Set the path to save results of the soft calibration sc_res <- '../test/simulations' ## crops_obs <- read_csv(crop_data_path, show_col_types = FALSE) %>%    filter(!is.na(yield_mean))  head(crops_obs, 3) ## # A tibble: 3 × 4 ##   plant_name yield_min yield_max yield_mean ##   <chr>          <dbl>     <dbl>      <dbl> ## 1 akgs            8         12         10   ## 2 csil            7.34      13.5       11.2 ## 3 sgbt           11.0       16.9       14.0"},{"path":"/articles/soft-cal.html","id":"days-to-maturity-parameter-changes","dir":"Articles","previous_headings":"","what":"3. Days to maturity parameter changes","title":"Soft-Cal Crop Yields","text":"settings following step allows define, days maturity changes applied soft-calibration.","code":""},{"path":"/articles/soft-cal.html","id":"initialization","dir":"Articles","previous_headings":"3. Days to maturity parameter changes","what":"3.1. Initialization","title":"Soft-Cal Crop Yields","text":"Preparation step requires conversion observed yields information numeric vectors initialization 'plants.plt' file.","code":"# Convert observed yields to numeric vectors for(i in c(\"yield_mean\", \"yield_min\", \"yield_max\")){   if(i %in% colnames(crops_obs)){     assign(i, deframe(select(crops_obs, all_of(c(\"plant_name\", i)))))    } else {     assign(i, NULL)   } }  ## Initialize unmodified backup version of plants.plt if(!file.exists(paste0(model_path, '/plants.plt.bkp0'))) {   copy_file_version(model_path, 'plants.plt', file_version = 0) }"},{"path":"/articles/soft-cal.html","id":"days-to-maturity-changes","dir":"Articles","previous_headings":"3. Days to maturity parameter changes","what":"3.2. Days to maturity changes","title":"Soft-Cal Crop Yields","text":"following code generates parameter input table changes required SWAT+ model run. names converted SWATrunR syntax days maturity parameter. code snippet also samples changes days maturity, allowing users define crops used soft calibration initial values days maturity.","code":"# Reading the plants.plt input file from the initial unchanged backup file plants_plt <- read_tbl(file_path = paste0(model_path, '/plants.plt.bkp0')) plants_plt <- select(plants_plt, - any_of('description'))  # Define all crops which should be calibrated # Alternatively define a name vector (if you also want to consider crops  # which are not given in the observation input file). crops <- crops_obs$plant_name # crops <- c('crop1', 'crop2', 'crop3')  # Get a vector with days_mat initial values for the selected crops dmat_init <- plants_plt %>%   filter(name %in% crops) %>%    select(name, days_mat) %>%   mutate(days_mat = ifelse(days_mat == 0, 110, days_mat)) %>%    ## if days_mat is 0, set it to 110 (as it is the default value)   deframe()  # Sample changes for days to maturity. Depending on the number of cores you have  # available choose a reasonable interval for the days to maturity which you want  # to test. With an interval of 10 e.g. you have to do 12 simulations (3 rounds  # on 4 cores), with an interval of 5 its 23 simulations. dmat_step <- 20 dmat_chg <- round(seq(-30, 100, dmat_step))  # Generate the parameter input table with the changes for all crops and convert  # the names into SWATrunR syntax par_dmat <- map_df(dmat_init, ~ .x + dmat_chg) %>%    set_names(., paste0('dmat_', names(.),                       '::days_mat.pdb | change = absval | name = ' , names(.)))"},{"path":"/articles/soft-cal.html","id":"run-simulations","dir":"Articles","previous_headings":"","what":"4. Run simulations","title":"Soft-Cal Crop Yields","text":"Days maturity parameter changes applied SWAT+ model, simulations run analyze PHU fractions, yields biomass selected crops. SWATrunR package used run simulations.","code":"# Set the number of cores. E.g. for 12 runs use 4 6, or 12 cores (if available) cores <- 3  ylds_phu_dmat <- run_swatplus(project_path = model_path,                               output = list(yld = define_output(file = 'mgtout',                                                                 variable = 'yld',                                                                 unit = crops),                                             bms = define_output(file = 'mgtout',                                                                 variable = 'bioms',                                                                 unit = crops),                                             phu = define_output(file = 'mgtout',                                                                 variable = 'phu',                                                                 unit = crops)                               ),                               parameter = par_dmat,                               start_date = '2015-01-01',                               end_date = '2020-12-31',                               years_skip = 2,                               n_thread = cores)  # Optionally save the simulation runs. if(!dir.exists(sc_res)) dir.create(sc_res) saveRDS(ylds_phu_dmat, paste0(sc_res, \"/ylds_phu_mat3.rds\"))"},{"path":"/articles/soft-cal.html","id":"plot-phu-fractions-yields-and-biomass-for-days-to-maturity-changes","dir":"Articles","previous_headings":"","what":"5. Plot PHU fractions, yields, and biomass for days to maturity changes","title":"Soft-Cal Crop Yields","text":"figure, visualize PHU fractions, yields, biomass various days maturity settings. graphical representation serves reference adjust initial values days_mat crop simulation. grain crops, typically dry harvest, aim PHU fractions ranging approximately 1.2 1.5 optimize yield. Vegetables, hand, tend PHU fraction around 1, possibly slightly , considered optimal. Crops like basil broccoli harvested reaching full maturity. cases, PHU fractions can lower 1, ranging 0.5 0.9. Furthermore, ’s crucial ensure simulated yields fall within range locally observed yields maintain accuracy relevance.","code":"plot_phu_yld_bms(ylds_phu_dmat, dmat_chg, yield_mean, yield_min, yield_max) plot_phu_yld_bms(ylds_phu_dmat, dmat_chg, yield_mean, yield_min, yield_max)"},{"path":"/articles/soft-cal.html","id":"select-days-to-maturity-parameter-changes-to-apply","dir":"Articles","previous_headings":"","what":"6. Select days to maturity parameter changes to apply","title":"Soft-Cal Crop Yields","text":"Based figure provided, identify necessary adjustments days maturity parameter SWAT+ model. adjustments made ensure PHU fractions, yields, biomass values specified crops align observed data.","code":"# Add values based on figure to this line (please add all crops from the initial selection) # names(dmat_init) # Print all crop names chg_dmat_sel <- c(akgs = -30, csil = 10, sgbt =  70,                    wbar =   -10, wira = -10, wiry =  0, wwht =  -30)   # Adding defined changes to initial days_mat values of crops dmat_sel <- chg_dmat_sel[names(dmat_init)] + dmat_init dmat_sel <- enframe(dmat_sel, value = 'days_mat_upd')"},{"path":"/articles/soft-cal.html","id":"write-d_mat-modifications-into-file","dir":"Articles","previous_headings":"","what":"7. Write d_mat modifications into file","title":"Soft-Cal Crop Yields","text":"Write changes plants.plt file update days maturity values selected crops also backup updated file plants.plt.bkp1 file.","code":"## [1] TRUE"},{"path":"/articles/soft-cal.html","id":"check-initial-crop-lai_pot-harv_idx-tmp_base-bm_e-parameters","dir":"Articles","previous_headings":"","what":"8. Check initial crop lai_pot, harv_idx, tmp_base, bm_e parameters","title":"Soft-Cal Crop Yields","text":"fixing days maturity values, might needed address values lai_pot, harv_idx, tmp_base, bm_e parameters selected crops. parameters crucial simulation adjusted PHU fractions, yields, biomass values within expected range.","code":"plants_plt <- read_tbl(file_path = paste0(model_path, '/plants.plt'))  par_ini <- plants_plt %>%   filter(name %in% crops) %>%   select(name, lai_pot, harv_idx, tmp_base, bm_e)#, days_mat) par_ini ## # A tibble: 7 × 5 ##   name  lai_pot harv_idx tmp_base  bm_e ##   <chr>   <dbl>    <dbl>    <dbl> <dbl> ## 1 csil      4       0.9         8  39   ## 2 sgbt      5       2           4  30   ## 3 wbar      4       0.54        0  30   ## 4 wwht      4       0.4         0  30   ## 5 wira      3.5     0.23        5  38   ## 6 wiry      4       0.4         0  30   ## 7 akgs      4       0.75        0  12.5"},{"path":"/articles/soft-cal.html","id":"step9","dir":"Articles","previous_headings":"","what":"9. Create sample of lai_pot, harv_idx, tmp_base, bm_e parameters with LHS","title":"Soft-Cal Crop Yields","text":"use lhs package create sample parameter values selected crops. sample used run SWAT+ simulations evaluate impact parameter changes model output.","code":"## Make sure your updates will not produce unrealistic values (i.e. negative values)!!! par_bnd <- tibble('lai_pot.pdb | change = relchg' = c(-0.3, 0.3),                   'harv_idx.pdb | change = relchg' = c(-0.3, 0.3),                   'tmp_base.pdb | change = relchg' = c(-0.3, 0.3),                   'bm_e.pdb | change = relchg' = c(-0.3, 0.1))  par_crop <- sample_lhs(par_bnd, 10)"},{"path":"/articles/soft-cal.html","id":"step10","dir":"Articles","previous_headings":"","what":"10. Run SWATrunR for prepared parameter set","title":"Soft-Cal Crop Yields","text":"","code":"ylds_plnt_par <- run_swatplus(project_path = model_path,                               output = list(yld = define_output(file = 'mgtout',                                                                 variable = 'yld',                                                                 unit = crops)),                               parameter = par_crop,                               n_thread = cores) saveRDS(ylds_plnt_par, paste0(sc_res, \"/ylds_plnt_par3.rds\"))"},{"path":"/articles/soft-cal.html","id":"step11","dir":"Articles","previous_headings":"","what":"11. Examine results in figures","title":"Soft-Cal Crop Yields","text":"Plotting simulation results dotty plots can help identify parameter sensitivities modify . examining patterns dotty plots, may consider adjusting certain parameter ranges (step 9) rerunning model (step 10) observe changes results. Subsequently, can reanalyze outcomes (step 11) gain insights refine understanding system modeled.","code":"## Plot dotty figures for the selected crops plot_dotty_yields(ylds_plnt_par, yield_mean, yield_min, yield_max)"},{"path":"/articles/sc-crops.html","id":"scc_step1","dir":"Articles","previous_headings":"","what":"1. Loading required packages","title":"Crop Yields","text":"SWATtunR package essential soft calibration, provides necessary functions calibration process. Additional packages required data manipulation, visualization, SWAT+ model runs, etc.","code":"## Required libraries to run workflow library(SWATtunR) library(SWATrunR) library(tidyverse) library(tibble) library(purrr)"},{"path":"/articles/sc-crops.html","id":"scc_step2","dir":"Articles","previous_headings":"","what":"2. Defining settings","title":"Crop Yields","text":"step requires defining SWAT+ model path, path crop data file. crop yield soft calibration, ’s essential accurate data observed crop yields dry weight. data typically sourced '*.csv' file, columns specifying plant names corresponding mean yields. additional information accessible, minimum maximum ranges average annual observed yields, ’s advisable include '*.csv' file well, columns labeled yield_min yield_max respectively. ensures comprehensive dataset effective calibration analysis. Crops observed yields data example provided .","code":"# Path to the SWAT+ model model_path <- '../test/my_dearest_model'  # Path to the crop data file crop_data_path <- '../inst/extdata/crop2.csv'  # Set the path to save results of the soft calibration sc_res <- '../test/simulations'  # Set the number of cores available for calculations.   cores <- 3 ## crops_obs <- read_csv(crop_data_path, show_col_types = FALSE) %>%    filter(!is.na(yield_mean))  head(crops_obs, 3) ## # A tibble: 3 × 4 ##   plant_name yield_min yield_max yield_mean ##   <chr>          <dbl>     <dbl>      <dbl> ## 1 akgs            8         12         10   ## 2 csil            7.34      13.5       11.2 ## 3 sgbt           11.0       16.9       14.0"},{"path":"/articles/sc-crops.html","id":"scc_step3","dir":"Articles","previous_headings":"","what":"3. Days to maturity parameter changes","title":"Crop Yields","text":"settings following step allows define, days maturity changes applied soft-calibration.","code":""},{"path":"/articles/sc-crops.html","id":"scc_step31","dir":"Articles","previous_headings":"3. Days to maturity parameter changes","what":"3.1. Initialization","title":"Crop Yields","text":"preparation step requires conversion observed yields information numeric vectors initialization 'plants.plt' file.","code":"# Convert observed yields to numeric vectors for(i in c(\"yield_mean\", \"yield_min\", \"yield_max\")){   if(i %in% colnames(crops_obs)){     assign(i, deframe(select(crops_obs, all_of(c(\"plant_name\", i)))))    } else {     assign(i, NULL)   } }  ## Initialize unmodified backup version of plants.plt if(!file.exists(paste0(model_path, '/plants.plt.bkp0'))) {   copy_file_version(model_path, 'plants.plt', file_version = 0) }"},{"path":"/articles/sc-crops.html","id":"scc_step32","dir":"Articles","previous_headings":"3. Days to maturity parameter changes","what":"3.2. Days to maturity changes","title":"Crop Yields","text":"following code generates parameter input table changes required SWAT+ model run. names converted SWATrunR syntax days maturity parameter. code snippet also samples changes days maturity, allowing users define crops used soft calibration initial values days maturity.","code":"# Reading the plants.plt input file from the initial unchanged backup file plants_plt <- read_tbl(file_path = paste0(model_path, '/plants.plt.bkp0')) plants_plt <- select(plants_plt, - any_of('description'))  # Define all crops which should be calibrated # Alternatively define a name vector (if you also want to consider crops  # which are not given in the observation input file). crops <- crops_obs$plant_name # crops <- c('crop1', 'crop2', 'crop3')  # Get a vector with days_mat initial values for the selected crops dmat_init <- plants_plt %>%   filter(name %in% crops) %>%    select(name, days_mat) %>%   mutate(days_mat = ifelse(days_mat == 0, 110, days_mat)) %>%    ## if days_mat is 0, set it to 110 (as it is the default value)   deframe()  # Sample changes for days to maturity. Depending on the number of cores you have  # available choose a reasonable interval for the days to maturity which you want  # to test. With an interval of 10 e.g. you have to do 12 simulations (3 rounds  # on 4 cores), with an interval of 5 its 23 simulations. dmat_step <- 20 dmat_chg <- round(seq(-30, 100, dmat_step))  # Generate the parameter input table with the changes for all crops and convert  # the names into SWATrunR syntax par_dmat <- map_df(dmat_init, ~ .x + dmat_chg) %>%    set_names(., paste0('dmat_', names(.),                       '::days_mat.pdb | change = absval | name = ' , names(.)))"},{"path":"/articles/sc-crops.html","id":"scc_step4","dir":"Articles","previous_headings":"","what":"4. Run simulations","title":"Crop Yields","text":"Days maturity parameter changes applied SWAT+ model, simulations run analyze PHU fractions, yields biomass selected crops. SWATrunR package used run simulations.","code":"ylds_phu_dmat <- run_swatplus(project_path = model_path,                               output = list(yld = define_output(file = 'mgtout',                                                                 variable = 'yld',                                                                 unit = crops),                                             bms = define_output(file = 'mgtout',                                                                 variable = 'bioms',                                                                 unit = crops),                                             phu = define_output(file = 'mgtout',                                                                 variable = 'phu',                                                                 unit = crops)                               ),                               parameter = par_dmat,                               start_date = '2015-01-01',                               end_date = '2020-12-31',                               years_skip = 2,                               n_thread = cores)  # Optionally save the simulation runs. if(!dir.exists(sc_res)) dir.create(sc_res) saveRDS(ylds_phu_dmat, paste0(sc_res, \"/ylds_phu_mat.rds\"))"},{"path":"/articles/sc-crops.html","id":"scc_step5","dir":"Articles","previous_headings":"","what":"5. Plot PHU fractions, yields, and biomass for days to maturity changes","title":"Crop Yields","text":"figure, visualize PHU fractions, yields, biomass various days maturity settings. graphical representation serves reference adjust initial values days_mat crop simulation. grain crops, typically dry harvest, aim PHU fractions ranging approximately 1.2 1.5 optimize yield. Vegetables, hand, tend PHU fraction around 1, possibly slightly , considered optimal. Crops like basil broccoli harvested reaching full maturity. cases, PHU fractions can lower 1, ranging 0.5 0.9. Furthermore, ’s crucial ensure simulated yields fall within range locally observed yields maintain accuracy relevance.","code":"plot_phu_yld_bms(ylds_phu_dmat, dmat_chg, yield_mean, yield_min, yield_max)"},{"path":"/articles/sc-crops.html","id":"scc_step6","dir":"Articles","previous_headings":"","what":"6. Select days to maturity parameter changes to apply","title":"Crop Yields","text":"Based figure provided, identify necessary adjustments days maturity parameter SWAT+ model. adjustments made ensure PHU fractions, yields, biomass values specified crops align observed data.","code":"# Add values based on figure to this line (please add all crops from the initial selection) # names(dmat_init) # Print all crop names chg_dmat_sel <- c(akgs = -30, csil = 10, sgbt =  70,                    wbar =   -10, wira = -10, wiry =  0, wwht =  -30)   # Adding defined changes to initial days_mat values of crops dmat_sel <- chg_dmat_sel[names(dmat_init)] + dmat_init dmat_sel <- enframe(dmat_sel, value = 'days_mat_upd')"},{"path":"/articles/sc-crops.html","id":"scc_step7","dir":"Articles","previous_headings":"","what":"7. Write d_mat modifications into file","title":"Crop Yields","text":"Write changes plants.plt file update days maturity values selected crops also backup updated file plants.plt.bkp1 file.","code":"## [1] TRUE"},{"path":"/articles/sc-crops.html","id":"scc_step8","dir":"Articles","previous_headings":"","what":"8. Check initial crop lai_pot, harv_idx, tmp_base, bm_e parameters","title":"Crop Yields","text":"fixing days maturity values, might needed address values lai_pot, harv_idx, tmp_base, bm_e parameters selected crops. parameters crucial simulation adjusted PHU fractions, yields, biomass values within expected range.","code":"plants_plt <- read_tbl(file_path = paste0(model_path, '/plants.plt'))  par_ini <- plants_plt %>%   filter(name %in% crops) %>%   select(name, lai_pot, harv_idx, tmp_base, bm_e)#, days_mat) par_ini ## # A tibble: 7 × 5 ##   name  lai_pot harv_idx tmp_base  bm_e ##   <chr>   <dbl>    <dbl>    <dbl> <dbl> ## 1 csil      4       0.9         8  39   ## 2 sgbt      5       2           4  30   ## 3 wbar      4       0.54        0  30   ## 4 wwht      4       0.4         0  30   ## 5 wira      3.5     0.23        5  38   ## 6 wiry      4       0.4         0  30   ## 7 akgs      4       0.75        0  12.5"},{"path":"/articles/sc-crops.html","id":"scc_step9","dir":"Articles","previous_headings":"","what":"9. Create sample of lai_pot, harv_idx, tmp_base, bm_e parameters with LHS","title":"Crop Yields","text":"use sample_lhs function create sample parameter values selected crops. sample used run SWAT+ simulations evaluate impact parameter changes model output. syntax parameter boundaries found SWATrunR page.","code":"## Define changes to be applied to the initial parameter values ## Make sure your updates will not produce unrealistic values (i.e. negative values)!!! par_bnd <- tibble('lai_pot.pdb | change = relchg' = c(-0.3, 0.3),                   'harv_idx.pdb | change = relchg' = c(-0.3, 0.3),                   'tmp_base.pdb | change = relchg' = c(-0.3, 0.3),                   # 'tmp_base.pdb | change = abschg' = c(-2, 2),                   'bm_e.pdb | change = relchg' = c(-0.3, 0.1))  par_crop <- sample_lhs(par_bnd, 10) ## 10 samples for each parameter will be generated.  ## The number of samples can be adjusted based on the available computational resources. ## Recommended number of samples is 50-100."},{"path":"/articles/sc-crops.html","id":"scc_step10","dir":"Articles","previous_headings":"","what":"10. Run SWATrunR for prepared parameter set","title":"Crop Yields","text":"Run SWAT+ model updated parameters selected crops rerun. simulation results used evaluate impact parameter changes model output.","code":"ylds_plnt_par <- run_swatplus(project_path = model_path,                               output = list(yld = define_output(file = 'mgtout',                                                                 variable = 'yld',                                                                 unit = crops)),                               parameter = par_crop,                               n_thread = cores)  ## Save the results to the file saveRDS(ylds_plnt_par, paste0(sc_res, \"/ylds_plnt_par.rds\"))"},{"path":"/articles/sc-crops.html","id":"scc_step11","dir":"Articles","previous_headings":"","what":"11. Examine results in figures","title":"Crop Yields","text":"Plotting simulation results dotty plots can help identify parameter sensitivities modify . examining patterns dotty plots, may consider adjusting certain parameter ranges (step 9) rerunning model (step 10) observe changes results. Subsequently, can reanalyze outcomes plot_dotty_yields function gain insights refine understanding system modeled.","code":"## Plot dotty figures for the selected crops plot_dotty_yields(ylds_plnt_par, yield_mean, yield_min, yield_max)"},{"path":"/articles/sc-crops.html","id":"scc_step12","dir":"Articles","previous_headings":"","what":"12. Update parameter values in plants.plt file","title":"Crop Yields","text":"examining results SWAT+ simulations, can adjust parameter values plants.plt file. parameters need changed, sensitive might help improve model performance. Different crops exhibit different sensitivities parameters, important select parameters crop. Following code sniplet shows update plants.plt file.","code":"## Fix changes you want to write in plants.plt file chg_par <- tibble(   name     = c(\"akgs\",\"barl\", \"csil\", \"sgbt\", \"wbar\", \"wira\", \"wiry\", \"wwht\"),   lai_pot  = c(    0,     0,      0,      0,      0,      0,      0,      0),   harv_idx = c(    0,     0,      0,      0,      0,      0,    0.3,    0.3),   tmp_base = c(    0,     0,      0,      0,      0,      0,   -0.2,   -0.2),   bm_e     = c(    0,     0,      0,      0,      0,      0,      0,      0)) %>%   left_join(select(plants_plt, name), ., by = 'name')  ## Update parameter values in plants.plt for (i in 1:ncol(par_bnd)) {   par_i <- names(chg_par)[i + 1]   chg_typ_i <- sub(\".*change = \", \"\", names(par_bnd)[i])   plants_plt[par_i] <- update_par(plants_plt[[par_i]], chg_par[[par_i]], chg_typ_i) }  ## Overwriting plants.plt with the updated parameter values. write_tbl(plants_plt, paste0(model_path, '/plants.plt'), fmt = plants_plt_fmt)"},{"path":"/articles/sc-crops.html","id":"scc_step13","dir":"Articles","previous_headings":"","what":"13. Rerun final plants.plt parameter selection","title":"Crop Yields","text":"updating plants.plt file new parameter values, can rerun SWAT+ model evaluate impact parameter changes model output. simulation results provide model, soft calibrated selected crops. Examine final results {#scc_step14} Egamine final results SWAT+ simulations. simulation results provide model, soft calibrated selected crops. -depth analysis, users can employ additional SWATdoctR functions, like plot_hru_pw_day(). function enables visualization daily time series variables output file hru_pw_day.txt related hydrological response units , providing valuable insights model’s performance behavior. might help understanding model’s outputs decide crop yield soft calibration results acceptable.","code":"phu_yld_final <- run_swatplus(project_path = model_path,                               output = list(yld = define_output(file = 'mgtout',                                                                 variable = 'yld',                                                                 unit = crops),                                             bms = define_output(file = 'mgtout',                                                                 variable = 'bioms',                                                                 unit = crops),                                             phu = define_output(file = 'mgtout',                                                                 variable = 'phu',                                                                 unit = crops)))  ## Save the results to the file saveRDS(phu_yld_final, paste0(sc_res, \"/phu_yld_final.rds\")) plot_phu_yld_bms(phu_yld_final, 0, yield_mean, yield_min, yield_max)"},{"path":"/articles/sc-wy.html","id":"scc_step2","dir":"Articles","previous_headings":"","what":"2. Defining settings","title":"Water Yield","text":"step requires defining SWAT+ model path observed water yield precipitation ratio.","code":"# Observed water yield to precipitation ratio obs_wy_ratio <- 0.27"}]
