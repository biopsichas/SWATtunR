[{"path":"/articles/hc-plot.html","id":"hcp_step1","dir":"Articles","previous_headings":"","what":"1. Dotty plots","title":"Plot results","text":"comparison, can use function plot_dotty. allows examining model performance results versus parameter values. function following arguments: par: data frame model parameter values simulation. var: model performance result vector list vectors plotted parameter values. y_label: label vector labels y-axis. Default 'y'. n_col: number columns facet grid. Default 3. y_lim: defines limits y-axis. Default NULL. y_inter: Y-axis intercept value. Default NULL. trend: logical, indicating whether add trend line. Default FALSE. run_ids: numeric vector run IDs highlighted plot. low_up: logical, TRUE whole possible parameter range used x-axis. Default FALSE.  Dotty plots can also created multiple variables simulation list. case, dotty plot displayed plot different colors variable. Trends can also added plot. Water flow water quality variables can plotted together plot.","code":"# Example of usage: plot_dotty(sim_flow$parameter$values, obj_tbl$nse) plot_dotty(sim_flow$parameter$values, obj_tbl$kge, n_col = 5, y_lim = c(0.5, 0.9)) plot_dotty(sim_flow$parameter$values, obj_tbl$pbias, n_col = 5) plot_dotty(sim_flow$parameter$values, obj_tbl$nse, run_ids = c(1, 2, 5), low_up = TRUE) plot_dotty(sim_flow$parameter$values, obj_tbl$kge, trend = TRUE) # Example of usage: plot_dotty(par = sim_flow$parameter$values,             var = list(obj_tbl_m$obj_tbl_list$flo_day_52$nse,                        obj_tbl_m$obj_tbl_list$no3_day_52_conc$nse,                       obj_tbl_m$obj_tbl_list$gwd$nse),             y_label =  c('Flow at 52r (m3/s)',                          \"Nitrate at 52r (mgN/l)\",                          \"Groundwater depth (m)\"),            trend = TRUE)"},{"path":"/articles/hc-plot.html","id":"hcp_step2","dir":"Articles","previous_headings":"","what":"2. Simulation vs observed values time series","title":"Plot results","text":"plot results selected variable sets simulation results versus observed, can use plot_selected_sim. function allows compare selected simulated data observation data. function several arguments: sim: object SWATrunR. obs: dataframe observed data two columns: ‘date’ ‘value’. par_name: name parameter set used (default NULL, selects first record). multiple parameter sets, can use argument select one want use. example, par_name = \"flo_day\" par_name = \"no3_day_conc\". run_ids: character vector IDs runs used plot. run_sel: character vector ID IDs runs emphasized plot. plot_bands: logical. TRUE, plot include lower upper bands results. period: character. NULL, plot based original time step simulation. examples “day”, “week”, “month”, “year”, etc. “average monthly”, plot based multi-annual monthly values. fn_summarize: function recalculate time interval (default “mean”), options include “mean”, “median”, “sum”, “min”, “max”, etc. x_label: character. Label x-axis. Default “Date”. y_label: character. Label y-axis. Default “Discharge (m³/s)”.  function can also used plot average monthly values selected variable set. case, period argument set “average monthly”.","code":"##Simple example plot_selected_sim(sim_flow, obs, par_name = \"flo_day_52\", run_ids = run_sel_ids) # Another example how all function arguments are used plot_selected_sim(sim = sim_flow,                   obs = obs,                   par_name = \"flo_day_52\",                   run_ids = run_sel_ids,                   run_sel = run_sel_ids[1],                   plot_bands = TRUE,                   period = \"average monthly\",                   fn_summarize = \"mean\",                   x_label = \"Month\",                   y_label = \"Monthly flow average (m<sup>3<\/sup> s<sup>-1<\/sup>)\")"},{"path":"/articles/hc-plot.html","id":"hcp_step3","dir":"Articles","previous_headings":"","what":"3. Plotting parameter identifiability","title":"Plot results","text":"parameter identifiability plot prepared based methodology provided article Guse et al. (2020). plot shows ranges parameter,s perform better certain performance metric. run_fraction defines fraction simulations considered analysis (1000 runs value maybe lower 0.2, large values also make much sense). 5000 runs 0.1 good value. case used multiple variables performance calculation, can use obj_tbl_list$var_name select variable want plot parameter identifiability. Similar adjustment done dotty plots.","code":"# Usage example plot_parameter_identifiability(parameters = sim_flow$parameter$values,                                objectives =                                   select(obj_tbl, -starts_with(c('rank', 'run', 'rsr')))                                 ## This starts_with vector could be amended with                                ## other columns which should not be considered\"                                )"},{"path":"/articles/hc-plot.html","id":"hcp_step4","dir":"Articles","previous_headings":"","what":"4. Plotting parameter sensitivity","title":"Plot results","text":"perform OAT (One---Time) analysis used visualize sensitivity model parameters. function plot_oat allows plot results OAT analysis.","code":"# Example of usage: # If you want to perform an OAT analysis # Select the parameter combination around which you want to do the OAT analysis par_center_id <- 2  # Extract the center parameter set and assign again the \"full\" names to be used # with SWATrunR par_center <- sim_flow$parameter$values[par_center_id, ] %>%    set_names(sim_flow$parameter$definition$full_name)  # You can define your own parameter boundaries for the selected parameters # Here a way how you can quickly extract the boundaries from the last simulation par_bnd <- sim_flow$parameter$values %>%    map(., ~ c(min(.x), max(.x))) %>%    map(., ~ round(.x, 3)) %>%    bind_cols(.) %>%    set_names(sim_flow$parameter$definition$full_name)  # Sample the OAT parameter set and run the simulations par_oat <- sample_oat(par = par_bnd, par_center = par_center)  par_oat <- filter(par_oat, parameter %in% c('center', 'bf_max.aqu | change = absval'))  sim_oat <- run_swatplus(project_path = model_path,                         output = list(                           flo_day = define_output(file = 'channel_sd_day',                                                   variable = 'flo_out',                                                   unit = cha_ids)),                         parameter = par_oat[,3:ncol(par_oat)],                         n_thread = n_cores) # save_file = 'sim_oat')  # To visualize the OAT runs e.g. for the parameter surlag: plot_oat(sim = sim_oat, obs = obs, variable = 'flo_day_52')"},{"path":"/articles/hc-plot.html","id":"hcp_step5","dir":"Articles","previous_headings":"","what":"5. Plotting the calibration vs validation","title":"Plot results","text":"compare calibration validation results, can use plot_calval_comparison function. function allows compare calibration validation results selected variable set. also used compare results different calibration runs.","code":"# Example of usage: # Plot results on the time series figure for validation period plot_calval_comparison(obj_tbl_cal, obj_tbl_val,                         indexes = c(\"nse\", \"kge\", \"pbias\", \"r2\", \"mae\" ))"},{"path":[]},{"path":"/articles/hc-plus.html","id":"hc_plus_step1","dir":"Articles","previous_headings":"","what":"1. Extract calibrated parameters","title":"Extend calibration","text":"add additional parameters SWAT+ model calibration process, need extract parameter set want combine nutrient parameters. following code snippet shows extract hydrology parameter set want combine nutrient parameters.","code":"# Extract the hydrology parameter set that you want to combine the nutrient # parameters with  par_q <- sim_flow$parameter$values[run_sel_ids,] %>%   set_names(., sim_flow$parameter$definition$full_name)"},{"path":"/articles/hc-plus.html","id":"hc_plus_step2","dir":"Articles","previous_headings":"","what":"2. Define additional parameters","title":"Extend calibration","text":"Draw sample n_nutr combinations nutrient parameters calibrated combine selected hydrology parameter sets. examples define nutrient parameters boundaries. nitrogen, sediments, phosphorus parameters, can use one , combine , define .","code":"# Define the nitrogen parameters and their boundaries. par_nutr_bound <- tibble(\"n_updis.bsn | change = absval\" = c(0, 100),                          # may affect crop yields, please check!                          \"nperco.bsn | change = absval\" = c(0, 1),                          \"sdnco.bsn | change = absval\" = c(0.75, 1.1),                          # \"hlife_n.aqu | change = absval\" = c(0, 200),                          # \"no3_init.aqu | change = absval\" = c(0, 30),                          \"cmn.bsn | change = absval\" = c(0.001, 0.003),                          \"rsdco.bsn | change = absval\" = c(0.02, 0.1))  # Sediment parameters and their boundaries par_sed_bound <- tibble(\"cov.rte | change = absval\" = c(0,10),                         \"ch_clay.rte | change = absval\" = c(0,100),                         \"bedldcoef.rte | change = absval\" = c(0,1),                         \"slope_len.hru | change = absval\" = c(10,150),                         \"chs.rte | change = relchg\" = c(-0.5,0.5),                         # \"wd_rto.rte | change = relchg\" = c(-0.5,0.5),                         \"cherod.rte | change = absval\" = c(0,0.6))  # Phosphorus parameters and their boundaries par_phos_bound <- tibble(\"p_updis.bsn | change = absval\" = c(0, 100),                           # super sensitive but also affecting crop yields.                           # Print out yields as well!                          \"pperco.bsn | change = absval\" = c(10, 17.5),                          \"phoskd.bsn | change = absval\" = c(100, 200),                           \"psp.bsn | change = absval\" = c(0.01, 0.7))"},{"path":"/articles/hc-plus.html","id":"hc_plus_step3","dir":"Articles","previous_headings":"","what":"3. Combine hydrology and additional parameters","title":"Extend calibration","text":"combine parameters single comprehensive parameter set, need take account n_nutr setting defined step 2 hard calibration. hydrology parameter set repeated nutrient (additional) parameter set, need careful parameter parameter set combination results ensure number parameter sets manageable. following code snippet shows combine hydrology parameter set nutrient parameter set.","code":"# Combine parameters into one dataframa par_nutr_bound <- cbind(par_nutr_bound, par_sed_bound, par_phos_bound)  # Nutrient parameter set repeated the number of times of selected hydr. params. n_nutr <- ifelse(length(n_nutr) == 0, 1000/(n_comb*n_best), n_nutr)  par_nutr <- sample_lhs(par_nutr_bound, n_nutr) %>%   slice(rep(1:n(), each = nrow(par_q)))  # The new parameter set is a combination of all hydrology parameter sets and # the sampled nutrient parameter sets. par_cal <- par_q %>%   slice(., rep(1:n(), n_nutr)) %>%   bind_cols(., par_nutr)"},{"path":"/articles/hc-plus.html","id":"hc_plus_step4","dir":"Articles","previous_headings":"","what":"4. Run SWAT+ model with additional parameters","title":"Extend calibration","text":"combining hydrology nutrient parameter sets, can run SWAT+ model new parameter set. following code snippet shows run SWAT+ model new parameter set. running SWAT+ model new parameter set, can proceed calibration. calibration process step 5 hard calibration. difference need use water quality data instead flow data. Also visualization functions presented Plot results work way.","code":"# Read the observed water quality data to determine the period needed for the runs. obs_wq_full <- read_csv(wqobs_path)  unlink(paste0(model_path, \"/\", save_file_name, '_wq'), recursive = TRUE) # Remove  # the previous saved runs if they exist.  ## Run simulations for the nutrient parameters. # check if you need to redefine start_date, end_date and start_date_print sim_wq_full_bck <- run_swatplus(project_path = model_path,                        output = list(                          flo_day = define_output(file = 'channel_sd_day',                                                  variable = 'flo_out',                                                  unit = cha_ids),                          no3_day = define_output(file = 'channel_sd_day',                                                  variable = 'no3_out',                                                  unit = cha_ids)                          ## please add parameters for other nutrients, sediments,                           ## if you plan to use them.                                                    # ,orgn_day = define_output(file = 'channel_sd_day',                          #                         variable = 'orgn_out',                          #                         unit = cha_ids),                          # nh3_day = define_output(file = 'channel_sd_day',                          #                           variable = 'nh3_out',                          #                           unit = cha_ids),                          # no2_day = define_output(file = 'channel_sd_day',                          #                         variable = 'no2_out',                          #                         unit = cha_ids),                          # solp_day = define_output(file = 'channel_sd_day',                          #                         variable = 'solp_out',                          #                         unit = cha_ids),                          # sedp_day = define_output(file = 'channel_sd_day',                          #                          variable = 'sedp_out',                          #                          unit = cha_ids),                          # sed_out = define_output(file = 'channel_sd_day',                          #                          variable = 'sed_out',                          #                          unit = cha_ids)                        ),                        parameter = par_cal,                        start_date = start_date,                        end_date = end_date,                        start_date_print = as.Date(                          ifelse(length(start_date_print)==0,                                  min(obs_wq_full$date), start_date_print)),                        n_thread = n_cores,                        save_file = paste0(save_file_name, '_wq') )  # If you have to remove the runs that did not finish, use the following code. sim_wq_full <- remove_unsuccesful_runs(sim_wq_full_bck)  # If you need to get total nitrogen or total phosphorus, you need to have actived  # n parts saving in run_swatplus() function above. Following code will calculate # total nitrogen. You can adapt it to calculate total phosphorus as well # n_parts <- c(\"no3_day\", \"orgn_day\", \"nh3_day\", \"no2_day\") #  # sim_wq_full$simulation$ntot_day <-  #   bind_cols(sim_wq_full$simulation[[1]][\"date\"],  #             Reduce(\"+\", map(n_parts, ~sim_wq_full$simulation[[.x]][-1])))"},{"path":"/articles/hc.html","id":"hc_step1","dir":"Articles","previous_headings":"","what":"1. Loading required packages","title":"Run calibration","text":"first step hard calibration workflow load necessary R packages. packages provide functions tools data manipulation, visualization, model calibration. following code chunk loads required packages hard calibration workflow.","code":"library(SWATtunR) library(SWATrunR) library(tibble) library(dplyr) library(readr) library(purrr)"},{"path":"/articles/hc.html","id":"hc_step2","dir":"Articles","previous_headings":"","what":"2. Defining settings","title":"Run calibration","text":"next step define settings hard calibration workflow. includes specifying SWAT+ model path, input files, calibration parameters, observed data, relevant information. following code chunk sets necessary settings hard calibration workflow.","code":"# Path to the SWAT+ model model_path <- '../test/my_dearest_model'  # Path to the crop data file qobs_path <- '../inst/extdata/q_cha.csv'  # Define the path to the observed WQ data wqobs_path <- '../inst/extdata/no3.csv'  # You can define the path to the other observed data, like groundwater depth data, etc. gwobs_path <- '../inst/extdata/gw.csv'  # Set the path to save results of the soft calibration sc_res <- '../test/simulations'  # Set the number of cores available for calculations.   # Number of cores for 12 runs use 3, 4, 6, or 12 cores (if available) cores <- 3  # Channel IDs where gauges are located at the channel outlets. cha_ids <- c(67)  # Define the simulation save file names to be used in SWATrunR save_file_name <- \"sim1\"  # Number parameter combinations to run n_comb <- 100  # Fraction of the best parameter combinations to be used for the final  # WQ calibration n_best <- NULL # example n_best <- .02 # 2% of the best parameter combinations,  # if NULL, n_best = 20/n_comb  # Number of combination drawn for the nutrient parameters (this number  # is multiplied by the number of selected parameter combinations for the flow. # For example n_comb = 1000, n_best .1, means 100 best runs selected, multiplied # with n_nutr = 100 results in 10,000 model runs for the nutrient calibration. # If null, 1000/(n_comb*n_best) formula applied resulting in 1000 runs) n_nutr <- NULL  # Number of cores to be used for the parallelization of the model runs n_cores <- NULL ## If NULL, all available physical cores - 2 will be used  # Define time period to be used in model runs. Please note this period should # match your management data period, if it was prepared with SWATfarmR. You can # safely modify 'start_date_print' and 'end_date' to define the period for which # you want to print the model output. However, please take great care, if you  # modify 'start_date' as you might need to update your management files too.   # Start date for model runs (if NULL, the start date of the model setup files  # will be used!!!) start_date <- NULL # start_date <- '2000-01-01' # End date for model runs (if NULL, the end date of observation data will be used). end_date <- NULL # end_date <- '2010-12-31' # Start printing model output (if NULL, the start date of observation data will used). start_date_print <- NULL # start_date_print <-'2003-01-01'  # Define calibration and validation periods. Please note that the validation  # should take around 1/3 and calibration 2/3 of the total period. Also the  # workflow will run all simulations for the whole period (defined above),  # these periods are only used for the performance calculation and plotting.  # Q calibration period q_cal_period <- c('2007-01-01', '2010-01-01') # Calibration end date q_val_period <- c('2011-01-01', '2022-12-31')  # WQ calibration period wq_cal_period <- c('2012-01-01', '2017-12-31') # Calibration end date wq_val_period <- c('2018-12-31', '2022-12-31')"},{"path":"/articles/hc.html","id":"hc_step3","dir":"Articles","previous_headings":"","what":"3. Preparing parameters sets for the flow (and water quality) calibration","title":"Run calibration","text":"suggested list ranges SWAT+ parameters hydrology calibration divided groups based primary processes affect. groups considered optional. parameters help fine-tune model achieve accurate hydrological simulations, ensuring various aspects hydrological cycle properly represented. important note calibration validation hydrology water quality/load related parameters done one step. , need define nutrient parameters together hydrology. Please refer step 3 Extend calibration page example define sediment, nitrogen, phosphorus parameters. example presents hydrology parameters.","code":"par_bound <- tibble(   # Snow (optional - use if average snow fall to precipitation ratio is higher    # than 5%)   'snomelt_tmp.hru | change = absval' = c(-1.5, 1.5),   'snofall_tmp.hru | change = absval' = c(-1.5, 1.5),   # ET (note: it is suggested that a narrow range for esco selected in soft    # calibration of water balance is used instead of the wide (0,1) range)   'esco.hru | change = absval' = c(0.01, 0.95),   'epco.hru | change = absval' = c(0.05, 1),   'awc.sol | change = relchg' = c(-0.25, 0.25),   'canmx.hru | change = relchg' = c(-0.5, 0.5),   #surface runoff   'cn2.hru | change = relchg' = c(-0.15, 0.15),   'cn3_swf.hru | change = absval' = c(0, 1),   'ovn.hru | change  = relchg ' = c(-0.25, 0.25),   'surlag.bsn | change = absval' = c(0.05, 4),   # lateral flow (optional - use if lateral flow constitutes at least 5% of total    # water yield)   #'lat_time.hru | change = relchg' = c(-0,15, 0.15),   'lat_len.hru | change = abschg' = c(-30, 30),   'latq_co.hru | change = absval' = c(0, 1),   'bd.sol | change = relchg' = c(-0.25, 0.25),   'k.sol | change = relchg' = c(-0.5, 2),   # tile flow (optional - use if tile flow constitutes at least 5% of total water   # yield; note: tile_lag and tile_dtime should be active only if tile_drain is    # set to 0 in codes.bsn file))   #'tile_dep.hru | change = relchg' = c(-0.1, 0.2),   #'tile_lag.hru | change = absval' = c(48, 100),   #'tile_dtime.hru | change = absval' = c(48, 100),   #percolation/aquifer   'perco.hru | change = absval' = c(0, 1),   'flo_min.aqu | change = abschg' = c(-2, 2),   'revap_co.aqu | change = absval' = c(0.02, 0.2),   'revap_min.aqu | change = abschg' = c(-2, 2),   'alpha.aqu | change = absval' = c(0.001, 0.5),   # 'sp_yld.aqu | change = absval' = c(0.001, 0.05),   'bf_max.aqu | change = absval' = c(0.5, 2),   #channel routing   'chn.rte | change = absval' = c(0.02, 0.1) )  # Draw a first parameter set of parameter combinations  par_flow <- sample_lhs(par_bound, n_comb)"},{"path":"/articles/hc.html","id":"hc_step3a","dir":"Articles","previous_headings":"","what":"3a. (Optional) Calibration of parameters for HRU groups","title":"Run calibration","text":"parameters might important differentiate calibration values based characteristic areas. instance parameters cn3_swf (soil water adjustment factor CN3) latq_co (lateral flow coefficient) initialized based runoff potential Hydrologic Response Unit (HRU), parameter perco (percolation coefficient) initialized based leaching potential. perco, cn3_swf, latq_co normalized range 0-1, sampled single value, better approach considering different initial values. Therefore, parameter sampling conducted follows: 'hydrology.hyd', HRU IDs low, moderate, high leaching runoff potentials drawn. IDs compiled text strings required parameter definition via parameter names. Parameter boundaries different low, moderate, high potentials defined. normalized parameter ranges translated defined boundaries. reduced set testing purposes include parameters used model setups.","code":"# Read the hydrology.hyd file to identify the HRU IDs with the different  # runoff and leaching potentials. hyd <- read_tbl(paste0(model_path, '/hydrology.hyd'))  # Generate the ID text strings to be included in the parameter names so that  # parameter values for HRUs can be addressed separately. id_lch_pot <- id_text_strings('perco', c(low = 0.01, mod = 0.50, high = 0.95), hyd) id_run_pot <- id_text_strings('cn3_swf', c(low = 0.95, mod = 0.30, high = 0.00), hyd)  # Define parameter boundaries in which the parameter values should vary for  # the different leaching and runoff potentials. perco_bound <- list(low = c(0.05, 0.30), mod = c(0.30, 0.60), high = c(0.5, 0.90)) cn3_bound   <- list(low = c(0.50, 0.95), mod = c(0.15, 0.45), high = c(0.0, 0.30)) latq_bound  <- list(low = c(0.01, 0.30), mod = c(0.10, 0.40), high = c(0.5, 0.90))  # Translate the normalized parameter ranges into the defined boundary ranges. for(i in c('low', 'mod', 'high')) {   if(nchar(id_lch_pot[i]) > 0) {     par_flow[[paste0('perco_',                       i, '::perco.hru | change = absval | unit = c(',                       id_lch_pot[i], ')')]] <-         par_flow[['perco.hru | change = absval']] * (perco_bound[[i]][2] - perco_bound[[i]][1]) + perco_bound[[i]][1]   }   if(nchar(id_run_pot[i]) > 0) {     par_flow[[paste0('cn3_', i, '::cn3_swf.hru | change = absval | unit = c(',                       id_run_pot[i], ')')]] <-        par_flow[['cn3_swf.hru | change = absval']] * (cn3_bound[[i]][2] - cn3_bound[[i]][1]) + cn3_bound[[i]][1]     par_flow[[paste0('latq_', i, '::latq_co.hru | change = absval | unit = c(',                       id_run_pot[i], ')')]] <- par_flow[['latq_co.hru | change = absval']] *        (latq_bound[[i]][2] - latq_bound[[i]][1]) + latq_bound[[i]][1]   } }  # Remove the initial normalized parameters. par_flow <- par_flow %>%    select(-starts_with(c('perco.hru', 'cn3_swf.hru', 'latq_co.hru'))) # Or this method in case you get an error (e.g., due to hru number >10k) # par_flow <- par_flow[, !grepl(\"^perco.hru|^cn3_swf.hru|^latq_co.hru\", names(par_flow))]"},{"path":"/articles/hc.html","id":"hc_step4","dir":"Articles","previous_headings":"","what":"4. Running simulations","title":"Run calibration","text":"Prepared parameter sets used run simulations. SWAT+ model executed defined period, daily hydrographs (example) stored channel IDs. simulation run parallel, number cores used can defined. simulation results stored defined output folder. Observed discharge data read obtain period needed runs.","code":"# Read the observed discharge data to obtain period needed for the runs. obs_full <- read_csv(qobs_path)   unlink(paste0(model_path, \"/\", save_file_name, '_q'), recursive = TRUE) # Remove  # the previous saved runs if they exist.  # Simulate daily discharge for the channel IDs. sim_flow_full_bck <- run_swatplus(project_path = model_path,                          output = list(                            flo_day = define_output(file = 'channel_sd_day',                                                    variable = 'flo_out',                                                    unit = cha_ids)                          ),                          parameter = par_flow,                          start_date = start_date,                          end_date = end_date,                          start_date_print = lubridate::as_date(                            ifelse(length(start_date_print)==0, min(obs_full$date),                                    start_date_print)),                          # Get the number of cores to be used for parallel processing.                          n_thread = ifelse(length(cores) == 0,                                             parallel::detectCores(logical = FALSE) - 2, cores),                          save_file = paste0(save_file_name, '_q') )   # If you have to remove the runs that did not finish, use the following code. sim_flow_full <- remove_unsuccesful_runs(sim_flow_full_bck)  # If you have to load the runs from the saved runs in the data bases, use the # following code. # sim_flow <- SWATrunR::load_swat_run(paste0(model_path, '/',  paste0(save_file_name, '_q')))"},{"path":"/articles/hc.html","id":"hc_step5","dir":"Articles","previous_headings":"","what":"5. (Optional) Getting concentrations","title":"Run calibration","text":"need calculate use concentrations together flow values next steps, use get_conc function. two optional arguments: not_conc sediment. not_conc argument regular expression defines variables converted concentrations. default, set “^flo_day|^gwd”. sediment argument regular expression defines variables identified sediment variables. default argument “^sed”.","code":"# Get the concentrations for the daily discharge. sim_flow_full <- get_conc(sim_flow_full)"},{"path":"/articles/hc.html","id":"hc_step6","dir":"Articles","previous_headings":"","what":"6. Readjusting observation and simulation periods","title":"Run calibration","text":"align dates simulated observed data calibration period (validation), fix_dates function used. function adjusts dates ensure simulated data matches observed data can also trim dataset specified time range.","code":"# Align the dates of the simulated and observed data for the discharge calibration period. tmp <- fix_dates(sim_flow_full, obs_full, trim_start = q_cal_period[1],                   trim_end = q_cal_period[2]) sim_flow <- tmp$sim obs <- tmp$obs ## Example of usage for trimming the data to a specific period. # tmp <- fix_dates(runr_obj = sim_flow, obs_obj = obs,  # trim_start = \"2010-01-01\", trim_end = \"2015-01-01\")  # In case you want to use water quality data, read it here before applying the following code. # obs2 <- read_csv(wqobs_path)  # tmp <- fix_dates(sim_flow_full, obs2, trim_start = wq_cal_period[1], trim_end = wq_cal_period[2]) # obs2 <- tmp$obs"},{"path":"/articles/hc.html","id":"hc_step7","dir":"Articles","previous_headings":"","what":"7. Calculating performance metrics","title":"Run calibration","text":"calculate performance metrics simulated discharge, sim object containing simulated discharge data obs object observed discharge data required. parameter par_name specifies variable performance metrics calculated; provided, defaults first variable simulation list. cases multiple variables, specifying par_name necessary. perf_metrics parameter allows selection performance metrics calculation, influence final ranking used selection parameter sets step 7. perf_metrics provided, available metrics used. period parameter defines time interval calculating performance metrics, “week”, “month,” “year”. fn_summarize parameter specifies function summarize data defined period, “mean”, “median”, “max”, “min” “sum”.","code":"# Calculate the performance metrics for the daily discharge.  obj_tbl <- calculate_performance(sim_flow, obs)  # Example of usage:  # obj_tbl <- calculate_performance(sim = sim_flow, obs, \"flo_day\", c(\"kge\", \"nse\"),  # \"month\", \"sum\")"},{"path":"/articles/hc.html","id":"hc_step7a","dir":"Articles","previous_headings":"","what":"7a. Calculating performance metrics for multiple variables","title":"Run calibration","text":"performance metrics can also applied multiple variables within simulation list. scenario, performance metrics calculated separately variable, subsequently, mean performance ranks determined. Additionally, weights can assigned variable process, allowing nuanced evaluation takes account relative importance variable.","code":"# Example of usage: var_to_use <- c(\"flo_day_52\",  \"no3_day_52_conc\", \"gwd\") var_weights <- c(0.5, 0.3, 0.2) ## The sum of weights should be 1. periods <- list(q_cal_period, wq_cal_period, c('2007-01-01', '2011-12-26'))  # Read the another observed data # In case you want to use water quality data, read it here before applying the  # following code. obs2 <- read_csv(wqobs_path)  obs3 <- read_csv(gwobs_path)   # Calculate the performance metrics for each variable separately. obj_tbl_m <- calculate_performance_2plus(sim_flow_full, var_to_use,                                           list(obs, obs2, obs3), periods,                                           var_weights)"},{"path":"/articles/hc.html","id":"hc_step8","dir":"Articles","previous_headings":"","what":"8. Selecting the best parameter sets","title":"Run calibration","text":"select best-performing parameter sets continuing next iteration calibration going water quality (WQ) calibration proceeding validation, can follow two methods. first method based rank performance metrics. Filter parameter sets include best-performing ones. number best sets (n_best) parameters step 2 determines . n_best = NULL , 20 best sets selected, otherwise numebr calculated based specified ratio. selected run IDs obtained arranging parameter sets total rank selecting top fraction. second method based thresholds performance metrics, defined user based plots. example, can select parameter sets Nash-Sutcliffe efficiency (NSE) greater 0.5, Kling-Gupta efficiency (KGE) greater 0.5, absolute percent bias (PBIAS) less 15. selecting run IDs based criteria, can examine selected parameter sets printing run IDs extracting corresponding rows obj_tbl data frame. can examine selected parameter sets running following code. proceed Plot results page guidance visualization results. Also can proceed Extend calibration page guidance add additional parameters build another iteration SWAT+ model calibration process.","code":"n_best <- ifelse(length(n_best) == 0, 20/n_comb, n_best)  run_sel_ids <- obj_tbl %>%    arrange(rank_tot)%>%   top_frac(-n_best, wt = rank_tot) %>%    pull(run_id) %>%    as.numeric run_sel_ids <- as.numeric(str_remove(names(which(obj_tbl$nse > 0.5 &                                obj_tbl$kge > 0.5 &                                abs(obj_tbl$pbias) < 15)), 'run_')) print(paste0(\"Selected run ids are: \", paste(run_sel_ids, collapse = \", \"))) obj_tbl_cal<- obj_tbl[run_sel_ids,]"},{"path":"/articles/qa-st1.html","id":"qa1_step1","dir":"Articles","previous_headings":"","what":"1. Analysis of simulated annual climate variables","title":"Step 1: Input","text":"plot gives overview annual simulated basin average weather inputs. simulated values plausible ranges must comparable literature values, continuing model verification steps. plot panels relative humidity wind speed show 0 values SWAT+ model revision lower 60.5.5 used simulation. verification simulated relative humidity wind speed done plot . Please consider points following checklist verify simulated weather data:","code":""},{"path":"/articles/qa-st1.html","id":"pet-and-et","dir":"Articles","previous_headings":"1. Analysis of simulated annual climate variables","what":"PET and ET","title":"Step 1: Input","text":"average annual PET plausible compared regional PET? variability PET plausible? >> simulation PET influenced weather inputs temperature, relative humidity, wind speed, solar radiation. Simulated values significantly differ region specific literature values can indicate issues weather inputs (see also plot panels). >> Adjustments PET can achieved small (!) changes parameter pet_pmpt (may considered water balance soft calibration). average annual ET plausible compared regional ET (available)? proportions eplant, esoil, ecanopy reasonable. vegetated areas eplant dominant part et. >> Low overall et can indicate issues simulation plant growth. >> Low eplant compared esoil can indicate issues simulation plant growth.","code":""},{"path":"/articles/qa-st1.html","id":"precipitation-and-snow-fall","dir":"Articles","previous_headings":"1. Analysis of simulated annual climate variables","what":"Precipitation and snow fall","title":"Step 1: Input","text":"annual precipitation sums plausible range? fraction snowfall compared precipitation sum plausible? >> Large differences simulated observed precipitation can indicate issues precipitation input data. >> snowfall strongly differs expected values can indicate issues temperature input data, model parameters snofall_tmp (snowfall temperature).","code":""},{"path":"/articles/qa-st1.html","id":"temperature","dir":"Articles","previous_headings":"1. Analysis of simulated annual climate variables","what":"Temperature","title":"Step 1: Input","text":"daily minimum maximum temperatures plausible ranges? annual mean temperature values average annual mean temperature comparable region specific temperature statistics?","code":""},{"path":"/articles/qa-st1.html","id":"relative-humidity","dir":"Articles","previous_headings":"1. Analysis of simulated annual climate variables","what":"Relative humidity","title":"Step 1: Input","text":"relative humidity records range 0 1? available average values compare region specific statistics?","code":""},{"path":"/articles/qa-st1.html","id":"wind-speed","dir":"Articles","previous_headings":"1. Analysis of simulated annual climate variables","what":"Wind speed","title":"Step 1: Input","text":"annual mean/min/max wind speeds plausible range?","code":""},{"path":"/articles/qa-st1.html","id":"solar-radiation","dir":"Articles","previous_headings":"1. Analysis of simulated annual climate variables","what":"Solar radiation","title":"Step 1: Input","text":"annual solar radiation sums comparable region specific statistics?","code":"plot_climate_annual(sim_nostress)"},{"path":"/articles/qa-st1.html","id":"qa1_step2","dir":"Articles","previous_headings":"","what":"2. Seasonal dynamics of the precipitation and snow processes","title":"Step 1: Input","text":"optional check catchments snowfall snowmelt play role. upper plot panel shows monthly average sums precipitation separated rainfall snowfall. plot help verify start end month seem plausible snowfall occur fractions snowfall compared total precipitation seem plausible. second plot panel shows runoff generated snowmelt. plot help verify snomelt dominated runoff spring. weather inputs verified section major issues present weather inputs, visible issues verification step can indicate problematic parametrizations SWAT+ snow parameters snofall_tmp (snowfall temperature) snomelt_tmp (snowmelt temperature).","code":"plot_monthly_snow(sim_nostress)"},{"path":"/articles/qa-st1.html","id":"qa1_step3","dir":"Articles","previous_headings":"","what":"3. Overall simulated water balance","title":"Step 1: Input","text":"plot gives overview overall simulated water balance. water balance addressed soft calibration. can worth quick look basin water balance components verify shares overall water cycle plausible water yield ratio (wyld / precip) base flow ratio (base / wyld) already compare characteristics observed runoff. water balance components also part weather inputs analysis. plots puts components water cycle perspective. may look following aspects water balance: wyld already plausible range excessive 0? components wyld (surface, lateral, aquifer flow) active one components 0? soil water storage plausible range (e.g. values much larger 0 mm (e.g. ~ 100 mm) lower 600 mm)? water percolate aquifer. Otherwise groundwater flow occur? irrigation implemented, value irr > 0? Two versions plot_waterbalance function available. simplified version might good get overview, detailed version important quality assurance. two plots.","code":"plot_waterbalance(sim_nostress, simplified = TRUE) plot_waterbalance(sim_nostress)"},{"path":"/articles/qa-st1.html","id":"qa1_step4","dir":"Articles","previous_headings":"","what":"4. Analysis of simulated water balance at the HRU level","title":"Step 1: Input","text":"check_hru_waterbalance performs checks simulated water balance components identify potential issues. rules used check functions adopted SWATCheck (SWATCheck however performs analyses basin land use level). returned table shows HRUs least one checks identified potential issue. checks help identify HRUs land uses investigated (e.g. daily time series plots variables using functions plot_hru_pw_day plot_hru_var). example checks run ET (et), soil water (sw), curve number (cn). land uses may always flag issues checks. example ignored checks. ignore_lum = c('^u', '^wet') means landuses begin letter ‘u’ (case urban land uses) wetland land uses (begin ‘wet’) ignored. continue analysis, please proceed step 2.","code":"hru_wb_check <- check_hru_waterbalance(sim_nostress,                                         check = c('et', 'sw', 'cn'),                                        ignore_lum = c('^u', '^wet')) rmarkdown::paged_table(hru_wb_check)"},{"path":"/articles/qa-st2.html","id":"qa2_step1","dir":"Articles","previous_headings":"","what":"1. Issues with scheduled and triggered management operations","title":"Step 2: Management","text":"report_mgt gives overview operations differ scheduled operations ones actually triggered simulation run. differences identified must investigated. Identified differences must necessarily error, can also result e.g. operations triggered decision tables. manual, visual investigation rule cases. example one issue identified.","code":"mgt_report <- report_mgt(sim_nostress) if(!is.null(mgt_report)) {   rmarkdown::paged_table(mgt_report) }"},{"path":"/articles/qa-st2.html","id":"qa2_step2","dir":"Articles","previous_headings":"","what":"2. Analize differences in management for an HRU","title":"Step 2: Management","text":"management report flagged management HRU different, following code can help look operations found different scheduled triggered management. analyze full triggered management table HRU printed SWAT+ simulation run following lines code. can also open ‘management.sch’ file see scheduled management operations HRU. case error 'wira' plant planted, 'wbar' harvested. clear error management schedule.  continue analysis, please proceed step 3.","code":"##Select a case to examine sel_nb <- 1 sel_mgt <- mgt_report[[sel_nb,\"schedule\"]] print(paste(\"Table of issues for selected management\", sel_mgt)) ## [1] \"Table of issues for selected management field_129_10_mgt\" mgt_report$schedule_report[[sel_nb]] ##   year mon day op_typ op_data1_trig op_data1 op_data2 op_data3 ## 1    2   7   1   harv          <NA>     wbar    grain        0 id <- get_hru_id_by_attribute(sim_nostress, mgt = sel_mgt)$id[1] print(paste(\"HRU\", id, \"trigerred management table\")) print_triggered_mgt(sim_verify = sim_nostress, hru_id = id) ## [1] \"HRU 16 trigerred management table\""},{"path":"/articles/qa-st3.html","id":"qa3_step1","dir":"Articles","previous_headings":"","what":"1. Plant stress","title":"Step 3: Growth","text":"Plant growth without simulated plant stress result potential biomass yield plant can gain given climatic soil conditions simulated catchment. step focus verification duration scheduled growing period selected crop parametrizations meet climatic conditions. crop specific analyses step can performed function plot_variable_at_harvkill. First check plant stresses really deactivated simulations (figure show 0 values):","code":"plot_variable_at_harvkill(sim_nostress, variable = 'stress')"},{"path":"/articles/qa-st3.html","id":"qa3_step2","dir":"Articles","previous_headings":"","what":"2. Potential heat unit fractions","title":"Step 3: Growth","text":"relevant indicator duration growing period potential heat unit fraction. value 1 means plant reached full maturity. grains additionally dry field. Thus value ~1.2 reached. following plot help see crops scheduled managements reach maturity. Crops show many values smaller 1 must analyzed. also values much larger 1 must treated implausible require perform analyses.","code":"plot_variable_at_harvkill(sim_nostress, variable = 'phu')"},{"path":"/articles/qa-st3.html","id":"qa3_step3","dir":"Articles","previous_headings":"","what":"3. Unconstrained yields","title":"Step 3: Growth","text":"potential heat unit fractions plausible range unconstrained yields can analyzed. plotted values likely larger region specific literature values, much lower literature values. Otherwise indicates potential issue development respective crop:","code":"plot_variable_at_harvkill(sim_nostress, variable = 'yield')"},{"path":"/articles/qa-st3.html","id":"qa3_step4","dir":"Articles","previous_headings":"","what":"4. Further analysis of identified issues","title":"Step 3: Growth","text":"example unusually high heat unit values, low (almost zero) yields identified must investigated. can done first filtering HRUs show issue perform detailed plots may support identification issue. can filter HRUs interest function filter_hru_at_harvkill. function used one multiple crop, phu, plant_bioms, yield, water_stress, aero_stress, temp_stress, n_stress p_stress variables. example filters HRUs large PHU values harvest kill. want look crop development time can example function plot_hru_pw_day. example high PHU values found sugar beets, ofor HRU #2679, #4602 #6313. function plots LAI bio mass development crops HRU several years.  continue analysis, please proceed step 4.","code":"high_phu <- filter_hru_at_harvkill(sim_nostress, phu > 1.86) high_phu ##    hru       date crop      phu plant_bioms    yield water_stress aero_stress ## 1 2679 2018-10-15 sgbt 1.863293    25277.69 16809.66            0           0 ## 2 6313 2018-10-15 sgbt 1.867149    25467.05 16935.59            0           0 ## 3 4602 2018-10-15 sgbt 1.862455    25388.35 16883.26            0           0 ##   temp_stress n_stress p_stress ## 1           0        0        0 ## 2           0        0        0 ## 3           0        0        0 plot_hru_pw_day(sim_nostress,                  hru_id = c(2679, 4602, 6313),                  var = c('lai', 'bioms'),                  years = 2012:2020,                  add_crop = TRUE)"},{"path":"/articles/qa-st4.html","id":"qa4_step1","dir":"Articles","previous_headings":"","what":"1. Running the SWAT+ model (with plant stress factors active)","title":"Step 4: Stress","text":"individual stress factors can analyzed, run simulations extract required simulation outputs. simulations performed saved external stress factors active (excluding nutrient stress factors). also run save simulations stress factors activated, comparison yield declines due simulated stress factors.","code":"sim_extstress <- run_swat_verification(project_path = model_path,                                         outputs = c('wb', 'mgt', 'plt'),                                         years_skip = 3,                                         nostress = 2)  file_version <- get_file_version(parent_dir, save_name, '_extstr_') + 1 saveRDS(sim_extstress, file = paste0(parent_dir,'/',                                       save_name, '_extstr_',                                       file_version,'.rds')) file_version <- get_file_version(parent_dir, save_name, '_extstr_') sim_extstress <- readRDS(file = paste0(parent_dir,'/',                                         save_name, '_extstr_',                                         file_version,'.rds')) sim_allstress <- run_swat_verification(project_path = model_path,                                        outputs = c('wb', 'mgt', 'plt'),                                        years_skip = 3,                                        nostress = 0)  file_version <- get_file_version(parent_dir, save_name, '_allstr_') + 1 saveRDS(sim_allstress, file = paste0(parent_dir,'/',                                       save_name, '_allstr_',                                       file_version,'.rds')) file_version <- get_file_version(parent_dir, save_name, '_allstr_') sim_allstress <- readRDS(file = paste0(parent_dir,'/',                                         save_name, '_allstr_',                                         file_version,'.rds'))"},{"path":"/articles/qa-st4.html","id":"qa4_step2","dir":"Articles","previous_headings":"","what":"2. Compare yields with different stress factors activated","title":"Step 4: Stress","text":"compare simulated yields without simulated stress factors cases external stress factors active stress factors active. can expect decline yields due active stress. decline however large. Particularly large number outliers lower end yields close 0 raise attention investigated. differences simulations external stresses stresses active can good indicator whether external factors nutrient inputs dominant factors. Please consider following check list: find strong decline no_stres ext_stress used crops investigated parametrizations compatible climatic inputs. aeration stress high (analyzed ), soil properties may investigated. water stress high (also analyzed ), may indicate rainfall sufficient must investigated irrigation actually applied considered management schedules. Increased temperature stress can indicate temperature inputs crop temperature parameters compatible. case crop parametrization may need attention. decline ext_stress all_stress large limited nutrient supply may dominant factor. can indicate insufficient fertilizer application management schedules.","code":"sim_list <- list(no_stress  = sim_nostress,                   ext_stress = sim_extstress,                   all_stress = sim_allstress) plot_variable_at_harvkill(sim_list, variable = 'yield')"},{"path":"/articles/qa-st4.html","id":"qa4_step3","dir":"Articles","previous_headings":"","what":"3. Analyze the plant stress factors","title":"Step 4: Stress","text":"expected plant stress factors 0 sim_nostress simulation runs, now look simulated stresses stress factors active. plotted results checked short check list .  continue analysis, please proceed step 5.","code":"plot_variable_at_harvkill(sim_allstress, variable = 'stress')"},{"path":"/articles/qa-st5.html","id":"qa5_step1","dir":"Articles","previous_headings":"","what":"1. Point sources","title":"Step 5: Other","text":"analyze implemented point source inputs run following analysis.","code":"plot_ps(sim_allstress, conc = TRUE)"},{"path":"/articles/qa-st5.html","id":"qa5_step2","dir":"Articles","previous_headings":"","what":"2. Tile drainage","title":"Step 5: Other","text":"analyze tile drainage implemented model setup run following analysis.","code":"plot_qtile(sim_allstress)"},{"path":"/articles/qa.html","id":"qa_step1","dir":"Articles","previous_headings":"","what":"1. Loading required packages","title":"Preparation","text":"SWATdoctR package basis workflow. installed loaded, done. installation R package platform GitHub GitLab can done package remotes Load SWATdoctR following line. package needed workflow.","code":"# If the package 'remotes' is not installed  install.packages('remotes') # If the package 'SWATdoctR' is not installed  remotes::install_git('https://git.ufz.de/schuerz/swatdoctr') library(SWATdoctR)"},{"path":"/articles/qa.html","id":"qa_step2","dir":"Articles","previous_headings":"","what":"2. Define the model path","title":"Preparation","text":"model setup verification path defined. setup calibration validation, make sure contains ‘calibration.cal’ file. can prepared step","code":"# Path to the SWAT+ project model_path <- 'Define:/your/model/txtinout/path'  # Path to folder where project is located (for later file writing) parent_dir <- dirname(model_path) # Name of the SWAT+ project folder (for later file reading/writing) save_name  <- basename(gsub('/$', '', model_path))"},{"path":"/articles/qa.html","id":"qa_step3","dir":"Articles","previous_headings":"","what":"3. (Optional) Harvest and kill operation seperation","title":"Preparation","text":"Plotting variables harvest kill crop requires management operations ‘harvest’ ‘kill’ set separately management schedules combined ‘harvest_kill’ operation. case model setup combined operation following function fixes issue.","code":"add_kill_op(model_path)"},{"path":"/articles/qa.html","id":"qa_step4","dir":"Articles","previous_headings":"","what":"4. Running the SWAT+ model (all plant stress factors deactivated)","title":"Preparation","text":"run_swat_verification SWAT+ simulations performed model setup model_path, used verification steps. simulations analysis steps 1. 3. preformed without plant stress activated. simulation results saved folder SWAT+ project located. verification iterative step, simulation repeated identified issues model setup fixed verification steps repeated. Every time simulation repeated saved new file name (previous steps documented), name follows syntax ‘<project_name>_nostr_<version>.rds’. also important note outputs run_swat_verification function, depending setup, multiple gigabytes size, might cause R break restart. Therefore, archiving results crucial. Automatically new version always increased 1 respect largest version number found folder. can delete previous versions manually folder. Following lines used load saved results file. following analyses step 1, step 2 step 3 use file version file_version sim_nostress.","code":"## Running SWAT+ model setup and saving outputs required for the workflow sim_nostress <- run_swat_verification(project_path = model_path,                                       outputs = c('wb', 'mgt', 'plt'),                                       years_skip = 3,                                       nostress = 1)  ## Saving results into the file file_version <- get_file_version(parent_dir, save_name, '_nostr_') + 1 saveRDS(sim_nostress, file = paste0(parent_dir,'/', save_name, '_nostr_',                                      file_version,'.rds')) file_version <- get_file_version(parent_dir, save_name, '_nostr_') sim_nostress <- readRDS(file = paste0(parent_dir,'/',                                        save_name, '_nostr_',                                        file_version,'.rds'))"},{"path":"/articles/sc-crops.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Crop Yields","text":"SWATtunR package provides structured approach soft calibration crop parameters, aiming align SWAT+ simulations observed crop yields. process detailed template script, initially developed EU project OPTAIN documented deliverables, application across various European case studies explored. calibration two-stage routine designed tailored individual SWAT projects. First, adjusts days maturity crop match characteristics management schedules. Subsequently, additional crop parameters can fine-tuned necessary achieve accurate yield simulations, ensuring robust reproducible calibration process.","code":""},{"path":"/articles/sc-crops.html","id":"workflow","dir":"Articles","previous_headings":"","what":"Workflow","title":"Crop Yields","text":"created soft calibration directory initialize_softcal() function, workflow/01_crops_calibration.R script file included. script serves starting point, providing customizable template guide users crop soft calibration process effectively. Following steps outlined page comes script, users can adapt calibration routine specific SWAT+ model setup observed data. script designed flexible, allowing modifications based unique characteristics crops modeled management practices place.","code":""},{"path":"/articles/sc-crops.html","id":"scc_step1","dir":"Articles","previous_headings":"","what":"1. Load packages, settings and yield data","title":"Crop Yields","text":"SWATtunR package essential soft calibration, provides necessary functions calibration process. Additional packages required data manipulation, visualization, SWAT+ model runs, etc. Example provided using SWAT+ model setup provided SWATdata package, workflow can applied SWAT+ project. case crop yield information quite simple.","code":"## Required libraries to run workflow library(SWATtunR) library(SWATrunR) library(tidyverse) library(tibble) library(purrr)  # Parameter definition ---------------------------------------------------- # Path to the SWAT+ project folder. model_path <- 'test/swatplus_rev60_demo'  # Set the number of cores for parallel model execution n_cores <- Inf # Inf uses all cores. Set lower value if preferred.  # Set the number parameter combinations for the LHS sampling of crop parameters n_combinations <- 10  # Path to the observed crop yields. # This file must be updated with case study specific records! yield_obs_path <- './observation/crop3.csv'  # Load and prepare data --------------------------------------------------- # Load the yield observations yield_obs  <- read.csv(yield_obs_path)  # Define the crops which should be used in the calibration. # Default is all crops which are defined in yield_obs. # Please define manually if only selected crops should be considered. crop_names <- yield_obs$plant_name  # Optional reset of plants.plt -------------------------------------------- # In the case the crop calibration workflow should be redone after the last step # of this script was already executed and the plants.plt was overwritten the # plants.plt should be reset to its initial condition. To perform the reset set # reset <- TRUE reset <- FALSE if(reset) {   file.copy('./backup/plants.plt',             paste0(model_path, '/plants.plt'),             overwrite = TRUE) } else if (!file.exists('./backup/plants.plt')){   file.copy(paste0(model_path, '/plants.plt'),             './backup/plants.plt',             overwrite = FALSE) }"},{"path":"/articles/sc-crops.html","id":"scc_step2","dir":"Articles","previous_headings":"","what":"2. Generate days_mat parameter set","title":"Crop Yields","text":"days maturity (days_mat) determine quickly slowly crop develops SWAT+ model, converted heat units required crop fully mature. ensure crop behaves intended, days_mat value must align defined management operations schedule. identify suitable days_mat values selected crops, parameter set created days_mat value sample_day_mat() function crop varied within range (change_min, change_max) using fixed intervals (change_step). par_dmat data frame containing days_mat values crop, used calibration process. plants.plt file used get initial values function sample_days_mat() generates range values based defined parameters.","code":"par_dmat <- sample_days_mat(crop_names)"},{"path":"/articles/sc-crops.html","id":"run-model-for-parameter-set","dir":"Articles","previous_headings":"","what":"3. Run model for parameter set","title":"Crop Yields","text":"next step run SWAT+ model generated days_mat parameter set. run_swatplus function SWATrunR package executes model simulations combination parameters par_dmat. results stored simulation folder, can used analysis. folder include timestamp distinguish run. process repeated, analysis automatically use recent set simulation results.","code":"# Run the SWAT+ model with the generated days_mat parameter set run_swatplus(project_path = model_path,              output = list(yld = define_output(file = 'mgtout',                                                variable = 'yld',                                                label = crop_names),                            bms = define_output(file = 'mgtout',                                                variable = 'bioms',                                                label = crop_names),                            phu = define_output(file = 'mgtout',                                                variable = 'phu',                                                label = crop_names)              ),              parameter        = par_dmat,              start_date       = NULL, # Change if necessary.              end_date         = NULL, # Change if necessary.              years_skip       = NULL, # Change if necessary.              n_thread         = n_cores,              save_path        = './simulation',              save_file        = add_timestamp('sim_dmat'),              return_output    = FALSE,              time_out         = 3600 # seconds, change if run-time differs              )"},{"path":"/articles/sc-crops.html","id":"plot-and-select-days_mat-parameters","dir":"Articles","previous_headings":"","what":"4. Plot and select days_mat parameters","title":"Crop Yields","text":"running model important load results visualize crop yields, PHU fractions harvest, biomass assess performance model different days_mat values. load_swat_run function SWATrunR package used load recent simulation results simulation folder. plot_phu_yld_bms() function used visualize crop yields crop days_mat value.  figure can select days_mat values crop fall within PHU correct interval 1 - 1.2 best match observed yields. selected values saved code snippet dmat_sel used next step.","code":"# Load the most recent dmat simulation results dmat_sims <- list.files('./simulation/', pattern = '[0-9]{12}_sim_dmat') dmat_path <- paste0('./simulation/', dmat_sims[length(dmat_sims)]) ylds_phu_dmat <- load_swat_run(dmat_path, add_date = FALSE)  # Plot PHU, crop yields and biomass over adjusted days to maturity values. plot_phu_yld_bms(ylds_phu_dmat, yield_obs) # Set days to maturity values for all selected crops based on the figure above. dmat_sel <- tibble(   plant_name                       = c('corn', 'cots', 'pnut'),   'days_mat.pdb | change = absval' = c(140, 160, 160))  # Check if user defined days to maturity values for all crops. stopifnot(all(crop_names %in% dmat_sel$plant_name)) # Update names of dmat_sel to be used as SWATrunR parameters dmat_sel <- prepare_plant_parameter(dmat_sel)"},{"path":"/articles/sc-crops.html","id":"add-additional-parameters","dir":"Articles","previous_headings":"","what":"5. Add additional parameters","title":"Crop Yields","text":"addition days_mat, can also adjust parameters leaf area index (lai_pot), harvest index (harv_idx), base temperature plant growth (tmp_base), biomass energy ratio (bm_e). parameters can adjusted similar way days_mat creating parameter set sample_lhs() function. making updates, important ensure resulting values remain realistic biologically meaningful—example, avoiding negative values ranges fall outside plausible agronomic limits.","code":"par_bnd <- tibble('lai_pot.pdb | change = relchg'  = c(-0.3, 0.3),                   'harv_idx.pdb | change = relchg' = c(-0.3, 0.3),                   'tmp_base.pdb | change = abschg' = c(-1.5, 1.5),                   'bm_e.pdb | change = relchg'     = c(-0.3, 0.1))  ## The number of samples can be adjusted based on the available computational resources. ## Recommended number of samples is 50-100. par_crop <- sample_lhs(par_bnd, n_combinations) # Add updated days to maturity values to parameter set par_crop <- bind_cols(par_crop, dmat_sel)"},{"path":"/articles/sc-crops.html","id":"run-model-for-additional-parameter-set","dir":"Articles","previous_headings":"","what":"6. Run model for additional parameter set","title":"Crop Yields","text":"parameters defined, can now run SWAT+ model using run_swatplus function. execute model simulations combination parameters par_bnd, results stored ./simulation folder.","code":"# Run the SWAT+ model with the additional parameter set run_swatplus(project_path = model_path,              output = list(yld = define_output(file = 'mgtout',                                                variable = 'yld',                                                label = crop_names)),              parameter = par_crop,              start_date       = NULL, # Change if necessary.              end_date         = NULL, # Change if necessary.              years_skip       = NULL, # Change if necessary.              n_thread         = n_cores,              save_path        = './simulation',              save_file        = add_timestamp('sim_yld'),              return_output    = FALSE,              time_out         = 3600 # seconds, change if run-time differs              )"},{"path":"/articles/sc-crops.html","id":"plot-and-select-values-for-parameters","dir":"Articles","previous_headings":"","what":"7. Plot and select values for parameters","title":"Crop Yields","text":"running model additional parameters, can load visualize results assess impact changes crop yields. plot_dotty_yields() function used plot crop yields combination parameters, allowing select best-performing parameter set based yield performance.  Based figure user can select best performing parameter set crop. selected values saved crop_par_sel used final run.","code":"# Load the most recent yield simulation results yld_sims <- list.files('./simulation/', pattern = '[0-9]{12}_sim_yld') yld_path <- paste0('./simulation/', yld_sims[length(yld_sims)]) yld_sim  <- load_swat_run(yld_path, add_date = FALSE) # Remove days to maturity parameter columns before plotting. yld_sim$parameter$values <- yld_sim$parameter$values[, 1:4]  ## Plot dotty figures for the selected crops plot_dotty_yields(yld_sim, yield_obs) # Fix the parameter changes you want to apply to the crops crop_par_sel <- tibble(   plant_name                       = c(\"corn\", \"cots\", \"pnut\"),   'bm_e.pdb | change = relchg'     = c(  -0.2,   -0.3,   0.1),   'harv_idx.pdb | change = relchg' = c(  -0.15,  -0.3,   0.3),   'lai_pot.pdb | change = relchg'  = c(  -0.2,   -0.3,   0.3),   'tmp_base.pdb | change = abschg' = c(   1.5,    1.5,  -1.0))  # Check if user defined days to maturity values for all crops. stopifnot(all(crop_names %in% crop_par_sel$plant_name)) # Restructure the set parameter changes to SWATrunR crop_par_sel <- prepare_plant_parameter(crop_par_sel)"},{"path":"/articles/sc-crops.html","id":"run-final-simulation-evaluate-results","dir":"Articles","previous_headings":"","what":"8. Run final simulation, evaluate results","title":"Crop Yields","text":"final step, can run SWAT+ model selected parameters using run_swatplus function. execute model simulations final parameter set, results stored ./simulation folder. final simulation results can evaluated using plot_phu_yld_bms() function. plot help assess whether changes made four parameters significantly affected crop yield, biomass, PHU values. Ideally, outputs remain consistent (ranges PHU yields), main issues related days--maturity already addressed first part script.","code":"# Run the simulations run_swatplus(project_path = model_path,              output = list(yld = define_output(file = 'mgtout',                                                variable = 'yld',                                                label = crop_names),                            bms = define_output(file = 'mgtout',                                                variable = 'bioms',                                                label = crop_names),                            phu = define_output(file = 'mgtout',                                                variable = 'phu',                                                label = crop_names)              ),              parameter        = par_final,              start_date       = NULL, # Change if necessary.              end_date         = NULL, # Change if necessary.              years_skip       = NULL, # Change if necessary.              n_thread         = n_cores,              save_path        = './simulation',              save_file        = add_timestamp('sim_check01'),              return_output    = FALSE,              time_out         = 3600, # seconds, change if run-time differs              keep_folder      = TRUE ) # Load the most recent check simulation results check_sims <- list.files('./simulation/', pattern = '[0-9]{12}_sim_check01') check_path <- paste0('./simulation/', check_sims[length(check_sims)]) check_sim  <- load_swat_run(check_path, add_date = FALSE)  # Plot PHU, crop yields and biomass for final simulation run. plot_phu_yld_bms(check_sim, yield_obs, 0.3)"},{"path":"/articles/sc-crops.html","id":"write-plants-plt","dir":"Articles","previous_headings":"","what":"9. Write ‘plants.plt’","title":"Crop Yields","text":"final simulation results look acceptable, can save adjusted parameter table project folder setting overwrite = TRUE command . replace original plants.plt file. backup original file available ./backup/plants.plt case need restore .","code":"file.copy(paste0(model_path, '/.model_run/thread_1/plants.plt'), model_path,           overwrite = TRUE) unlink(paste0(model_path, '/.model_run'), recursive = TRUE)"},{"path":"/articles/sc-wy.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Water Yield","text":"SWATtunR package supports flexible systematic approach soft calibration hydrological parameters SWAT+ water yield calibration. template script—intended adapted specific SWAT project—guides users calibration.","code":""},{"path":"/articles/sc-wy.html","id":"workflow","dir":"Articles","previous_headings":"","what":"Workflow","title":"Water Yield","text":"calibration process structured two main alternatives: Alternative : Calibrate esco parameter achieve target water yield ratio modeled catchment. esco (soil evaporation compensation factor) allows users adjust depth distribution used meet soil evaporative demand, accounting effects capillary action, crusting, cracks. default value 0.5. parameter essential accurately simulating water balance SWAT+ models, especially regions soil evaporation significantly influences hydrological cycle. Alternative B: Jointly calibrate esco epco parameters. epco (plant uptake compensation factor) controls extent deeper soil layers can compensate water shortages upper layers. epco close 1.0, plants can draw water deeper layers; near 0.0, uptake restricted original root depth distribution, allowing minimal compensation. alternative chosen, epco kept close possible default value 0, significant changes can strongly affect crop yield simulations. changes occur, crop yield soft calibration step revisited. following workflow script generated soft calibration function initialize_softcal(). located workflow/02_wateryield_calibration.R. script serves customizable template guide users water yield soft calibration process effectively. overview workflow steps presented figure . page provides detailed description step, including necessary code snippets explanations.","code":""},{"path":"/articles/sc-wy.html","id":"load-packages-settings-wyr-target","dir":"Articles","previous_headings":"","what":"1. Load packages, settings & WYR target","title":"Water Yield","text":"SWATtunR package essential soft calibration, provides necessary functions calibration process. Additional packages required data manipulation, visualization, SWAT+ model runs, etc. example, present Alternative B workflow water yield ratio soft calibration, represents slightly complex option. Users can switch Alternative setting alternative variable ''. model path updated point user’s specific SWAT+ project folder.","code":"# Load required R packages ------------------------------------------------ library(SWATtunR) library(SWATrunR) library(tibble)  # Parameter definition ---------------------------------------------------- # Decide for calibration alternative 'A' (only esco) or 'B' (esco and epco). alternative <- 'B'  # Path to the SWAT+ project folder. model_path <- 'test/swatplus_rev60_demo'  # Set the number of cores for parallel model execution n_cores <- Inf # Inf uses all cores. Set lower value if preferred.  # Set the number of steps in which the parameters esco/epco should be sampled # A low number of e.g. 5 to 10 is absolutely sufficient. n_step <- 5  # Set the target water yield ratio for the catchment (calculated from precipitation and flow data) wyr_target <- 0.3  # Load and prepare data --------------------------------------------------- # Load the yield observations yield_obs_path <- './observation/crop_yields.csv' yield_obs  <- read.csv(yield_obs_path)  # Define the crops which should be used in the calibration. # Default is all crops which are defined in yield_obs. # Please define manually if only selected crops should be considered. crop_names <- yield_obs$plant_name  # Optional reset of hydrology.hyd ----------------------------------------- # In the case the water yield ratio calibration workflow should be redone after # the last step of this script was already executed and the hydrology.hyd was # overwritten the hydrology.hyd should be reset to its initial condition. To # perform the reset set reset <- TRUE reset <- FALSE if(reset & file.exists('./backup/hydrology.hyd')) {   file.copy('./backup/hydrology.hyd',             paste0(model_path, '/hydrology.hyd'),             overwrite = TRUE) }"},{"path":"/articles/sc-wy.html","id":"generate-parameter-set-for-escoepco","dir":"Articles","previous_headings":"","what":"2. Generate parameter set for esco/epco","title":"Water Yield","text":"step, generate parameter set esco epco parameters. n_step set 5, 5 × 5 = 25 parameter combinations generated. parameters sampled equal intervals 0.05 0.95. intervals can used well.","code":"# Alternative A: Calibrate esco ------------------------------------------- if(alternative == 'A') {   # Sample the paramter esco with the defined number of steps.   par_esco_epco <- tibble('esco.hru | change = absval' =                             seq(0.05,0.95, length.out = n_step))  # Alternative B: Calibrate esco and epco ---------------------------------- } else if (alternative == 'B') {   # Define the esco and epco parameter ranges.   par_bnd <- tibble('esco.hru | change = absval' = seq(0.05, 0.95, length.out = n_step),                     'epco.hru | change = absval' = seq(0.05, 0.95, length.out = n_step))    # Sample the esco epco combinations with LHS sampling.   par_esco_epco <- expand.grid(par_bnd) }"},{"path":"/articles/sc-wy.html","id":"run-model-for-parameter-set","dir":"Articles","previous_headings":"","what":"3. Run model for parameter set","title":"Water Yield","text":"step run_swatplus function SWATrunR package executes model simulations combination prepared parameters. simulation results saved ./simulation folder. set results time-stamped, process repeated, recent simulations always used analysis.","code":"# Run the SWAT+ model for each parameter combination run_swatplus(project_path = model_path,              output = list(precip  =  define_output(file = 'basin_wb_aa',                                                     variable = 'precip',                                                     unit = 1),                            surq_cha = define_output(file = 'basin_wb_aa',                                                     variable = 'surq_cha',                                                     unit = 1),                            surq_res = define_output(file = 'basin_wb_aa',                                                     variable = 'surq_res',                                                     unit = 1),                            latq_cha = define_output(file = 'basin_wb_aa',                                                     variable = 'latq_cha',                                                     unit = 1),                            latq_res = define_output(file = 'basin_wb_aa',                                                     variable = 'latq_res',                                                     unit = 1),                            qtile =    define_output(file = 'basin_wb_aa',                                                     variable = 'qtile',                                                     unit = 1),                            flo =      define_output(file = 'basin_aqu_aa',                                                     variable = 'flo',                                                     unit = 1)              ),              parameter        = par_esco_epco,              start_date       = NULL, # Change if necessary.              end_date         = NULL, # Change if necessary.              add_date         = FALSE,              years_skip       = NULL, # Change if necessary.              n_thread         = n_cores,              save_path        = './simulation',              save_file        = add_timestamp('sim_wbal'),              return_output    = FALSE,              time_out         = 3600 # seconds, change if run-time differs              )"},{"path":"/articles/sc-wy.html","id":"plot-and-select-escoepco-parameters","dir":"Articles","previous_headings":"","what":"4. Plot and select esco/epco parameters","title":"Water Yield","text":"load_swat_run function SWATrunR package used load recent simulation results simulation folder. plot_esco_epco() function used visualize results. Based simulated water balance components different esco epco values, simulated water yield ratio calculated plotted parameter values. plot also includes target water yield ratio help identify suitable range value esco epco.  esco/epco plot displays recommended parameter values meet target water yield ratio. two options defining esco epco use model: Option 1: Set fixed values hydrology.hyd file specific values esco /epco selected, can written directly hydrology.hyd file, replacing initial values. fixed values can either serve starting point calibration maintained constant values later calibration steps. Option 2: Use parameter ranges calibration Alternatively, parameter ranges can selected based plot used additional simulations SWATrunR, example, detailed (hard) calibration. choosing one options, recommended run additional simulation using selected esco/epco parameter set. helps evaluate simulated water yield ratio crop yields, especially since parameters like epco can influence simulated plant growth. example use first option set fixed values esco epco hydrology.hyd file. Following values selected based plot .","code":"# Load the most recent simulation results of the water balance components. wbal_sims <- list.files('./simulation/', pattern = '[0-9]{12}_sim_wbal') wbal_path <- paste0('./simulation/', wbal_sims[length(wbal_sims)]) wbal_sim  <- load_swat_run(wbal_path, add_date = FALSE)  # Plot the water balance components and the water yield ratio plot_esco_epco(wbal_sim, 0.28, rel_wyr_limit = 0.05) # Set fixed values for esco and epco in the hydrology.hyd file. Alternative 'B' is used here. if (alternative == 'A') {   par_check <- tibble('esco.hru | change = absval' = 0.5) # Adjust accordingly } else if (alternative == 'B') {   par_check <- tibble('esco.hru | change = absval' = 0.02, # Adjust accordingly                       'epco.hru | change = absval' = 0.12) # Adjust accordingly }"},{"path":"/articles/sc-wy.html","id":"run-model-for-user-escoepco-values","dir":"Articles","previous_headings":"","what":"5. Run model for user esco/epco values","title":"Water Yield","text":"step, model run using selected esco epco values. results saved new folder.","code":"# Rerun model for crop yields results run_swatplus(project_path = model_path,              output = list(precip  =  define_output(file = 'basin_wb_aa',                                                     variable = 'precip',                                                     unit = 1),                            surq_cha = define_output(file = 'basin_wb_aa',                                                     variable = 'surq_cha',                                                     unit = 1),                            surq_res = define_output(file = 'basin_wb_aa',                                                     variable = 'surq_res',                                                     unit = 1),                            latq_cha = define_output(file = 'basin_wb_aa',                                                     variable = 'latq_cha',                                                     unit = 1),                            latq_res = define_output(file = 'basin_wb_aa',                                                     variable = 'latq_res',                                                     unit = 1),                            qtile    = define_output(file = 'basin_wb_aa',                                                     variable = 'qtile',                                                     unit = 1),                            flo      = define_output(file = 'basin_aqu_aa',                                                     variable = 'flo',                                                     unit = 1),                            yld      = define_output(file = 'mgtout',                                                     variable = 'yld',                                                     label = crop_names),                            bms      = define_output(file = 'mgtout',                                                     variable = 'bioms',                                                     label = crop_names),                            phu      = define_output(file = 'mgtout',                                                     variable = 'phu',                                                     label = crop_names)              ),              parameter        = par_check,              start_date       = NULL, # Change if necessary.              end_date         = NULL, # Change if necessary.              # add_date         = FALSE,              years_skip       = NULL, # Change if necessary.              n_thread         = n_cores,              save_path        = './simulation',              save_file        = add_timestamp('sim_check02'),              return_output    = FALSE,              time_out         = 3600 # seconds, change if run-time differs )"},{"path":"/articles/sc-wy.html","id":"plot-to-check-final-results","dir":"Articles","previous_headings":"","what":"6. Plot to check final results","title":"Water Yield","text":"finalizing model, important recheck crop simulation results selected esco epco values. plot_phu_yld_bms() function can used visualize crop yields biomass, well Potential Heat Units harvest crop.  everything looks good, final water yield ratio model results also checked using calc_wyr() function.","code":"# Load the most recent simulation results. check_sims <- list.files('./simulation/', pattern = '[0-9]{12}_sim_check02') check_path <- paste0('./simulation/', check_sims[length(check_sims)]) check_sim  <- load_swat_run(check_path, add_date = FALSE)  # Plot PHU, crop yields and biomass for final simulation run. plot_phu_yld_bms(check_sim, yield_obs, 0.3) # Check the simulated water yield ratio with reference to the target wyr. calc_wyr(check_sim)"},{"path":"/articles/sc-wy.html","id":"update-hydrology-hyd-file-or-save-in-r","dir":"Articles","previous_headings":"","what":"7. Update ‘hydrology.hyd’ file or save in R","title":"Water Yield","text":"last step save selected esco epco values either hydrology.hyd file save R future use. ensures model can run parameters subsequent simulations.","code":"# Option 1: Re-writing SWAT+ parameter file hydrology.hyd # If SWATreadR is not installed please install from: # devtools::install_github('chrisschuerz/SWATreadR') library(SWATreadR)  if(!file.exists('./backup/hydrology.hyd')) {   file.copy(paste0(model_path, '/hydrology.hyd'), './backup/hydrology.hyd') }  hydrology_hyd <- read_swat(paste0(model_path, '/hydrology.hyd'))  hydrology_hyd$esco <- 0.02 # set value hydrology_hyd$epco <- 0.12 # set value if epco is considered  write_swat(hydrology_hyd, paste0(model_path, '/hydrology.hyd'), overwrite = TRUE)  # Option 2: Setting parameter values for SWATrunR runs # To further use esco and epco ranges in e.g. the hard calibration workflow # add esco and epco ranges in the parameter definition (by default they are # included). To include their full ranges it may look like this. # Please adjust the ranges based on the results above.  parameter_boundaries <- tibble(   'esco.hru | change = absval' = c(0.05, 1),   'epco.hru | change = absval' = c(0.05, 1), )"},{"path":"/articles/soft-cal.html","id":"loading-required-packages","dir":"Articles","previous_headings":"","what":"1. Loading required packages","title":"Soft-Cal Crop Yields","text":"SWATtunR package essential soft calibration, provides necessary functions calibration process. Additional packages required data manipulation, visualization, SWAT+ model runs, etc.","code":"library(SWATtunR) library(SWATrunR) library(tidyverse) library(tibble) library(purrr)"},{"path":"/articles/soft-cal.html","id":"defining-settings","dir":"Articles","previous_headings":"","what":"2. Defining settings","title":"Soft-Cal Crop Yields","text":"step requires defining SWAT+ model path, path crop data file, observed water yield precipitation ratio. crop yield soft calibration, ’s essential accurate data observed crop yields dry weight. data typically sourced '*.csv' file, columns specifying plant names corresponding mean yields. additional information accessible, minimum maximum ranges average annual observed yields, ’s advisable include '*.csv' file well, columns labeled yield_min yield_max respectively. ensures comprehensive dataset effective calibration analysis. Crops observed yield data example provided .","code":"# Path to the SWAT+ model model_path <- '../test/my_dearest_model'  # Path to the crop data file crop_data_path <- '../inst/extdata/crop2.csv'  # Observed water yield to precipitation ratio obs_wy_ratio <- 0.27  # Set the path to save results of the soft calibration sc_res <- '../test/simulations' ## crops_obs <- read_csv(crop_data_path, show_col_types = FALSE) %>%    filter(!is.na(yield_mean))  head(crops_obs, 3) ## # A tibble: 3 × 4 ##   plant_name yield_min yield_max yield_mean ##   <chr>          <dbl>     <dbl>      <dbl> ## 1 akgs            8         12         10   ## 2 csil            7.34      13.5       11.2 ## 3 sgbt           11.0       16.9       14.0"},{"path":"/articles/soft-cal.html","id":"days-to-maturity-parameter-changes","dir":"Articles","previous_headings":"","what":"3. Days to maturity parameter changes","title":"Soft-Cal Crop Yields","text":"settings following step allows define, days maturity changes applied soft-calibration.","code":""},{"path":"/articles/soft-cal.html","id":"initialization","dir":"Articles","previous_headings":"3. Days to maturity parameter changes","what":"3.1. Initialization","title":"Soft-Cal Crop Yields","text":"Preparation step requires conversion observed yields information numeric vectors initialization 'plants.plt' file.","code":"# Convert observed yields to numeric vectors for(i in c(\"yield_mean\", \"yield_min\", \"yield_max\")){   if(i %in% colnames(crops_obs)){     assign(i, deframe(select(crops_obs, all_of(c(\"plant_name\", i)))))    } else {     assign(i, NULL)   } }  ## Initialize unmodified backup version of plants.plt if(!file.exists(paste0(model_path, '/plants.plt.bkp0'))) {   copy_file_version(model_path, 'plants.plt', file_version = 0) }"},{"path":"/articles/soft-cal.html","id":"days-to-maturity-changes","dir":"Articles","previous_headings":"3. Days to maturity parameter changes","what":"3.2. Days to maturity changes","title":"Soft-Cal Crop Yields","text":"following code generates parameter input table changes required SWAT+ model run. names converted SWATrunR syntax days maturity parameter. code snippet also samples changes days maturity, allowing users define crops used soft calibration initial values days maturity.","code":"# Reading the plants.plt input file from the initial unchanged backup file plants_plt <- read_tbl(file_path = paste0(model_path, '/plants.plt.bkp0')) plants_plt <- select(plants_plt, - any_of('description'))  # Define all crops which should be calibrated # Alternatively define a name vector (if you also want to consider crops  # which are not given in the observation input file). crops <- crops_obs$plant_name # crops <- c('crop1', 'crop2', 'crop3')  # Get a vector with days_mat initial values for the selected crops dmat_init <- plants_plt %>%   filter(name %in% crops) %>%    select(name, days_mat) %>%   mutate(days_mat = ifelse(days_mat == 0, 110, days_mat)) %>%    ## if days_mat is 0, set it to 110 (as it is the default value)   deframe()  # Sample changes for days to maturity. Depending on the number of cores you have  # available choose a reasonable interval for the days to maturity which you want  # to test. With an interval of 10 e.g. you have to do 12 simulations (3 rounds  # on 4 cores), with an interval of 5 its 23 simulations. dmat_step <- 20 dmat_chg <- round(seq(-30, 100, dmat_step))  # Generate the parameter input table with the changes for all crops and convert  # the names into SWATrunR syntax par_dmat <- map_df(dmat_init, ~ .x + dmat_chg) %>%    set_names(., paste0('dmat_', names(.),                       '::days_mat.pdb | change = absval | name = ' , names(.)))"},{"path":"/articles/soft-cal.html","id":"run-simulations","dir":"Articles","previous_headings":"","what":"4. Run simulations","title":"Soft-Cal Crop Yields","text":"Days maturity parameter changes applied SWAT+ model, simulations run analyze PHU fractions, yields biomass selected crops. SWATrunR package used run simulations.","code":"# Set the number of cores. E.g. for 12 runs use 4 6, or 12 cores (if available) cores <- 3  ylds_phu_dmat <- run_swatplus(project_path = model_path,                               output = list(yld = define_output(file = 'mgtout',                                                                 variable = 'yld',                                                                 unit = crops),                                             bms = define_output(file = 'mgtout',                                                                 variable = 'bioms',                                                                 unit = crops),                                             phu = define_output(file = 'mgtout',                                                                 variable = 'phu',                                                                 unit = crops)                               ),                               parameter = par_dmat,                               start_date = '2015-01-01',                               end_date = '2020-12-31',                               years_skip = 2,                               n_thread = cores)  # Optionally save the simulation runs. if(!dir.exists(sc_res)) dir.create(sc_res) saveRDS(ylds_phu_dmat, paste0(sc_res, \"/ylds_phu_mat3.rds\"))"},{"path":"/articles/soft-cal.html","id":"plot-phu-fractions-yields-and-biomass-for-days-to-maturity-changes","dir":"Articles","previous_headings":"","what":"5. Plot PHU fractions, yields, and biomass for days to maturity changes","title":"Soft-Cal Crop Yields","text":"figure, visualize PHU fractions, yields, biomass various days maturity settings. graphical representation serves reference adjust initial values days_mat crop simulation. grain crops, typically dry harvest, aim PHU fractions ranging approximately 1.2 1.5 optimize yield. Vegetables, hand, tend PHU fraction around 1, possibly slightly , considered optimal. Crops like basil broccoli harvested reaching full maturity. cases, PHU fractions can lower 1, ranging 0.5 0.9. Furthermore, ’s crucial ensure simulated yields fall within range locally observed yields maintain accuracy relevance.","code":"plot_phu_yld_bms(ylds_phu_dmat, dmat_chg, yield_mean, yield_min, yield_max) plot_phu_yld_bms(ylds_phu_dmat, dmat_chg, yield_mean, yield_min, yield_max)"},{"path":"/articles/soft-cal.html","id":"select-days-to-maturity-parameter-changes-to-apply","dir":"Articles","previous_headings":"","what":"6. Select days to maturity parameter changes to apply","title":"Soft-Cal Crop Yields","text":"Based figure provided, identify necessary adjustments days maturity parameter SWAT+ model. adjustments made ensure PHU fractions, yields, biomass values specified crops align observed data.","code":"# Add values based on figure to this line (please add all crops from the initial selection) # names(dmat_init) # Print all crop names chg_dmat_sel <- c(akgs = -30, csil = 10, sgbt =  70,                    wbar =   -10, wira = -10, wiry =  0, wwht =  -30)   # Adding defined changes to initial days_mat values of crops dmat_sel <- chg_dmat_sel[names(dmat_init)] + dmat_init dmat_sel <- enframe(dmat_sel, value = 'days_mat_upd')"},{"path":"/articles/soft-cal.html","id":"write-d_mat-modifications-into-file","dir":"Articles","previous_headings":"","what":"7. Write d_mat modifications into file","title":"Soft-Cal Crop Yields","text":"Write changes plants.plt file update days maturity values selected crops also backup updated file plants.plt.bkp1 file.","code":"## [1] TRUE"},{"path":"/articles/soft-cal.html","id":"check-initial-crop-lai_pot-harv_idx-tmp_base-bm_e-parameters","dir":"Articles","previous_headings":"","what":"8. Check initial crop lai_pot, harv_idx, tmp_base, bm_e parameters","title":"Soft-Cal Crop Yields","text":"fixing days maturity values, might needed address values lai_pot, harv_idx, tmp_base, bm_e parameters selected crops. parameters crucial simulation adjusted PHU fractions, yields, biomass values within expected range.","code":"plants_plt <- read_tbl(file_path = paste0(model_path, '/plants.plt'))  par_ini <- plants_plt %>%   filter(name %in% crops) %>%   select(name, lai_pot, harv_idx, tmp_base, bm_e)#, days_mat) par_ini ## # A tibble: 7 × 5 ##   name  lai_pot harv_idx tmp_base  bm_e ##   <chr>   <dbl>    <dbl>    <dbl> <dbl> ## 1 csil      4       0.9         8  39   ## 2 sgbt      5       2           4  30   ## 3 wbar      4       0.54        0  30   ## 4 wwht      4       0.4         0  30   ## 5 wira      3.5     0.23        5  38   ## 6 wiry      4       0.4         0  30   ## 7 akgs      4       0.75        0  12.5"},{"path":"/articles/soft-cal.html","id":"step9","dir":"Articles","previous_headings":"","what":"9. Create sample of lai_pot, harv_idx, tmp_base, bm_e parameters with LHS","title":"Soft-Cal Crop Yields","text":"use lhs package create sample parameter values selected crops. sample used run SWAT+ simulations evaluate impact parameter changes model output.","code":"## Make sure your updates will not produce unrealistic values (i.e. negative values)!!! par_bnd <- tibble('lai_pot.pdb | change = relchg' = c(-0.3, 0.3),                   'harv_idx.pdb | change = relchg' = c(-0.3, 0.3),                   'tmp_base.pdb | change = relchg' = c(-0.3, 0.3),                   'bm_e.pdb | change = relchg' = c(-0.3, 0.1))  par_crop <- sample_lhs(par_bnd, 10)"},{"path":"/articles/soft-cal.html","id":"step10","dir":"Articles","previous_headings":"","what":"10. Run SWATrunR for prepared parameter set","title":"Soft-Cal Crop Yields","text":"","code":"ylds_plnt_par <- run_swatplus(project_path = model_path,                               output = list(yld = define_output(file = 'mgtout',                                                                 variable = 'yld',                                                                 unit = crops)),                               parameter = par_crop,                               n_thread = cores) saveRDS(ylds_plnt_par, paste0(sc_res, \"/ylds_plnt_par3.rds\"))"},{"path":"/articles/soft-cal.html","id":"step11","dir":"Articles","previous_headings":"","what":"11. Examine results in figures","title":"Soft-Cal Crop Yields","text":"Plotting simulation results dotty plots can help identify parameter sensitivities modify . examining patterns dotty plots, may consider adjusting certain parameter ranges (step 9) rerunning model (step 10) observe changes results. Subsequently, can reanalyze outcomes (step 11) gain insights refine understanding system modeled.","code":"## Plot dotty figures for the selected crops plot_dotty_yields(ylds_plnt_par, yield_mean, yield_min, yield_max)"},{"path":"/articles/val.html","id":"val_step1","dir":"Articles","previous_headings":"","what":"1. Validation preparation","title":"Validation","text":"prepare validation data set quite simple fix_dates function, cuts simulation results observations defined validation period. Following code snippet shows prepare validation data set. wq_val_period defined select_best_print. Example bewritten wq_val_period <- c(\"2010-01-01\", \"2014-12-31\").","code":"# Readjusting the dates of the simulated and observed data for validation period tmp <- fix_dates(sim_wq_full, obs_wq_full, trim_start = wq_val_period[1],                   trim_end = wq_val_period[2]) sim_wq_val <- tmp$sim obs_wq_val <- tmp$obs"},{"path":"/articles/val.html","id":"val_step2","dir":"Articles","previous_headings":"","what":"2. Performance calculation","title":"Validation","text":"calculate performance SWAT+ model, can use functions calibration process. following code snippet shows calculate performance SWAT+ model validation period. obj_tbl_cal dataframe obtained end calibration contains best run ids @ref(select_best_print).","code":"# Calculate the performance metrics for validation period obj_tbl_val <- calculate_performance(sim_wq_val, obs_wq_val, par_name = \"flo_day_52\")  # Filter the performance metrics for the selected calibration runs obj_tbl_val <- obj_tbl_val[obj_tbl_val$run_id %in% obj_tbl_cal$run_id,]"},{"path":"/articles/val.html","id":"val_step3","dir":"Articles","previous_headings":"","what":"3. Performance visualization","title":"Validation","text":"visualize performance SWAT+ model, can use functions calibration process. Particularly, plot_calval_comparison plot_selected_sim functions used visualize performance SWAT+ model validation period.","code":""},{"path":"/articles/val.html","id":"val_step4","dir":"Articles","previous_headings":"","what":"4. Write out ‘calibration.cal’ file","title":"Validation","text":"final step write “calibration.cal” file, supplied model run already calibrated validated model. Please don’t forget check master file ‘file.cio’, connection ‘calibration.cal’ line 22. following code snippet shows write ‘calibration.cal’ file.","code":"write_cal_file(par = par_flow,                 write_path = 'your_path',                i_run = 1) ``"},{"path":"/articles/intro.html","id":"introduction-to-swattunr","dir":"Articles","previous_headings":"","what":"Introduction to SWATtunR","title":"Overview","text":"SWATtunR open-source R package designed automate enhance calibration validation SWAT+ (Soil Water Assessment Tool) models. provides flexible comprehensive suite functions workflows support users building fully scripted, reproducible hydrological modeling processes R. package integrates SWAT-related R packages SWATbuildR, SWATprepR, SWATfarmR, SWATdoctR, SWATrunR, SWATmeasR, SWATreadR, SWATdata — forming powerful interoperable ecosystem tools hydrological environmental modelers working SWAT/SWAT+ models.","code":""},{"path":"/articles/intro.html","id":"key-functionalities-of-swattunr-include","dir":"Articles","previous_headings":"Introduction to SWATtunR","what":"Key functionalities of SWATtunR include:","title":"Overview","text":"Workflow initialization setup Parameter sampling strategies Input output data manipulation Performance evaluation metrics Advanced visualization calibration validation results Model file management tools use SWATtunR, users must provide working SWAT+ model setup along corresponding observed data. package guides performing calibration validation adjusting parameters three key SWAT+ input files Figure (ref?)(fig:fig1) : plants.plt – crop yield (soft calibration) hydrology.hyd – water yield ratio (soft calibration) calibration.cal – model calibration parameters (hard calibration)","code":""},{"path":"/articles/intro.html","id":"calibration-workflow","dir":"Articles","previous_headings":"","what":"Calibration Workflow","title":"Overview","text":"calibration process SWATtunR divided two main stages: soft hard calibration. Soft calibration focuses improving plant growth water balance without altering core model dynamics. involves: Step 1: Calibrating crop growth parameters (days_mat, optionally lai_pot, harv_idx, tmp_base, bm_e) align simulated yields observed statistics. Step 2: Calibrating evapotranspiration components using esco epco match observed water yield ratios. crops fail reach full maturity yield unrealistic, crop management parameter ranges may need revision. Hard calibration fine-tunes model parameters observed discharge, sediment, nutrient data. Two strategies supported: Sequential calibration: Stepwise adjustment hydrological, sediment, nutrient processes. Simultaneous calibration: Joint tuning processes, improving fit interrelated components like streamflow, nutrients, sediments. SWATtunR supports flexible workflows, including multi-site calibration, use hydrological signatures, multi-criteria performance evaluation ensure robust model performance across varying conditions.","code":""},{"path":"/articles/init.html","id":"initialization","dir":"Articles","previous_headings":"","what":"Initialization","title":"Getting Started","text":"beginning calibration SWATtunR package, users must establish calibration project setting well-organized directory containing essential files folders support calibration process. package offers automated functions streamline setup, ensuring necessary components included. Additionally, provides example data workflow scripts explanations examples help users start efficiently. SWATtunR package offers two main functions, initialize_softcal() initialize_hardcal(), requiring project name, calibration project save path, SWAT+ model setup path inputs. functions automatically set calibration project, including folder structure, example data, workflow script. project structure, though slightly varying function, includes ‘Workflow’ folder adaptable R scripts (notably ordered hard calibration), ‘Simulation’ folder storing SWATrunR results *.sqlite files timestamps, ‘Observation’ folder data like daily streamflow, ‘Backup’ folder modified files (e.g., plants.plt). *.Rproj file also included main directory facilitate script execution.","code":""},{"path":"/articles/init.html","id":"examples","dir":"Articles","previous_headings":"","what":"Examples","title":"Getting Started","text":"Examples function usage provided , illustrating initialize calibration project soft hard calibration workflows.","code":"initialize_softcal(project_name = 'softcal_test',                     path = 'Path:/to/directory',                     model_path = 'Path:/to/txt_inout') initialize_hardcal(project_name = 'hardcal_test',                     path = 'Path:/to/directory',                     model_path = 'Path:/to/txt_inout')"},{"path":"/articles/init.html","id":"example-setup","dir":"Articles","previous_headings":"","what":"Example setup","title":"Getting Started","text":"case want test package without set project, can use example SWAT+ model setup provided SWATdata R package data provided (Bosch et al. 2007) package. following code show obtain example (test) model setup. load_demo function SWATdata package download SWAT+ model setup specified path. path_plus variable contain path downloaded SWAT+ model setup, can used initialize_softcal() initialize_hardcal() functions.","code":"## Install SWATdata package, if not already installedq devtools::install_github(\"chrisschuerz/SWATdata\") ## Load SWATdata package library(SWATdata)  # Load a SWAT+ Rev.60model setup on Windows: demo_path <- \"Define:/your/path\" path_plus <- load_demo(dataset = \"project\",                        path = demo_path                        version = \"plus\",                        revision = 60)"},{"path":[]},{"path":"/articles/hc-par.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Parameter Definition","text":"SWATrunR package provides framework set tools hard calibration SWAT models. core workflow generated initialize_hardcal() function. function creates four R scripts folder named workflow, dividing process four distinct steps facilitate calibration avoid lengthy cumbersome script. 01_define_parameters.R – defines parameters calibrated 02_define_output.R – specifies model outputs saved (calibrated) 03_run_swat.R – performs SWAT model simulations 04_analyze_results.R – analyzes simulation results compares observations workflow fully customizable suit specific calibration needs. script contains necessary guidance form code comments. web page provides overview workflow individual steps.","code":""},{"path":"/articles/hc-par.html","id":"workflow-steps","dir":"Articles","previous_headings":"","what":"Workflow Steps","title":"Parameter Definition","text":"Full workflow divided 11 steps. 1-2 steps 01_define_parameters.R, 3 - 02_define_output.R, 4 - 03_run_swat.R rest 04_analyze_results.R. first two steps described page, rest next pages. page corresponds 01_define_parameters.R script.","code":""},{"path":"/articles/hc-par.html","id":"load-packages-and-settings","dir":"Articles","previous_headings":"","what":"1. Load packages and settings","title":"Parameter Definition","text":"Loading required packages settings first step workflow.","code":"# Load required R packages ------------------------------------------------ library(SWATtunR) library(SWATrunR) library(tibble) library(purrr) library(lhs)  # Parameter definition ---------------------------------------------------- # Number parameter combinations n_combinations <- 1000  # Path to the SWAT+ project folder. model_path <- 'test/swatplus_rev60_demo'"},{"path":"/articles/hc-par.html","id":"define-parameters","dir":"Articles","previous_headings":"","what":"2. Define parameters","title":"Parameter Definition","text":"following section provides suggested list range SWAT+ parameters calibrating different output variables. Parameters roughly grouped according processes strongly influence. parameter groups optional may included excluded depending specific objectives calibration.","code":"parameter_boundaries <- tibble(   # snow (optional - use if average snow fall to precipitation ratio is   # higher than 5%)   'snomelt_tmp.hru | change = absval' = c(-1.5, 1.5),   'snofall_tmp.hru | change = absval' = c(-1.5, 1.5),   'snomelt_lag.hru | change = absval' = c(0, 1),   'snomelt_min.hru | change = absval' = c(1, 3.5),   'snomelt_max.hru | change = absval' = c(3.5, 7),   # ET (note: it is suggested that a narrow range for esco selected in soft   # calibration of water balance is used instead of the wide (0,1) range)   'esco.hru | change = absval' = c(0.05, 1),   'epco.hru | change = absval' = c(0.05, 1),   'awc.sol | change = relchg' = c(-0.25, 0.25),   #surface runoff   'cn2.hru | change = relchg' = c(-0.15, 0.10),   'cn3_swf.hru | change = absval' = c(0, 1), # Normalized range. Will be updated below   'ovn.hru | change  = relchg ' = c(-0.25, 0.25),   'surlag.bsn | change = absval' = c(0.005, 4),   # lateral flow (optional - use if lateral flow constitutes at least 5% of   # total water yield)   'lat_len.hru | change = abschg' = c(-20, 20),   'latq_co.hru | change = absval' = c(0, 1), # Normalized range. Will be updated below   'bd.sol | change = relchg' = c(-0.35, 0.35),   'k.sol | change = relchg' = c(-0.5, 2),   # tile flow (optional - use if tile flow constitutes at least 5% of total   # water yield; note: tile_lag and tile_dtime should be active only if   # tile_drain is set to 0 in codes.bsn file))   'tile_dep.hru | change = relchg' = c(0.1, 0.3),   'tile_lag.hru | change = absval' = c(20, 25),   'tile_dtime.hru | change = absval' = c(50, 100),   # percolation/aquifer   'perco.hru | change = absval' = c(0, 1), # Normalized range. Will be updated below   'flo_min.aqu | change = abschg' = c(-2, 2),   'revap_co.aqu | change = absval' = c(0.02, 0.2),   'revap_min.aqu | change = abschg' = c(-2, 2),   'alpha.aqu | change = absval' = c(0.001, 0.1),   'sp_yld.aqu | change = absval' = c(0.001, 0.05),   'bf_max.aqu | change = absval' = c(0.5, 2),   # channel routing   'chn.rte | change = absval' = c(0.02, 0.3),   'chs.rte | change = relchg' = c(-0.2, 0.2),   # sediment routing   'cov.rte | change = absval' = c(0.005, 1),   'bedldcoef.rte | change = absval' = c(0.01, 1),   'cherod.rte | change = absval' = c(0.05, 1),   # nitrogen parameters from here   \"n_updis.bsn | change = absval\" = c(10, 80),   \"nperco.bsn | change = absval\" = c(0.5, 1),   \"sdnco.bsn | change = absval\" = c(0.75, 0.9),   \"hlife_n.aqu | change = absval\" = c(0, 200),   \"no3_init.aqu | change = absval\" = c(0, 30),   \"cmn.bsn | change = absval\" = c(0.001, 0.0013),   \"rsdco.bsn | change = absval\" = c(0.02, 0.1)   )  # Sample parameter combinations ------------------------------------------- parameter_set <- sample_lhs(parameter_boundaries, n_combinations)"},{"path":"/articles/hc-par.html","id":"appling-different-ranges-to-cn3_swf-latq_co-and-perco","dir":"Articles","previous_headings":"2. Define parameters","what":"Appling different ranges to cn3_swf, latq_co, and perco","title":"Parameter Definition","text":"step optional removed wish apply different parameter ranges based initial values parameters cn3_swf, latq_co, perco. default, SWAT+ model assigns different initial values parameters setup, based runoff leaching potentials respective HRUs. preserve spatial variability, recommended calibrate parameters using different ranges correspond initial values. following routine ensures generating multiple parameter columns single sampled column. Note parameter must sampled earlier within range 0 1, can now translated different sub-ranges. sub-ranges can also narrowed part calibration process. step, HRUs SWAT+ model setup separated groups based initial values perco, cn3_swf, latq_co.","code":"# Separate the HRUs of the SWAT+ model setup into groups based on their initial # values of e.g. perco, cn3_swf, and latq_co perco_groups <- group_hydr_values('perco',   model_path) cn3_groups   <- group_hydr_values('cn3_swf', model_path) latq_groups  <- group_hydr_values('latq_co', model_path)  # Define parameter boundaries in which the parameter values should vary for # the different initial values. # The list can be a named list, the names defined here will be added to the # parameter names for differentiation. If unnamed the indexes _1, _2, and _3 # will be added to the parameter names instead. # # Only provide the same numbers of ranges as numbers of individual parameters # identified in the lines 105 to 107. Otherwise an error will occur in the # following routine. perco_bound <- list(low = c(0.05, 0.30), mod = c(0.30, 0.60), high = c(0.50, 0.95)) cn3_bound   <- list(low = c(0.00, 0.30), mod = c(0.15, 0.45), high = c(0.50, 0.95)) latq_bound  <- list(low = c(0.01, 0.30), mod = c(0.10, 0.40), high = c(0.50, 0.90))  # Add the additional parameter columns to the parameter table and remove the # column with the respective normalized parameter values. parameter_set <- translate_to_boundaries(par_tbl = parameter_set,                                          par_name = 'perco.hru | change = absval',                                          par_bound = perco_bound,                                          par_group = perco_groups)  parameter_set <- translate_to_boundaries(par_tbl = parameter_set,                                          par_name = 'cn3_swf.hru | change = absval',                                          par_bound = cn3_bound,                                          par_group = cn3_groups)  parameter_set <- translate_to_boundaries(par_tbl = parameter_set,                                          par_name = 'latq_co.hru | change = absval',                                          par_bound = latq_bound,                                          par_group = latq_groups)"},{"path":"/articles/hc-out.html","id":"define-model-outputs-to-calibrate","dir":"Articles","previous_headings":"","what":"3. Define model outputs to calibrate","title":"Output Definition","text":"following section provides suggested list SWAT+ outputs calibrated. outputs grouped according variables. Users can comment outputs relevant calibration objectives. define_output function SWATrunR package used specify output files, variables, units saved.","code":"# Parameter definition ---------------------------------------------------- # Channel IDs for which simulation outputs are returned. cha_ids <- 1 # HRU IDs for which simulation outputs are returned. E.g. all HRUs hru_ids <- 1:134  # Output definition ------------------------------------------------------- outputs <- list(   # Daily discharge   flo_day = define_output(file = 'channel_sd_day',                           variable = 'flo_out',                           unit = cha_ids)   # Daily in-stream Nitrogen   no3_day = define_output(file = 'channel_sd_day',                           variable = 'no3_out',                           unit = cha_ids),   orgn_day = define_output(file = 'channel_sd_day',                            variable = 'orgn_out',                            unit = cha_ids),   nh3_day = define_output(file = 'channel_sd_day',                           variable = 'nh3_out',                           unit = cha_ids),   no2_day = define_output(file = 'channel_sd_day',                           variable = 'no2_out',                           unit = cha_ids),   # Daily in-stream phosphorous   solp_day = define_output(file = 'channel_sd_day',                           variable = 'solp_out',                           unit = cha_ids),   sedp_day = define_output(file = 'channel_sd_day',                            variable = 'sedp_out',                            unit = cha_ids),   # Daily in-stream sediment loads   sed_day = define_output(file = 'channel_sd_day',                           variable = 'sed_out',                           unit = cha_ids),   # Average annual sediment yields for all HRUs   sedyld = define_output(file = 'hru_ls_aa',                          variable = 'sedyld',                          unit = hru_ids) )"},{"path":"/articles/hc-run.html","id":"perform-swat-simulation-runs","dir":"Articles","previous_headings":"","what":"4. Perform SWAT simulation runs","title":"Performing Runs","text":"Firstly, following settings modified based user’s requirements. following section runs SWAT+ model using defined outputs parameters. run_swatplus function SWATrunR package used execute model runs.","code":"# Parameter definition ---------------------------------------------------- # Path to the SWAT+ project folder. model_path <- 'test/swatplus_rev60_demo'  # Start date of simulation period start_date <- '2003-01-01' # End date of simulation period end_date <- '2012-12-31' # Start date for printing simulation outputs start_date_print <- '2006-01-01'  # Number of cores used for parallel simulation runs n_cores <- NULL  # Name of the folder where simulation results will be saved incrementally. # To continue writing to existing saved runs, replace by the name of the # existing save_file. save_file_name <- paste0(format(Sys.time(), '%Y%m%d%H%M'), '_sim')  # Path where the simulation results are saved. # Default the simulations are saved in the calibration project # in the sub-folder /simulation save_path <- './simulation' # Perform simulation runs run_swatplus(project_path     = model_path,              output           = outputs,              parameter        = parameter_set,              start_date       = start_date,              end_date         = end_date,              start_date_print = start_date_print,              n_thread         = n_cores,              save_path        = save_path,              save_file        = save_file_name,              return_output    = FALSE,              split_units      = FALSE, # better set TRUE for large number of units              time_out         = 3600 # seconds, change if run-time differs              )"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Svajunas Plunge. Author, maintainer. Christoph Schuerz. Author. Michael Strauch. Author. Mikołaj Piniewski. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Plunge S, Schuerz C, Strauch M, Piniewski M (2025). SWATtunR: Soft Calibration, Hard Calibration, Validation SWAT+ Models. R package version 0.3.5, https://github.com/biopsichas/SWATtunR.","code":"@Manual{,   title = {SWATtunR: Soft Calibration, Hard Calibration, and Validation for SWAT+ Models},   author = {Svajunas Plunge and Christoph Schuerz and Michael Strauch and Mikołaj Piniewski},   year = {2025},   note = {R package version 0.3.5},   url = {https://github.com/biopsichas/SWATtunR}, }"},{"path":[]},{"path":"/index.html","id":"swattunr","dir":"","previous_headings":"","what":"SWATtunR","title":"Soft Calibration, Hard Calibration, and Validation for SWAT+ Models","text":"goal SWATtunR help SWAT+ model calibration validation. functions developed tested implementation modeling tasks OPTAIN project, Nordbalt-Ecosafe LIFE SIP Vanduo. Functions initially developed Christoph Schuerz, added important capability top R tools designed SWAT/SWAT+ models. Therefore, highly recommend trying using tools: SWATbuildR - R tool building SWAT+ setups; SWATprepR - SWAT+ model input data preparation helper. package presented article Plunge, Szabó, et al. (2024); SWATfarmR - R tool preparing management schedules SWAT model; SWATdoctR - collection functions R routines SWAT model calibration model diagnostics. package presented article Plunge, Schürz, et al. (2024); SWATrunR - R tool running SWAT models different parameters scenarios. Please install branch names remove_legacy. done using line like remotes::install_github(\"chrisschuerz/SWATrunR@remove_legacy\") SWATmeasR - R tool implementing Natural/Small Water Retention Measures (NSWRMs) SWAT+ models running scenarios. Additionally, recommend checking following packages, can used build scripted workflows SWAT+: SWATreadR - Read write SWAT+ input output files. SWATdata - SWAT project datasets SWATrunR SWATfarmR.  Detailed information packages, workflow steps, input data, SWAT+ parameters, model calibration, validation, etc., found SWAT+ modeling protocol Christoph et al. (2022).","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Soft Calibration, Hard Calibration, and Validation for SWAT+ Models","text":"can install development version SWATtunR GitHub.  work carried within OPTAIN project (Optimal strategies retain re-use water nutrients small agricultural catchments across different soil-climatic regions Europe, cordis.europa.eu), received funding European Union’s Horizon 2020 research innovation programme grant agreement . 862756. also supported NORDBALT-ECOSAFE project, funded European Union’s Horizon Europe research innovation programme grant agreement . 101060020. LIFE22-IPE-LT-LIFE-SIP-Vanduo project (Integrated water management Lithuania, reference: LIFE22-IPE-LT-LIFE-SIP Vanduo / 101104645, cinea.ec.europa.eu), funded European Union LIFE Programme grant agreement . 101104645.","code":"# If the package 'remotes' is not installed run first: install.packages(\"remotes\")  # The installation of `SWATprepR`. remotes::install_github(\"biopsichas/SWATtunR\")"},{"path":[]},{"path":"/reference/add_obj.html","id":null,"dir":"Reference","previous_headings":"","what":"Add the unit values for which objects the parameter change should be applied — add_obj","title":"Add the unit values for which objects the parameter change should be applied — add_obj","text":"Add unit values objects parameter change applied","code":""},{"path":"/reference/add_obj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add the unit values for which objects the parameter change should be applied — add_obj","text":"","code":"add_obj(par_cal, unit, unit_all)"},{"path":"/reference/add_obj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add the unit values for which objects the parameter change should be applied — add_obj","text":"par_cal calibration.cal tibble parameter unit Character string defines condition object units (ids e.g. hru objects) unit_all List vectors define unit ids object types.","code":""},{"path":"/reference/add_slope.html","id":null,"dir":"Reference","previous_headings":"","what":"Add condition lines based on slope — add_slope","title":"Add condition lines based on slope — add_slope","text":"Add condition lines based slope","code":""},{"path":"/reference/add_slope.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add condition lines based on slope — add_slope","text":"","code":"add_slope(cond, cond_tbl)"},{"path":"/reference/add_slope.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add condition lines based on slope — add_slope","text":"cond Character string defines condition variable 'var' cond_tbl Tibble conditions defined based soil land use","code":""},{"path":"/reference/add_suffix_to_duplicate.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a running ID to duplicated names — add_suffix_to_duplicate","title":"Add a running ID to duplicated names — add_suffix_to_duplicate","text":"Add running ID duplicated names","code":""},{"path":"/reference/add_suffix_to_duplicate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a running ID to duplicated names — add_suffix_to_duplicate","text":"","code":"add_suffix_to_duplicate(col_name)"},{"path":"/reference/add_suffix_to_duplicate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a running ID to duplicated names — add_suffix_to_duplicate","text":"col_name Character vector column names","code":""},{"path":"/reference/add_suffix_to_duplicate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a running ID to duplicated names — add_suffix_to_duplicate","text":"col_name character vector IDs duplicated names","code":""},{"path":"/reference/add_value_range.html","id":null,"dir":"Reference","previous_headings":"","what":"Add the value range 'val' for the condition variable 'var' for a parameter to\r\ncalibration.cal — add_value_range","title":"Add the value range 'val' for the condition variable 'var' for a parameter to\r\ncalibration.cal — add_value_range","text":"Add value range 'val' condition variable 'var' parameter calibration.cal","code":""},{"path":"/reference/add_value_range.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add the value range 'val' for the condition variable 'var' for a parameter to\r\ncalibration.cal — add_value_range","text":"","code":"add_value_range(par_cal, val, var)"},{"path":"/reference/add_value_range.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add the value range 'val' for the condition variable 'var' for a parameter to\r\ncalibration.cal — add_value_range","text":"par_cal calibration.cal tibble parameter val Vector defines value range var Character string. Name variable","code":""},{"path":"/reference/aggregate_aa.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate and Average Annually — aggregate_aa","title":"Aggregate and Average Annually — aggregate_aa","text":"function takes data frame containing date column numerical columns, aggregates data annually, computes average annual sums.","code":""},{"path":"/reference/aggregate_aa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate and Average Annually — aggregate_aa","text":"","code":"aggregate_aa(tbl)"},{"path":"/reference/aggregate_aa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate and Average Annually — aggregate_aa","text":"tbl data frame contains 'date' column numerical columns.","code":""},{"path":"/reference/aggregate_aa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate and Average Annually — aggregate_aa","text":"numeric vector mean annual sums column input data frame.","code":""},{"path":"/reference/aggregate_aa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Aggregate and Average Annually — aggregate_aa","text":"","code":"if (FALSE) { flo <- aggregate_aa(sim$simulation$flo) }"},{"path":"/reference/build_constraint_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Build the parameter constraint from the rules in the parameter names — build_constraint_tbl","title":"Build the parameter constraint from the rules in the parameter names — build_constraint_tbl","text":"Build parameter constraint rules parameter names","code":""},{"path":"/reference/build_constraint_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build the parameter constraint from the rules in the parameter names — build_constraint_tbl","text":"","code":"build_constraint_tbl(cons_i, bool_op)"},{"path":"/reference/build_constraint_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build the parameter constraint from the rules in the parameter names — build_constraint_tbl","text":"cons_i Text string defines constraint bool_op Vector strings define different possible boolean operations","code":""},{"path":"/reference/build_expression.html","id":null,"dir":"Reference","previous_headings":"","what":"Build filter expressions from the parameter constraint table' — build_expression","title":"Build filter expressions from the parameter constraint table' — build_expression","text":"Build filter expressions parameter constraint table'","code":""},{"path":"/reference/build_expression.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build filter expressions from the parameter constraint table' — build_expression","text":"","code":"build_expression(constraints)"},{"path":"/reference/build_expression.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build filter expressions from the parameter constraint table' — build_expression","text":"constraints Constraint table","code":""},{"path":"/reference/calc_fdc.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Flow Duration Curve (FDC) — calc_fdc","title":"Calculate Flow Duration Curve (FDC) — calc_fdc","text":"function calculates flow duration curve given vector dataframe.","code":""},{"path":"/reference/calc_fdc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Flow Duration Curve (FDC) — calc_fdc","text":"","code":"calc_fdc(x)"},{"path":"/reference/calc_fdc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Flow Duration Curve (FDC) — calc_fdc","text":"x vector tibble flow values.","code":""},{"path":"/reference/calc_fdc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Flow Duration Curve (FDC) — calc_fdc","text":"tibble sorted values corresponding exceedance probabilities.","code":""},{"path":"/reference/calc_fdc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Flow Duration Curve (FDC) — calc_fdc","text":"","code":"if (FALSE) { fdc <- calc_fdc(c(3, 1, 4, 1, 5, 9, 2, 6, 5)) }"},{"path":"/reference/calc_fdc_rsr.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate RSR for Flow Duration Curve Segments — calc_fdc_rsr","title":"Calculate RSR for Flow Duration Curve Segments — calc_fdc_rsr","text":"function calculates ratio RMSE standard deviation different segments flow duration curve (FDC).","code":""},{"path":"/reference/calc_fdc_rsr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate RSR for Flow Duration Curve Segments — calc_fdc_rsr","text":"","code":"calc_fdc_rsr(fdc_sim, fdc_obs, quantile_splits, out_tbl = \"long\")"},{"path":"/reference/calc_fdc_rsr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate RSR for Flow Duration Curve Segments — calc_fdc_rsr","text":"fdc_sim tibble simulated flow data. fdc_obs tibble observed flow data. quantile_splits numeric vector quantiles splitting FDC. out_tbl character specifying output format ('long' 'wide'). Default out_tbl = 'long'.","code":""},{"path":"/reference/calc_fdc_rsr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate RSR for Flow Duration Curve Segments — calc_fdc_rsr","text":"tibble RSR values different segments FDC.","code":""},{"path":"/reference/calc_fdc_rsr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate RSR for Flow Duration Curve Segments — calc_fdc_rsr","text":"","code":"if (FALSE) { fdc_sim <- calc_fdc(runif(100)) fdc_obs <- calc_fdc(runif(100)) rsr_values <- calc_fdc_rsr(fdc_sim, fdc_obs, c(5, 20, 70, 95)) }"},{"path":"/reference/calc_segment_diff.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Segment Differences — calc_segment_diff","title":"Calculate Segment Differences — calc_segment_diff","text":"function calculates segment differences given set parameters.","code":""},{"path":"/reference/calc_segment_diff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Segment Differences — calc_segment_diff","text":"","code":"calc_segment_diff(par, obj, obj_thrs)"},{"path":"/reference/calc_segment_diff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Segment Differences — calc_segment_diff","text":"par list data frame parameters segment. obj numeric vector objective values. obj_thrs numeric threshold objective values.","code":""},{"path":"/reference/calc_segment_diff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Segment Differences — calc_segment_diff","text":"data frame containing calculated segment differences.","code":""},{"path":"/reference/calculate_performance.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate All Performance Metrics — calculate_performance","title":"Calculate All Performance Metrics — calculate_performance","text":"function calculates various performance metrics given simulation observed data.","code":""},{"path":"/reference/calculate_performance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate All Performance Metrics — calculate_performance","text":"","code":"calculate_performance(   sim,   obs,   par_name = NULL,   perf_metrics = NULL,   period = NULL,   fn_summarize = \"mean\" )"},{"path":"/reference/calculate_performance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate All Performance Metrics — calculate_performance","text":"sim Object SWATrunR obs Dataframe observed data two columns: date value. par_name (optional) Character name parameter set used. Default par_name = NULL, select first variable sim object. multiple parameter sets, can use argument select one want use. Example par_name = \"flo_day\" par_name = no3_day_conc\". perf_metrics (optional) Character vector names performance metrics used rank_tot calculation. Default perf_metrics = NULL, means performance metrics used calculation. example perf_metrics = c(\"kge\", \"nse\"), means KGE NSE used calculation. period (optional) Character describing, time interval display. Default period = NULL, mean activated, examples \"day\", \"week\", \"month\", etc). See lubridate::floor_date details. fn_summarize (optional) Function recalculate specified time interval. Default fn_summarize =\"mean\", examples \"median\", \"sum\". See dplyr::summarise details.","code":""},{"path":"/reference/calculate_performance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate All Performance Metrics — calculate_performance","text":"dataframe performance metrics ranking.","code":""},{"path":[]},{"path":"/reference/calculate_performance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate All Performance Metrics — calculate_performance","text":"","code":"if (FALSE) { obj_tbl <- calculate_performance(sim = sim_flow, obs, \"flo_day\", c(\"kge\", \"nse\"), \"month\", \"sum\") }"},{"path":"/reference/calculate_performance_2plus.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Performance Metrics for 2 of more variables — calculate_performance_2plus","title":"Calculate Performance Metrics for 2 of more variables — calculate_performance_2plus","text":"function calculates various performance metrics two variables given simulation observed data.","code":""},{"path":"/reference/calculate_performance_2plus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Performance Metrics for 2 of more variables — calculate_performance_2plus","text":"","code":"calculate_performance_2plus(   sim,   vector_var,   list_obs,   list_periods = NULL,   vector_weights = NULL,   perf_metrics = NULL )"},{"path":"/reference/calculate_performance_2plus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Performance Metrics for 2 of more variables — calculate_performance_2plus","text":"sim Object SWATrunR vector_var Character vector variables used performance metric calculation. present sim object. Example vector_var = c(\"flo_day_52\", \"no3_day_52_conc\", \"gwd_day\"). rest parameters provided sequence variables vector. list_obs List dataframes observed data two columns: 'date', 'value'. list_periods (optional) List two-element character vectors start end dates period used performance metric calculation variable. Default list_periods = NULL, means full observation data periods used. Example list_periods = list(c('2002-01-01', '2011-12-26'), c('2007-01-01', '2008-12-26'), c('2007-01-01', '2011-12-26')) vector_weights (optional) Numeric vector weights variable vector_var. Default vector_weights = NULL, means variables impact final results . vector_weights = c(0.5, 0.3, 0.2). sum weights 1. perf_metrics (optional) Character vector names performance metrics used rank_tot calculation. Default perf_metrics = NULL, means (case c(\"nse\", \"kge\", \"pbias\", \"r2\", \"mae\")) performance metrics used calculation. example perf_metrics = c(\"kge\", \"nse\"), means KGE NSE used calculation.","code":""},{"path":"/reference/calculate_performance_2plus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Performance Metrics for 2 of more variables — calculate_performance_2plus","text":"list two objects. One list 'obj_tbl_list' storage performance metrics variable. Another, 'obj_tbl' dataframe aggregated results variables. dataframe final ranking run ids/","code":""},{"path":[]},{"path":"/reference/calculate_performance_2plus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Performance Metrics for 2 of more variables — calculate_performance_2plus","text":"","code":"if (FALSE) { obj_tbl_m <- calculate_performance_2plus(sim,   vector_var = c(\"flo_day_52\",  \"no3_day_52_conc\", \"gwd_day\"),   list_obs = list(obs_flow, obs_no3, obs_gwd),   list_periods = list(c('2002-01-01', '2011-12-26'),     NULL, c('2007-01-01', '2011-12-26')),   vector_weights = c(0.5, 0.3, 0.2),   perf_metrics = c(\"nse\", \"kge\", \"pbias\", \"r2\", \"mae\")) }"},{"path":"/reference/calculate_wyr.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Water Yield Ratio (WYR) — calculate_wyr","title":"Calculate Water Yield Ratio (WYR) — calculate_wyr","text":"function calculates Water Yield Ratio (WYR) based various components simulation, including precipitation, surface runoff, lateral flow, others. aggregates components computes ratio sum water yields precipitation.","code":""},{"path":"/reference/calculate_wyr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Water Yield Ratio (WYR) — calculate_wyr","text":"","code":"calculate_wyr(sim)"},{"path":"/reference/calculate_wyr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Water Yield Ratio (WYR) — calculate_wyr","text":"sim SWATrunR nested list containing simulation data. named element 'simulation' contains named elements: 'precip', 'surq_cha', 'surq_res', 'latq_cha', 'latq_res', 'qtile', 'flo'.","code":""},{"path":"/reference/calculate_wyr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Water Yield Ratio (WYR) — calculate_wyr","text":"numeric value representing Water Yield Ratio (WYR).","code":""},{"path":"/reference/calculate_wyr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Water Yield Ratio (WYR) — calculate_wyr","text":"","code":"if (FALSE) { # Calculate WYR wyr <- calculate_wyr(sim) }"},{"path":"/reference/copy_file_version.html","id":null,"dir":"Reference","previous_headings":"","what":"Copy a file with an optional version suffix. — copy_file_version","title":"Copy a file with an optional version suffix. — copy_file_version","text":"function copies file one location another, optional version suffix appended filename.","code":""},{"path":"/reference/copy_file_version.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Copy a file with an optional version suffix. — copy_file_version","text":"","code":"copy_file_version(model_path, file_name, file_version = NULL)"},{"path":"/reference/copy_file_version.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Copy a file with an optional version suffix. — copy_file_version","text":"model_path path directory containing file. file_name name file copied. file_version optional version suffix appended filename. Default file_version = NULL, adds '.bkp' filename.","code":""},{"path":"/reference/copy_file_version.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Copy a file with an optional version suffix. — copy_file_version","text":"None","code":""},{"path":"/reference/cuts_to_rect.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Cuts to Rectangle Coordinates — cuts_to_rect","title":"Convert Cuts to Rectangle Coordinates — cuts_to_rect","text":"function converts cut labels rectangle coordinates.","code":""},{"path":"/reference/cuts_to_rect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Cuts to Rectangle Coordinates — cuts_to_rect","text":"","code":"cuts_to_rect(lbl)"},{"path":"/reference/cuts_to_rect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Cuts to Rectangle Coordinates — cuts_to_rect","text":"lbl character vector cut labels.","code":""},{"path":"/reference/cuts_to_rect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Cuts to Rectangle Coordinates — cuts_to_rect","text":"data frame containing rectangle coordinates.","code":""},{"path":"/reference/dotty_fig.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a dotty plot — dotty_fig","title":"Make a dotty plot — dotty_fig","text":"Make dotty plot","code":""},{"path":"/reference/dotty_fig.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a dotty plot — dotty_fig","text":"","code":"dotty_fig(sim_yield, yld_obs = NULL)"},{"path":"/reference/dotty_fig.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a dotty plot — dotty_fig","text":"sim_yield dataframe yield data yield (optional) mean yield values crop. Default yield = NULL. yield_min (optional) minimum observed yield values crop. Default yield_min = NULL. yield_max (optional) maximum observed yield values crop. Default yield_max = NULL.","code":""},{"path":"/reference/dotty_fig.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a dotty plot — dotty_fig","text":"ggplot object dotty plot","code":""},{"path":"/reference/dotty_fig.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a dotty plot — dotty_fig","text":"","code":"if (FALSE) { dotty_fig(sim_yield) }"},{"path":"/reference/evaluate_expression.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate the expression defined for a variable in 'output' — evaluate_expression","title":"Evaluate the expression defined for a variable in 'output' — evaluate_expression","text":"Evaluate expression defined variable 'output'","code":""},{"path":"/reference/evaluate_expression.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate the expression defined for a variable in 'output' — evaluate_expression","text":"","code":"evaluate_expression(table, expr)"},{"path":"/reference/evaluate_expression.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate the expression defined for a variable in 'output' — evaluate_expression","text":"table Table dplyr expression applied expr Expression applied table","code":""},{"path":"/reference/find_par_range.html","id":null,"dir":"Reference","previous_headings":"","what":"Find Parameter Range for Simulation — find_par_range","title":"Find Parameter Range for Simulation — find_par_range","text":"function identifies range parameter values produce simulation results within specified relative range target objective value. also returns parameter value minimizes absolute error relative objective.","code":""},{"path":"/reference/find_par_range.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find Parameter Range for Simulation — find_par_range","text":"","code":"find_par_range(par, sim, obj, rel_rng)"},{"path":"/reference/find_par_range.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find Parameter Range for Simulation — find_par_range","text":"par numeric vector parameter values. sim numeric vector simulation results corresponding parameter values. obj numeric value representing objective value compare . rel_rng numeric value specifying relative range acceptable error.","code":""},{"path":"/reference/find_par_range.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find Parameter Range for Simulation — find_par_range","text":"list following components: par_rng numeric vector length 2 containing minimum maximum parameter values within specified relative range objective. par_val numeric value parameter minimizes absolute error relative objective. x numeric vector interpolated parameter values. y numeric vector interpolated simulation results corresponding x.","code":""},{"path":"/reference/find_par_range.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find Parameter Range for Simulation — find_par_range","text":"","code":"if (FALSE) { find_par_range(sim[[1]], calculate_wyr(sim), 0.27, 0.05) }"},{"path":"/reference/fix_dates.html","id":null,"dir":"Reference","previous_headings":"","what":"Fix the dates — fix_dates","title":"Fix the dates — fix_dates","text":"Adjust periods observation simulation data match.","code":""},{"path":"/reference/fix_dates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fix the dates — fix_dates","text":"","code":"fix_dates(runr_obj, obs_obj, trim_start = NULL, trim_end = NULL)"},{"path":"/reference/fix_dates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fix the dates — fix_dates","text":"runr_obj SWATrunR object obs_obj Observation dataframe two columns named \"date\" \"value\" trim_start (optional) starting date trim data times series. Default trim_start = NULL. Example: trim_start = \"2010-01-01\" trim_end (optional) ending date trim data times series. Default trim_end = NULL. Example trim_end = \"2015-01-01\"","code":""},{"path":"/reference/fix_dates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fix the dates — fix_dates","text":"list two elements: \"simulation\" SWATrunR object \"observation\" dataframe dates period.","code":""},{"path":"/reference/fix_dates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fix the dates — fix_dates","text":"","code":"if (FALSE) { my_obj <- fix_dates(runr_obj = sim_flow, obs_obj = obs_wq, trim_start = \"2010-01-01\", trim_end = \"2015-01-01\") }"},{"path":"/reference/format_swatplus_parameter.html","id":null,"dir":"Reference","previous_headings":"","what":"Translate the parameter inputs into a parameter input table and a separarate\r\ntable providing the file constraints and the filter expressions for the\r\nrespective parameter — format_swatplus_parameter","title":"Translate the parameter inputs into a parameter input table and a separarate\r\ntable providing the file constraints and the filter expressions for the\r\nrespective parameter — format_swatplus_parameter","text":"Translate parameter inputs parameter input table separarate table providing file constraints filter expressions respective parameter","code":""},{"path":"/reference/format_swatplus_parameter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Translate the parameter inputs into a parameter input table and a separarate\r\ntable providing the file constraints and the filter expressions for the\r\nrespective parameter — format_swatplus_parameter","text":"","code":"format_swatplus_parameter(parameter)"},{"path":"/reference/format_swatplus_parameter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Translate the parameter inputs into a parameter input table and a separarate\r\ntable providing the file constraints and the filter expressions for the\r\nrespective parameter — format_swatplus_parameter","text":"parameter Model parameters named vector tibble","code":""},{"path":"/reference/get_conc.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate concentrations — get_conc","title":"Calculate concentrations — get_conc","text":"function calculates concentrations based simulated data, adjusting specified parameters.","code":""},{"path":"/reference/get_conc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate concentrations — get_conc","text":"","code":"get_conc(sim, not_conc = \"^flo_day|^gwd\", sediment = \"^sed_\")"},{"path":"/reference/get_conc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate concentrations — get_conc","text":"sim simulation object containing data. not_conc (optional) Regular expression pattern variables considered concentration calculation. Default not_conc = '^flo_day|^gwd'. sediment (optional) Regular expression pattern sediment variables. Default sediment = '^sed_'.","code":""},{"path":"/reference/get_conc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate concentrations — get_conc","text":"modified simulation object added concentration variables.","code":""},{"path":"/reference/get_conc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate concentrations — get_conc","text":"","code":"if (FALSE) { # Example usage: sim_data <- get_conc(sim_data) }"},{"path":"/reference/get_sol_texture.html","id":null,"dir":"Reference","previous_headings":"","what":"Acquire the object indices of from the respective object file. — get_sol_texture","title":"Acquire the object indices of from the respective object file. — get_sol_texture","text":"Acquire object indices respective object file.","code":""},{"path":"/reference/get_sol_texture.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Acquire the object indices of from the respective object file. — get_sol_texture","text":"","code":"get_sol_texture(file)"},{"path":"/reference/get_sol_texture.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Acquire the object indices of from the respective object file. — get_sol_texture","text":"file Path object file","code":""},{"path":"/reference/get_tbl_column.html","id":null,"dir":"Reference","previous_headings":"","what":"Acquire the object indices of from the respective object file. — get_tbl_column","title":"Acquire the object indices of from the respective object file. — get_tbl_column","text":"Acquire object indices respective object file.","code":""},{"path":"/reference/get_tbl_column.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Acquire the object indices of from the respective object file. — get_tbl_column","text":"","code":"get_tbl_column(file, col_i)"},{"path":"/reference/get_tbl_column.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Acquire the object indices of from the respective object file. — get_tbl_column","text":"file Path object file","code":""},{"path":"/reference/get_value_range.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the value range from a condition in the par_def table — get_value_range","title":"Get the value range from a condition in the par_def table — get_value_range","text":"Get value range condition par_def table","code":""},{"path":"/reference/get_value_range.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the value range from a condition in the par_def table — get_value_range","text":"","code":"get_value_range(condition)"},{"path":"/reference/get_value_range.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the value range from a condition in the par_def table — get_value_range","text":"condition Character string defines condition","code":""},{"path":"/reference/grapes-.-grapes.html","id":null,"dir":"Reference","previous_headings":"","what":"Concatenate with a dot — %.%","title":"Concatenate with a dot — %.%","text":"\\","code":""},{"path":"/reference/grapes-.-grapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Concatenate with a dot — %.%","text":"","code":"a %.% b"},{"path":"/reference/grapes-_-grapes.html","id":null,"dir":"Reference","previous_headings":"","what":"Concatenate with an underscore — %_%","title":"Concatenate with an underscore — %_%","text":"\\","code":""},{"path":"/reference/grapes-_-grapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Concatenate with an underscore — %_%","text":"","code":"a %_% b"},{"path":"/reference/grapes-and-and-grapes.html","id":null,"dir":"Reference","previous_headings":"","what":"Concatenate with space — %&&%","title":"Concatenate with space — %&&%","text":"\\","code":""},{"path":"/reference/grapes-and-and-grapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Concatenate with space — %&&%","text":"","code":"a %&&% b"},{"path":"/reference/grapes-and-grapes.html","id":null,"dir":"Reference","previous_headings":"","what":"Concatenate without separator — %&%","title":"Concatenate without separator — %&%","text":"\\","code":""},{"path":"/reference/grapes-and-grapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Concatenate without separator — %&%","text":"","code":"a %&% b"},{"path":"/reference/grapes-slash-slash-grapes.html","id":null,"dir":"Reference","previous_headings":"","what":"Paste slash function — %//%","title":"Paste slash function — %//%","text":"\\","code":""},{"path":"/reference/grapes-slash-slash-grapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Paste slash function — %//%","text":"","code":"a %//% b"},{"path":"/reference/group_values.html","id":null,"dir":"Reference","previous_headings":"","what":"ID Grouping Functions for Parameter Names — group_values","title":"ID Grouping Functions for Parameter Names — group_values","text":"function groups values parameter names, sorting concatenating numeric sequences handling non-numeric values appropriately.","code":""},{"path":"/reference/group_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ID Grouping Functions for Parameter Names — group_values","text":"","code":"group_values(vals, sep = \":\", n_trunc = Inf)"},{"path":"/reference/group_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ID Grouping Functions for Parameter Names — group_values","text":"vals vector values grouped. Can numeric character. sep (optional) string separator use ranges numeric values. Default sep = ':'. n_trunc (optional) integer specifying maximum number elements include output. Default sep = Inf, means truncation.","code":""},{"path":"/reference/group_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ID Grouping Functions for Parameter Names — group_values","text":"string grouped values. numeric inputs, ranges collapsed separated specified separator. Non-numeric inputs concatenated ', '. values NA, empty string returned.","code":""},{"path":"/reference/hello.html","id":null,"dir":"Reference","previous_headings":"","what":"Hello, World! — hello","title":"Hello, World! — hello","text":"Prints 'Hello, world!'.","code":""},{"path":"/reference/hello.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hello, World! — hello","text":"","code":"hello()"},{"path":"/reference/hello.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hello, World! — hello","text":"","code":"hello() #> Error in hello(): could not find function \"hello\""},{"path":"/reference/id_text_strings.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate ID Text Strings for Parameter Names — id_text_strings","title":"Generate ID Text Strings for Parameter Names — id_text_strings","text":"function generates ID text strings included parameter names based parameter groups hydrology data.","code":""},{"path":"/reference/id_text_strings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate ID Text Strings for Parameter Names — id_text_strings","text":"","code":"id_text_strings(par, par_groups, hyd)"},{"path":"/reference/id_text_strings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate ID Text Strings for Parameter Names — id_text_strings","text":"par character vector specifying parameter name. Example 'perco'. par_groups vector groups identified based parameter value. Example: init_perco <- c(low = 0.01, mod = 0.50, high = 0.95) hyd data frame containing 'hydrology.hyd' data.","code":""},{"path":"/reference/id_text_strings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate ID Text Strings for Parameter Names — id_text_strings","text":"vector HRU ID text strings separated groups according provided values.","code":""},{"path":"/reference/id_text_strings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate ID Text Strings for Parameter Names — id_text_strings","text":"","code":"if (FALSE) { hyd_hyd <- read_tbl(paste0(model_path, '/hydrology.hyd')) init_perco <- c(low = 0.01, mod = 0.50, high = 0.95) id_text_strings('perco', init_perco, hyd_hyd) }"},{"path":"/reference/identify_sequence.html","id":null,"dir":"Reference","previous_headings":"","what":"Group sequences of units together for writing the OBJ columns in calibration.cal — identify_sequence","title":"Group sequences of units together for writing the OBJ columns in calibration.cal — identify_sequence","text":"Group sequences units together writing OBJ columns calibration.cal","code":""},{"path":"/reference/identify_sequence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Group sequences of units together for writing the OBJ columns in calibration.cal — identify_sequence","text":"","code":"identify_sequence(val)"},{"path":"/reference/identify_sequence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Group sequences of units together for writing the OBJ columns in calibration.cal — identify_sequence","text":"val Numeric vector unit values","code":""},{"path":"/reference/init_cal.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize the calibration.cal table — init_cal","title":"Initialize the calibration.cal table — init_cal","text":"Initialize calibration.cal table","code":""},{"path":"/reference/init_cal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize the calibration.cal table — init_cal","text":"","code":"init_cal(par_def)"},{"path":"/reference/init_cal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize the calibration.cal table — init_cal","text":"par_def Tibble one line includes parameter definition parameter ","code":""},{"path":"/reference/paste_runs.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine Start and End Values into a Range String — paste_runs","title":"Combine Start and End Values into a Range String — paste_runs","text":"function creates string representation range combining start end values. start end values , returns single value string. Otherwise, concatenates separator.","code":""},{"path":"/reference/paste_runs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine Start and End Values into a Range String — paste_runs","text":"","code":"paste_runs(strt, end, sep)  paste_runs(strt, end, sep)"},{"path":"/reference/paste_runs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine Start and End Values into a Range String — paste_runs","text":"strt Numeric start value sequence end Numeric end value sequence sep string separator use start end values. Default ':'.","code":""},{"path":"/reference/paste_runs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine Start and End Values into a Range String — paste_runs","text":"string representing range. start end values , single value returned. Otherwise, start end values concatenated specified separator.","code":""},{"path":"/reference/plot_calval_comparison.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Calibration-Validation Comparison — plot_calval_comparison","title":"Plot Calibration-Validation Comparison — plot_calval_comparison","text":"function takes calibration validation tables produces comparison boxplot various metrics.","code":""},{"path":"/reference/plot_calval_comparison.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Calibration-Validation Comparison — plot_calval_comparison","text":"","code":"plot_calval_comparison(cal_tbl, val_tbl, indexes = NULL)"},{"path":"/reference/plot_calval_comparison.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Calibration-Validation Comparison — plot_calval_comparison","text":"cal_tbl data frame containing calibration performance results. val_tbl data frame containing validation performance results. indexes (optional) optional vector metric names filter include comparison plot. Default indexes = NULL includes metrics.","code":""},{"path":"/reference/plot_calval_comparison.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Calibration-Validation Comparison — plot_calval_comparison","text":"ggplot object representing comparison calibration validation results specified metrics.","code":""},{"path":[]},{"path":"/reference/plot_calval_comparison.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Calibration-Validation Comparison — plot_calval_comparison","text":"","code":"if (FALSE) { plot_calval_comparison(obj_tbl_cal, obj_tbl_val, indexes = c(\"nse\", \"pbias\")) }"},{"path":"/reference/plot_dotty.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Dotty — plot_dotty","title":"Plot Dotty — plot_dotty","text":"function creates dotty plot visualize relationship parameter values performance results.","code":""},{"path":"/reference/plot_dotty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Dotty — plot_dotty","text":"","code":"plot_dotty(   par,   var,   y_label = \"y\",   n_col = 3,   y_lim = NULL,   y_inter = NULL,   trend = FALSE,   run_ids = NULL,   low_up = FALSE )"},{"path":"/reference/plot_dotty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Dotty — plot_dotty","text":"par data frame model parameter values simulation. var model performance result vector list vectors plotted parameter values. y_label (optional) Labels y-axis, either single label vector corresponding variable var list. Default y_label = 'y'. n_col (optional) Number columns facet grid. Default n_col = 3. y_lim (optional) Limits y-axis. Default y_lim = NULL. y_inter (optional) Y-axis intercept value. Default y_inter = NULL. trend (optional) Logical, indicating whether add trend line. Default trend = FALSE. run_ids (optional) numeric vector run IDs highlighted plot. Default run_ids = NULL. low_up (optional) Logical, TRUE whole possible parameter range used x axis. Default low_up = FALSE.","code":""},{"path":"/reference/plot_dotty.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Dotty — plot_dotty","text":"ggplot object representing dotty plot.","code":""},{"path":"/reference/plot_dotty.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Dotty — plot_dotty","text":"","code":"if (FALSE) { # plot_dotty(my_data, 'performance', y_label = 'y_label') }"},{"path":"/reference/plot_dotty_yields.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Dotty Yields — plot_dotty_yields","title":"Plot Dotty Yields — plot_dotty_yields","text":"function creates dotty plots simulated yields, comparing observed yields (available).","code":""},{"path":"/reference/plot_dotty_yields.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Dotty Yields — plot_dotty_yields","text":"","code":"plot_dotty_yields(sim_result, yield_obs = NULL)"},{"path":"/reference/plot_dotty_yields.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Dotty Yields — plot_dotty_yields","text":"sim_result simulation results containing yield data. yield_obs (optional) Data.frame observed min, max, mean yield values crop. Default yield = NULL.","code":""},{"path":"/reference/plot_dotty_yields.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Dotty Yields — plot_dotty_yields","text":"combined ggplot object showing dottty plots 4 parameters.","code":""},{"path":"/reference/plot_dotty_yields.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Dotty Yields — plot_dotty_yields","text":"","code":"if (FALSE) { plot_phu_yld_bms(ylds_phu_dmat, dmat_chg, yield_mean, yield_min, yield_max) }"},{"path":"/reference/plot_esco_range.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot ESCO Range — plot_esco_range","title":"Plot ESCO Range — plot_esco_range","text":"function creates ggplot visualization ESCO range data, highlighting specific values limits horizontal vertical lines.","code":""},{"path":"/reference/plot_esco_range.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot ESCO Range — plot_esco_range","text":"","code":"plot_esco_range(sim, obs_wy_ratio, rel_wyr_lim = 0.05)"},{"path":"/reference/plot_esco_range.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot ESCO Range — plot_esco_range","text":"sim simulation results water balance data. Including: precip Variable 'basin_wb_day' output file. surq_cha Variable 'basin_wb_day' output file. surq_res Variable 'basin_wb_day' output file. latq_cha Variable 'basin_wb_day' output file. latq_res Variable 'basin_wb_day' output file. qtile Variable 'basin_wb_day' output file. flo Variable ''basin_aqu_day' output file. obs_wy_ratio numeric value representing observed water yield ratio. rel_wyr_lim numeric value specifying relative range acceptable error.","code":""},{"path":"/reference/plot_esco_range.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot ESCO Range — plot_esco_range","text":"ggplot object.","code":""},{"path":"/reference/plot_esco_range.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot ESCO Range — plot_esco_range","text":"","code":"if (FALSE) { plot_esco_range(sim_esco, obs_wy_ratio) }"},{"path":"/reference/plot_oat.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to plot OAT (One-At-A-Time) analysis results — plot_oat","title":"Function to plot OAT (One-At-A-Time) analysis results — plot_oat","text":"function generates interactive dygraph visualize results OAT analysis, comparing simulated data observed data provided.","code":""},{"path":"/reference/plot_oat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to plot OAT (One-At-A-Time) analysis results — plot_oat","text":"","code":"plot_oat(sim, obs = NULL, variable, round_values = 3)"},{"path":"/reference/plot_oat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to plot OAT (One-At-A-Time) analysis results — plot_oat","text":"sim Object containing simulation data SWATrunR. obs Optional dataframe observed data columns 'date' 'value'. Default NULL. variable Name variable OAT analysis results plotted. round_values Number decimal places round parameter values. Default 3.","code":""},{"path":"/reference/plot_oat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to plot OAT (One-At-A-Time) analysis results — plot_oat","text":"dygraph object showing OAT analysis results.","code":""},{"path":[]},{"path":"/reference/plot_oat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to plot OAT (One-At-A-Time) analysis results — plot_oat","text":"","code":"if (FALSE) { plot_oat(sim_oat, obs = obs_data, variable = 'flo_day', round_values = 2) }"},{"path":"/reference/plot_parameter_identifiability.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Parameter Identifiability — plot_parameter_identifiability","title":"Plot Parameter Identifiability — plot_parameter_identifiability","text":"function creates plot visualize identifiability parameters based objective functions.","code":""},{"path":"/reference/plot_parameter_identifiability.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Parameter Identifiability — plot_parameter_identifiability","text":"","code":"plot_parameter_identifiability(parameters, objectives, run_fraction = NULL)"},{"path":"/reference/plot_parameter_identifiability.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Parameter Identifiability — plot_parameter_identifiability","text":"parameters vector parameter names. objectives list objective functions, represented numeric vector. run_fraction (optional) numeric value representing fraction runs consider threshold calculation. Default run_fraction = NULL, defines parameter according method provided function.","code":""},{"path":"/reference/plot_parameter_identifiability.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Parameter Identifiability — plot_parameter_identifiability","text":"ggplot object visualizing identifiability parameters.","code":""},{"path":"/reference/plot_phu_yld_bms.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot PHU, yield, and biomass over days to maturity — plot_phu_yld_bms","title":"Plot PHU, yield, and biomass over days to maturity — plot_phu_yld_bms","text":"function generates boxplots visualize Plant Heat Units (PHU) fractions, yields, biomass changes days maturity.","code":""},{"path":"/reference/plot_phu_yld_bms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot PHU, yield, and biomass over days to maturity — plot_phu_yld_bms","text":"","code":"plot_phu_yld_bms(sim_result, yield_obs = NULL, bar_width = 0.5)"},{"path":"/reference/plot_phu_yld_bms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot PHU, yield, and biomass over days to maturity — plot_phu_yld_bms","text":"sim_result simulation results containing PHU, yield, biomass data. yield_obs (optional) Data.frame observed min, max, mean yield values crop. Default yield = NULL. bar_width (optional) Value 0 1 controls width box boxplot. Default bar_width = 0.5.","code":""},{"path":"/reference/plot_phu_yld_bms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot PHU, yield, and biomass over days to maturity — plot_phu_yld_bms","text":"combined ggplot object showing boxplots PHU fractions, yields, biomass.","code":""},{"path":"/reference/plot_selected_sim.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot interactive time series of simulation results — plot_selected_sim","title":"Plot interactive time series of simulation results — plot_selected_sim","text":"function plots interactive time series comparing simulated data observed data.","code":""},{"path":"/reference/plot_selected_sim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot interactive time series of simulation results — plot_selected_sim","text":"","code":"plot_selected_sim(   sim,   obs = NULL,   par_name = NULL,   run_ids = NULL,   run_sel = NULL,   plot_bands = TRUE,   period = NULL,   fn_summarize = \"mean\",   x_label = \"Date\",   y_label = \"Discharge (m<sup>3<\/sup> s<sup>-1<\/sup>)\" )"},{"path":"/reference/plot_selected_sim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot interactive time series of simulation results — plot_selected_sim","text":"sim Object SWATrunR. obs (optional) Dataframe observed data columns 'date' 'value'. Default obs = NULL, simulation data available. par_name (optional) Name parameter set use. Default par_name = NULL uses first variable sim object. multiple parameter sets, specify one use, e.g., par_name = \"flo_day\" par_name = \"no3_day_conc\". run_ids (optional) Character vector run IDs plot. Default run_ids = NULL requires input run_sel. run_sel (optional) Character vector run IDs emphasize plot. Default run_sel = NULL requires input run_ids. plot_bands (optional) Logical. TRUE, includes lower upper bands results. Default plot_bands = TRUE. period (optional) Character defining time step aggregation. Options include \"day\", \"week\", \"month\", \"year\", etc. Use \"average monthly\" multi-annual monthly values. Default period = NULL provides aggregation. See lubridate::floor_date details. fn_summarize Function summarize time intervals. Default fn_summarize =\"mean\", examples \"median\", \"sum\". See dplyr::summarise details. x_label (optional) Character x axis label. Default x_label = \"Date\". y_label (optional) Character y axis label. Default y_label = \"Discharge (m³/s)\".","code":""},{"path":"/reference/plot_selected_sim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot interactive time series of simulation results — plot_selected_sim","text":"Interactive plot simulated observed data.","code":""},{"path":"/reference/plot_selected_sim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot interactive time series of simulation results — plot_selected_sim","text":"","code":"if (FALSE) { plot_selected_sim(sim_flow, obs = obs, run_sel = c(95), run_ids = run_sel_ids, period = \"average monthly\", plot_bands = TRUE) }"},{"path":"/reference/read_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a SWAT+ input file which has a tabular structure. — read_tbl","title":"Read a SWAT+ input file which has a tabular structure. — read_tbl","text":"function reads SWAT+ input file tabular structure tibble.","code":""},{"path":"/reference/read_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a SWAT+ input file which has a tabular structure. — read_tbl","text":"","code":"read_tbl(file_path, col_names = NULL, n_skip = 1)"},{"path":"/reference/read_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a SWAT+ input file which has a tabular structure. — read_tbl","text":"file_path Path SWAT+ input file. col_names (optional) character vector specifying column names. provided, column names inferred file. Default col_names = NULL. n_skip (optional) Number header rows skip. Default n_skip = 1.","code":""},{"path":"/reference/read_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a SWAT+ input file which has a tabular structure. — read_tbl","text":"tibble representing SWAT+ input file.","code":""},{"path":"/reference/read_unit_conditions.html","id":null,"dir":"Reference","previous_headings":"","what":"Read the unit numbers (for hru, aqu, cha, res) and the textures etc for later\r\nparameter conditioning. — read_unit_conditions","title":"Read the unit numbers (for hru, aqu, cha, res) and the textures etc for later\r\nparameter conditioning. — read_unit_conditions","text":"Read unit numbers (hru, aqu, cha, res) textures etc later parameter conditioning.","code":""},{"path":"/reference/read_unit_conditions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read the unit numbers (for hru, aqu, cha, res) and the textures etc for later\r\nparameter conditioning. — read_unit_conditions","text":"","code":"read_unit_conditions(project_path, parameter)"},{"path":"/reference/read_unit_conditions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read the unit numbers (for hru, aqu, cha, res) and the textures etc for later\r\nparameter conditioning. — read_unit_conditions","text":"project_path Path SWAT+ project","code":""},{"path":"/reference/remove_dummy.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove the generated dummy column that was required for the col bind — remove_dummy","title":"Remove the generated dummy column that was required for the col bind — remove_dummy","text":"Remove generated dummy column required col bind","code":""},{"path":"/reference/remove_dummy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove the generated dummy column that was required for the col bind — remove_dummy","text":"","code":"remove_dummy(tbl)"},{"path":"/reference/remove_dummy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove the generated dummy column that was required for the col bind — remove_dummy","text":"tbl Tibble","code":""},{"path":"/reference/remove_unsuccesful_runs.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove Unsuccessful Runs from Simulation — remove_unsuccesful_runs","title":"Remove Unsuccessful Runs from Simulation — remove_unsuccesful_runs","text":"function removes unsuccessful runs simulation parameter set ensure analyses performed parameter combinations corresponding simulation results.","code":""},{"path":"/reference/remove_unsuccesful_runs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove Unsuccessful Runs from Simulation — remove_unsuccesful_runs","text":"","code":"remove_unsuccesful_runs(sim)"},{"path":"/reference/remove_unsuccesful_runs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove Unsuccessful Runs from Simulation — remove_unsuccesful_runs","text":"sim SWATrunR nested list containing simulation data. : simulation parameter. simulation: list first element contains results simulation runs. parameter: list element values data frame containing parameter sets used simulation.","code":""},{"path":"/reference/remove_unsuccesful_runs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove Unsuccessful Runs from Simulation — remove_unsuccesful_runs","text":"modified version input sim list, parameter$values element containing parameter sets simulation results available.","code":""},{"path":"/reference/remove_unsuccesful_runs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove Unsuccessful Runs from Simulation — remove_unsuccesful_runs","text":"","code":"if (FALSE) { sim_flow_full <- remove_unsuccesful_runs(sim_flow_full_bck) }"},{"path":"/reference/replace_closest_value.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace Closest Value in Sequence — replace_closest_value","title":"Replace Closest Value in Sequence — replace_closest_value","text":"Replaces closest value sequence specified value.","code":""},{"path":"/reference/replace_closest_value.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace Closest Value in Sequence — replace_closest_value","text":"","code":"replace_closest_value(val_seq, x)"},{"path":"/reference/replace_closest_value.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replace Closest Value in Sequence — replace_closest_value","text":"val_seq numeric vector representing sequence values. x numeric value find closest match sequence.","code":""},{"path":"/reference/replace_closest_value.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replace Closest Value in Sequence — replace_closest_value","text":"numeric vector closest value replaced x.","code":""},{"path":"/reference/replace_col_by_sequence.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace Column by Sequence — replace_col_by_sequence","title":"Replace Column by Sequence — replace_col_by_sequence","text":"Replaces specified column table sequence values.","code":""},{"path":"/reference/replace_col_by_sequence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace Column by Sequence — replace_col_by_sequence","text":"","code":"replace_col_by_sequence(tbl, val_seq, i)"},{"path":"/reference/replace_col_by_sequence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replace Column by Sequence — replace_col_by_sequence","text":"tbl data frame matrix. val_seq numeric vector representing sequence values. integer indicating index column replaced.","code":""},{"path":"/reference/replace_col_by_sequence.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replace Column by Sequence — replace_col_by_sequence","text":"modified data frame matrix specified column replaced val_seq.","code":""},{"path":"/reference/rsr_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate RSR for Dataframe Segments — rsr_df","title":"Calculate RSR for Dataframe Segments — rsr_df","text":"function calculates RSR values different segments data.","code":""},{"path":"/reference/rsr_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate RSR for Dataframe Segments — rsr_df","text":"","code":"rsr_df(df_sim, v_obs)"},{"path":"/reference/rsr_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate RSR for Dataframe Segments — rsr_df","text":"df_sim dataframe simulated values. v_obs dataframe observed values.","code":""},{"path":"/reference/rsr_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate RSR for Dataframe Segments — rsr_df","text":"numeric vector RSR values segment.","code":""},{"path":"/reference/rsr_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate RSR for Dataframe Segments — rsr_df","text":"","code":"if (FALSE) { rsr_values <- rsr_df(df_sim, v_obs) }"},{"path":"/reference/sample_lhs.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample parameters with Latin Hypercube Sampling (LHS) — sample_lhs","title":"Sample parameters with Latin Hypercube Sampling (LHS) — sample_lhs","text":"function samples parameter space using Latin Hypercube Sampling (LHS).","code":""},{"path":"/reference/sample_lhs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample parameters with Latin Hypercube Sampling (LHS) — sample_lhs","text":"","code":"sample_lhs(par, n)"},{"path":"/reference/sample_lhs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample parameters with Latin Hypercube Sampling (LHS) — sample_lhs","text":"par matrix data frame specifying parameter ranges. n number samples generate.","code":""},{"path":"/reference/sample_lhs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample parameters with Latin Hypercube Sampling (LHS) — sample_lhs","text":"tibble containing sampled parameter values.","code":""},{"path":"/reference/sample_lhs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample parameters with Latin Hypercube Sampling (LHS) — sample_lhs","text":"","code":"# Define parameter ranges parameters <- data.frame(   param1 = c(0, 1),   param2 = c(0, 2),   param3 = c(0, 10) )  # Sample the parameter space sample_space <- sample_lhs(parameters, 3) sample_space #> # A tibble: 3 × 3 #>   param1 param2 param3 #>    <dbl>  <dbl>  <dbl> #> 1  0.235 1.67     5.99 #> 2  0.961 0.719    9.64 #> 3  0.421 0.0631   1.70"},{"path":"/reference/sample_oat.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample parameter values one-at-a-time (OAT) — sample_oat","title":"Sample parameter values one-at-a-time (OAT) — sample_oat","text":"Generates set OAT (One---Time) samples based provided parameter centers boundaries.","code":""},{"path":"/reference/sample_oat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample parameter values one-at-a-time (OAT) — sample_oat","text":"","code":"sample_oat(par, par_center = 1, n_t = 10)"},{"path":"/reference/sample_oat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample parameter values one-at-a-time (OAT) — sample_oat","text":"par matrix data frame specifying parameter ranges. element length 2 indicating min max values. par_center (optional) data frame matrix parameter centers. Default par_center = 1. n_t (optional) integer specifying parameter combination around, want OAT analysis. Default n_t = 10.","code":""},{"path":"/reference/sample_oat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample parameter values one-at-a-time (OAT) — sample_oat","text":"data frame containing OAT samples.","code":""},{"path":[]},{"path":"/reference/sample_oat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample parameter values one-at-a-time (OAT) — sample_oat","text":"","code":"if (FALSE) { # Define parameter ranges par <- data.frame(\"snomelt_tmp.hru | change = absval\" = c(-1, 1),                  \"snofall_tmp.hru | change = absval\" = c(-1, 1)) par_center <- 2 par_oat <- sample_oat(par, par_center) }"},{"path":"/reference/sample_transect_i.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample Transect for a Specific Parameter — sample_transect_i","title":"Sample Transect for a Specific Parameter — sample_transect_i","text":"Generates samples along transect specific parameter.","code":""},{"path":"/reference/sample_transect_i.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample Transect for a Specific Parameter — sample_transect_i","text":"","code":"sample_transect_i(par_bnd, par_center, par_transect, i_c)"},{"path":"/reference/sample_transect_i.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample Transect for a Specific Parameter — sample_transect_i","text":"par_bnd list parameter boundaries. par_center data frame matrix parameter centers. par_transect list parameter transects. i_c integer indicating index current parameter center.","code":""},{"path":"/reference/sample_transect_i.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample Transect for a Specific Parameter — sample_transect_i","text":"data frame samples along transect specified parameter.","code":""},{"path":"/reference/setup_calibration_cal.html","id":null,"dir":"Reference","previous_headings":"","what":"Setup the calibration.cal file and include all parameter conditions\r\nof the simulation and set them according to respective input parameters — setup_calibration_cal","title":"Setup the calibration.cal file and include all parameter conditions\r\nof the simulation and set them according to respective input parameters — setup_calibration_cal","text":"Setup calibration.cal file include parameter conditions simulation set according respective input parameters","code":""},{"path":"/reference/setup_calibration_cal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setup the calibration.cal file and include all parameter conditions\r\nof the simulation and set them according to respective input parameters — setup_calibration_cal","text":"","code":"setup_calibration_cal(par_def, unit_cons)"},{"path":"/reference/setup_calibration_cal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setup the calibration.cal file and include all parameter conditions\r\nof the simulation and set them according to respective input parameters — setup_calibration_cal","text":"par_def Tibble one line includes parameter definition parameter unit_cons List tibbles contains meta information hru, aqu, etc. units constrain variables (e.g. texture, plant)","code":""},{"path":"/reference/tidy_constraint.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a set of operations to the rule strings to check and clean the defined operations — tidy_constraint","title":"Apply a set of operations to the rule strings to check and clean the defined operations — tidy_constraint","text":"Apply set operations rule strings check clean defined operations","code":""},{"path":"/reference/tidy_constraint.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a set of operations to the rule strings to check and clean the defined operations — tidy_constraint","text":"","code":"tidy_constraint(chr, bool_op)"},{"path":"/reference/tidy_constraint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a set of operations to the rule strings to check and clean the defined operations — tidy_constraint","text":"chr Text string defines constraint bool_op Vector strings define different possible boolean operations","code":""},{"path":"/reference/translate_parameter_constraints.html","id":null,"dir":"Reference","previous_headings":"","what":"Translate the parameter inputs and the set constraints into lookup table — translate_parameter_constraints","title":"Translate the parameter inputs and the set constraints into lookup table — translate_parameter_constraints","text":"Translate parameter inputs set constraints lookup table","code":""},{"path":"/reference/translate_parameter_constraints.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Translate the parameter inputs and the set constraints into lookup table — translate_parameter_constraints","text":"","code":"translate_parameter_constraints(par, swat_vers)"},{"path":"/reference/translate_parameter_constraints.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Translate the parameter inputs and the set constraints into lookup table — translate_parameter_constraints","text":"par Character string vector providing parameters constraints","code":""},{"path":"/reference/translate_sequence.html","id":null,"dir":"Reference","previous_headings":"","what":"Translate the unit sequences to calibration.cal syntax — translate_sequence","title":"Translate the unit sequences to calibration.cal syntax — translate_sequence","text":"Translate unit sequences calibration.cal syntax","code":""},{"path":"/reference/translate_sequence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Translate the unit sequences to calibration.cal syntax — translate_sequence","text":"","code":"translate_sequence(val_seq)"},{"path":"/reference/translate_sequence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Translate the unit sequences to calibration.cal syntax — translate_sequence","text":"val_seq Numeric vector unit values","code":""},{"path":"/reference/truncate.html","id":null,"dir":"Reference","previous_headings":"","what":"Truncate a Vector with Ellipses — truncate","title":"Truncate a Vector with Ellipses — truncate","text":"function truncates vector adds ellipses (\"...\") indicate omitted values. Truncation can done left sides.","code":""},{"path":"/reference/truncate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Truncate a Vector with Ellipses — truncate","text":"","code":"truncate(x, n, side = \"left\")"},{"path":"/reference/truncate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Truncate a Vector with Ellipses — truncate","text":"x vector truncated. n integer specifying maximum number elements include truncation. side string indicating side truncate. Options 'left' ''. Default 'left'.","code":""},{"path":"/reference/truncate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Truncate a Vector with Ellipses — truncate","text":"string truncated vector. truncation occurs, ellipses (\"...\") added indicate omitted values.","code":""},{"path":"/reference/update_par.html","id":null,"dir":"Reference","previous_headings":"","what":"Update Parameters — update_par","title":"Update Parameters — update_par","text":"function updates parameters based different types changes.","code":""},{"path":"/reference/update_par.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update Parameters — update_par","text":"","code":"update_par(par, par_up, change)"},{"path":"/reference/update_par.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update Parameters — update_par","text":"par Numeric vector: Original parameter values. par_up Numeric vector: Values indicating update parameter. change Character scalar: Type change apply. Options \"relchg\" relative change, \"pctchg\" percentage change, \"abschg\" absolute change, \"absval\" setting absolute value change.","code":""},{"path":"/reference/update_par.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update Parameters — update_par","text":"Numeric vector updated parameter values.","code":""},{"path":"/reference/update_par.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update Parameters — update_par","text":"","code":"par <- c(10, 20, 30, 40) par_up <- c(0.1, 0.2, NA, 0.3) update_par(par, par_up, \"relchg\") # Returns updated parameters with relative change applied. #> [1] 11 24 30 52"},{"path":"/reference/update_plant_par.html","id":null,"dir":"Reference","previous_headings":"","what":"Modify plants.plt parameters — update_plant_par","title":"Modify plants.plt parameters — update_plant_par","text":"Modify plants.plt parameters","code":""},{"path":"/reference/update_plant_par.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modify plants.plt parameters — update_plant_par","text":"","code":"update_plant_par(thread_path, parameter, is_plant_par, run_index, i_run)"},{"path":"/reference/update_plant_par.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modify plants.plt parameters — update_plant_par","text":"thread_path Path parallel thread folder parameter List providing parameter table parameter constraints is_plant_par Logical vector defines plant parameters run_index Vector indices runs performed i_run Index gives number current run simulated respective thread","code":""},{"path":"/reference/write_cal_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Write Calibration File — write_cal_file","title":"Write Calibration File — write_cal_file","text":"function arranges writes calibration.cal file based provided parameter table.","code":""},{"path":"/reference/write_cal_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write Calibration File — write_cal_file","text":"","code":"write_cal_file(par, write_path = NULL, i_run = 1)"},{"path":"/reference/write_cal_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write Calibration File — write_cal_file","text":"par data frame containing parameter information. write_path (optional) path calibration file written. Default write_path = NULL, current working directory used. i_run (optional) integer specifying run number. Default i_run = 1.","code":""},{"path":"/reference/write_cal_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write Calibration File — write_cal_file","text":"None, write calibration.cal file","code":""},{"path":"/reference/write_cal_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write Calibration File — write_cal_file","text":"","code":"if (FALSE) { # Example usage: write_cal_file(my_parameter_table, \"path/to/write\", 1) }"},{"path":"/reference/write_calibration.html","id":null,"dir":"Reference","previous_headings":"","what":"Update the calibration file structure with the parameter set of the current\r\nsimulation run_i — write_calibration","title":"Update the calibration file structure with the parameter set of the current\r\nsimulation run_i — write_calibration","text":"Update calibration file structure parameter set current simulation run_i","code":""},{"path":"/reference/write_calibration.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update the calibration file structure with the parameter set of the current\r\nsimulation run_i — write_calibration","text":"","code":"write_calibration(thread_path, parameter, calibration, run_index, i_run)"},{"path":"/reference/write_calibration.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update the calibration file structure with the parameter set of the current\r\nsimulation run_i — write_calibration","text":"thread_path Path current parallel thread 'thread_i' parameter Model parameters named vector tibble calibration Template table structure calibration file i_run Index i_th simulation run","code":""},{"path":"/reference/write_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Write SWAT+ input file, which has a tabular structure. — write_tbl","title":"Write SWAT+ input file, which has a tabular structure. — write_tbl","text":"Write SWAT+ input file, tabular structure.","code":""},{"path":"/reference/write_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write SWAT+ input file, which has a tabular structure. — write_tbl","text":"","code":"write_tbl(tbl, file_path, fmt)"},{"path":"/reference/write_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write SWAT+ input file, which has a tabular structure. — write_tbl","text":"tbl SWAT input table tibble (data.frame) format. file_path Write path SWAT+ input file. fmt Character vector format strings define print format table column.","code":""},{"path":"/reference/write_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write SWAT+ input file, which has a tabular structure. — write_tbl","text":"Writes text file table file path.","code":""},{"path":[]},{"path":"/reference/write_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write SWAT+ input file, which has a tabular structure. — write_tbl","text":"","code":"if (FALSE) { ## Read the hydrology.hyd input file hydrology_hyd <- read_tbl(paste0(model_path, '/hydrology.hyd')) hydrology_hyd$esco <- 1 ## Updating hydrology.hyd file hydr_hyd_fmt <- c('%-16s', rep('%12.5f', 14)) write_tbl(hydrology_hyd, paste0(model_path, '/hydrology.hyd'), hydr_hyd_fmt) }"},{"path":"/reference/aggregate_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate time series table — aggregate_time","title":"Aggregate time series table — aggregate_time","text":"aggregate_time() aggregates tables date column multiple value columns coarser time steps, defined time using function defined fun.","code":""},{"path":"/reference/aggregate_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate time series table — aggregate_time","text":"","code":"aggregate_time(tbl, time = year, fun = sum, average = FALSE)"},{"path":"/reference/aggregate_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate time series table — aggregate_time","text":"tbl data frame contains 'date' column multiple numerical columns. time function vector functions define time intervals tbl aggregated. Must one lubridate functions year, month, day, yday. fun Aggregation function (e.g. sum, mean, min, max). average values averaged aggregation? e.g. time interval defined time = c(year, month), average = TRUE, first aggregate year month average mean monthy values.","code":""},{"path":"/reference/aggregate_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate time series table — aggregate_time","text":"tibble aggregated value columns added time interval columns.","code":""},{"path":"/reference/aggregate_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Aggregate time series table — aggregate_time","text":"","code":"if (FALSE) { library(tidyverse) library(lubridate)  # Generate dummy table  date <- seq(ymd(19700101), ymd(20101231), by = 'day')  n <- 100  tbl <- map(1:n, ~ runif(length(date))) %>% set_names(id_to_run(1:n)) %>% bind_cols(.)  tbl <- bind_cols(date = date, tbl)  # Calculate maximum values for days of the year aggregate_time(tbl, time = yday, fun = max)  # Calculate mean monthly sums aggregate_time(tbl, time = c(year, month), fun = sum, average = TRUE)  # Calculate average annual sums aggregate_time(tbl, time = year, fun = sum, average = TRUE)  }"},{"path":"/reference/build_unit_string.html","id":null,"dir":"Reference","previous_headings":"","what":"Build the text string with the 'unit' definition to be added to a parameter\r\nname — build_unit_string","title":"Build the text string with the 'unit' definition to be added to a parameter\r\nname — build_unit_string","text":"Build text string 'unit' definition added parameter name","code":""},{"path":"/reference/build_unit_string.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build the text string with the 'unit' definition to be added to a parameter\r\nname — build_unit_string","text":"","code":"build_unit_string(vals)"},{"path":"/reference/build_unit_string.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build the text string with the 'unit' definition to be added to a parameter\r\nname — build_unit_string","text":"vals Vector unit IDs","code":""},{"path":"/reference/build_unit_string.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build the text string with the 'unit' definition to be added to a parameter\r\nname — build_unit_string","text":"text string unit definition.","code":""},{"path":"/reference/calc_fdc_i.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Flow Duration Curve (FDC) for list element i — calc_fdc_i","title":"Calculate Flow Duration Curve (FDC) for list element i — calc_fdc_i","text":"Calculate flow duration curve given vector dataframe.","code":""},{"path":"/reference/calc_fdc_i.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Flow Duration Curve (FDC) for list element i — calc_fdc_i","text":"","code":"calc_fdc_i(x)"},{"path":"/reference/calc_fdc_i.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Flow Duration Curve (FDC) for list element i — calc_fdc_i","text":"x vector tibble flow values.","code":""},{"path":"/reference/calc_fdc_i.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Flow Duration Curve (FDC) for list element i — calc_fdc_i","text":"tibble sorted values corresponding exceedance probabilities.","code":""},{"path":"/reference/calc_gof.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate a goodness-of-fit table — calc_gof","title":"Calculate a goodness-of-fit table — calc_gof","text":"calc_gof() calculates goodness--fit inices simulated time series sim observations obs applying functions passed list funs.","code":""},{"path":"/reference/calc_gof.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate a goodness-of-fit table — calc_gof","text":"","code":"calc_gof(sim, obs, funs)"},{"path":"/reference/calc_gof.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate a goodness-of-fit table — calc_gof","text":"sim Data frame one date column one many columns values simulated variable. obs Data frame one date one value column. funs list functions used calculate goodness--fit (GoF) values. can named unnamed list. named (e.g., list(nse_q = NSE, pb_q = pbias)), names used column names returned results. unnamed, function names used column names. Commonly used functions (NSE, pbias, KGE, etc.) available documentation hydroGOF package.","code":""},{"path":"/reference/calc_gof.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate a goodness-of-fit table — calc_gof","text":"table calculated goodness--fit values.","code":""},{"path":[]},{"path":"/reference/calc_gof.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate a goodness-of-fit table — calc_gof","text":"","code":"if (FALSE) { date_flow <- seq(as.Date('2000-01-01'), as.Date('2000-12-31'), by = 'day')  flow_sim <- data.frame(date = date_flow,                        run_1 = runif(length(date_flow)),                        run_2 = runif(length(date_flow))                        ) flow_obs <- data.frame(date = date_flow,                        qobs = runif(length(date_flow))                        )  obj_tbl <- calc_gof(sim = flow_sim, obs = flow_obs, funs = list(cor_q = cor)) }"},{"path":"/reference/calc_gof_i.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate goodness-of-fit values for one function — calc_gof_i","title":"Calculate goodness-of-fit values for one function — calc_gof_i","text":"Calculate goodness--fit values one function","code":""},{"path":"/reference/calc_gof_i.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate goodness-of-fit values for one function — calc_gof_i","text":"","code":"calc_gof_i(sim, obs, fun)"},{"path":"/reference/calc_gof_i.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate goodness-of-fit values for one function — calc_gof_i","text":"sim Data frame one many columns values simulated variable. obs Data frame one value column. fun Goodness--fit function","code":""},{"path":"/reference/calc_gof_i.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate goodness-of-fit values for one function — calc_gof_i","text":"vector goodness--fit values column sim calculated fun","code":""},{"path":"/reference/check_date_col.html","id":null,"dir":"Reference","previous_headings":"","what":"Check and fix position of date column in a table — check_date_col","title":"Check and fix position of date column in a table — check_date_col","text":"Check fix position date column table","code":""},{"path":"/reference/check_date_col.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check and fix position of date column in a table — check_date_col","text":"","code":"check_date_col(tbl)"},{"path":"/reference/check_date_col.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check and fix position of date column in a table — check_date_col","text":"tbl Data frame date column checked fixed.","code":""},{"path":"/reference/check_date_col.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check and fix position of date column in a table — check_date_col","text":"tbl date column put first position renamed 'date'","code":""},{"path":"/reference/check_point_shape.html","id":null,"dir":"Reference","previous_headings":"","what":"Check a point value shape value if it is a correct value between 0 and 25 — check_point_shape","title":"Check a point value shape value if it is a correct value between 0 and 25 — check_point_shape","text":"Check point value shape value correct value 0 25","code":""},{"path":"/reference/check_point_shape.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check a point value shape value if it is a correct value between 0 and 25 — check_point_shape","text":"","code":"check_point_shape(shape)"},{"path":"/reference/check_point_shape.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check a point value shape value if it is a correct value between 0 and 25 — check_point_shape","text":"shape Point shape value. correct value must one 0:25. value returns NA","code":""},{"path":"/reference/check_point_shape.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check a point value shape value if it is a correct value between 0 and 25 — check_point_shape","text":"correct point shape value NA.","code":""},{"path":"/reference/conc_to_load.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert concentration and discharge time series into a load time series. — conc_to_load","title":"Convert concentration and discharge time series into a load time series. — conc_to_load","text":"Calculate time series load values time series concentration discharge.","code":""},{"path":"/reference/conc_to_load.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert concentration and discharge time series into a load time series. — conc_to_load","text":"","code":"conc_to_load(   conc,   flow,   conc_unit = \"mg L-1\",   flow_unit = \"m3 s-1\",   out_unit = \"kg day-1\" )"},{"path":"/reference/conc_to_load.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert concentration and discharge time series into a load time series. — conc_to_load","text":"conc Data frame date column one many columns concentration values. number concentration columns must number discharge columns data frame flow. flow Data frame date column one many columns discharge values. number flow columns must number concentration columns data frame conc. conc_unit Unit concentration values provided text string format 'mass volume-1. Default 'mg L-1'. flow_unit Unit discharge values provided text string format 'volume time-1. Default 'm3 s-1'. out_unit Unit load values provided text string format 'mass time-1. Default 'kg day-1'.","code":""},{"path":"/reference/conc_to_load.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert concentration and discharge time series into a load time series. — conc_to_load","text":"table date column calculated concentration values.","code":""},{"path":"/reference/conc_to_load.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert concentration and discharge time series into a load time series. — conc_to_load","text":"","code":"if (FALSE) { # Example usage: date_conc <- seq(as.Date('2000-01-01'), as.Date('2000-12-31'), by = '2 week') date_flow <- seq(as.Date('2000-01-01'), as.Date('2000-12-31'), by = 'day')  c_df <- data.frame(date = date_conc,                    value = runif(length(date_conc)))  f_df <- data.frame(date = date_flow,                    value = runif(length(date_flow)))  load <- conc_to_load(conc = c_df, flow = f_df, out_unit = 'tons day-1') }"},{"path":"/reference/filter_period.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter a time period for a variable time series table. — filter_period","title":"Filter a time period for a variable time series table. — filter_period","text":"filter_period() filters rows table one date column, dates time range within time_window.","code":""},{"path":"/reference/filter_period.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter a time period for a variable time series table. — filter_period","text":"","code":"filter_period(tbl, time_window)"},{"path":"/reference/filter_period.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter a time period for a variable time series table. — filter_period","text":"tbl Variable time series table, one column type date columns numeric values time_window Vector length 2 provides start end dates time window filtered. Must format c(2000, 2010), c(20000101, 20101231), e.g. c('2000-01-01', '2010-12-31')","code":""},{"path":"/reference/filter_period.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter a time period for a variable time series table. — filter_period","text":"table tbl filtered rows based time_window.","code":""},{"path":"/reference/filter_period.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter a time period for a variable time series table. — filter_period","text":"","code":"if (FALSE) { flow_sim <- filter_period(tbl = flow_sim, time_window = c(2010, 2015)) }"},{"path":"/reference/group_hydr_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Group the values of a parameter in the file hydrology.hyd. — group_hydr_values","title":"Group the values of a parameter in the file hydrology.hyd. — group_hydr_values","text":"useful applying different parameter ranges e.g. parameters perco, cn3_swf, latq_co different initial values based runoff leaching potential.","code":""},{"path":"/reference/group_hydr_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Group the values of a parameter in the file hydrology.hyd. — group_hydr_values","text":"","code":"group_hydr_values(par_name, model_path)"},{"path":"/reference/group_hydr_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Group the values of a parameter in the file hydrology.hyd. — group_hydr_values","text":"par_name Name parameter values grouped model_path path SWAT+ model project folder contains file hydrology.hyd","code":""},{"path":"/reference/group_hydr_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Group the values of a parameter in the file hydrology.hyd. — group_hydr_values","text":"vector unique indices parameter value groups assigned HRU.","code":""},{"path":"/reference/guess_time_step.html","id":null,"dir":"Reference","previous_headings":"","what":"Guess the time step of a vector of values (e.g. years, days,...) — guess_time_step","title":"Guess the time step of a vector of values (e.g. years, days,...) — guess_time_step","text":"Guess time step vector values (e.g. years, days,...)","code":""},{"path":"/reference/guess_time_step.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Guess the time step of a vector of values (e.g. years, days,...) — guess_time_step","text":"","code":"guess_time_step(x)"},{"path":"/reference/guess_time_step.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Guess the time step of a vector of values (e.g. years, days,...) — guess_time_step","text":"x Numeric vector year, month, day values","code":""},{"path":"/reference/guess_time_step.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Guess the time step of a vector of values (e.g. years, days,...) — guess_time_step","text":"text string indicating guessed time interval","code":""},{"path":"/reference/id_to_run.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert run ID values to run names — id_to_run","title":"Convert run ID values to run names — id_to_run","text":"Convert run ID values run names","code":""},{"path":"/reference/id_to_run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert run ID values to run names — id_to_run","text":"","code":"id_to_run(run_ids, id_max = NULL)"},{"path":"/reference/id_to_run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert run ID values to run names — id_to_run","text":"run_ids Integer vector run IDs id_max Largest value run IDs (defines number leading zeros)","code":""},{"path":"/reference/id_to_run.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert run ID values to run names — id_to_run","text":"character vector run names","code":""},{"path":"/reference/id_to_run.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert run ID values to run names — id_to_run","text":"","code":"if (FALSE) { run_sel <- c(1,36, 598, 2311) id_to_run(run_sel) }"},{"path":"/reference/id_to_unit.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate 'unit' condition for parameter definition from ID vector — id_to_unit","title":"Generate 'unit' condition for parameter definition from ID vector — id_to_unit","text":"id_to_unit() generates 'unit' condition  SWATrunR parameter definitions ID vector. useful e.g. vector HRU IDs given parameter change change defined units","code":""},{"path":"/reference/id_to_unit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate 'unit' condition for parameter definition from ID vector — id_to_unit","text":"","code":"id_to_unit(ids)"},{"path":"/reference/id_to_unit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate 'unit' condition for parameter definition from ID vector — id_to_unit","text":"ids Numeric ID vector.","code":""},{"path":"/reference/id_to_unit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate 'unit' condition for parameter definition from ID vector — id_to_unit","text":"Character string unit condition based given IDs.","code":""},{"path":"/reference/id_to_unit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate 'unit' condition for parameter definition from ID vector — id_to_unit","text":"","code":"if (FALSE) { # HRU IDs e.g. same land use hru_ids <- c(1, 3, 4, 5, 28, 37:43, 58)  # E.g. define a change of cn2 cn2_chg <- c('cn2_agri::cn2.hru | change = abschg' = - 5)  # Add unit condition names(cn2_chg) <- paste(names(cn2_chg), id_to_unit(hru_ids)) }"},{"path":"/reference/initialize_softcal.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize a soft calibration workflow — initialize_softcal","title":"Initialize a soft calibration workflow — initialize_softcal","text":"initialize_softcal() initializes template soft calibration project. project provides template workflow folder '/workflow'. folders '/observation' '/simulation' generated use simulation workflow. R project initialized loaded new folder structure.","code":""},{"path":"/reference/initialize_softcal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize a soft calibration workflow — initialize_softcal","text":"","code":"initialize_softcal(project_name, path, model_path, start_new_session = FALSE)"},{"path":"/reference/initialize_softcal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize a soft calibration workflow — initialize_softcal","text":"project_name Name soft calibration project. path Path soft calibration project initialized. model_path Path SWAT+ model. start_new_session Open R project new current R session.","code":""},{"path":"/reference/initialize_softcal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize a soft calibration workflow — initialize_softcal","text":"Opens template R project SWAT+ soft calibration.","code":""},{"path":"/reference/initialize_softcal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialize a soft calibration workflow — initialize_softcal","text":"","code":"if (FALSE) { initialize_softcal('softcal_test', '~/', 'Path:/to/txt_inout') }"},{"path":"/reference/load_to_conc.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert load and discharge time series into a concentration time series. — load_to_conc","title":"Convert load and discharge time series into a concentration time series. — load_to_conc","text":"Calculate time series concentration values time series load discharge.","code":""},{"path":"/reference/load_to_conc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert load and discharge time series into a concentration time series. — load_to_conc","text":"","code":"load_to_conc(   load,   flow,   load_unit = \"kg day-1\",   flow_unit = \"m3 s-1\",   out_unit = \"mg L-1\" )"},{"path":"/reference/load_to_conc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert load and discharge time series into a concentration time series. — load_to_conc","text":"load Data frame date column one many columns load values. number load columns must number discharge columns data frame flow. flow Data frame date column one many columns discharge values. number flow columns must number load columns data frame load. load_unit Unit load values provided text string format 'mass time-1. Default 'kg day-1'. flow_unit Unit discharge values provided text string format 'volume time-1. Default 'm3 s-1'. out_unit Unit concentration values provided text string format 'mass volume-1. Default 'mg L-1'.","code":""},{"path":"/reference/load_to_conc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert load and discharge time series into a concentration time series. — load_to_conc","text":"table date column calculated concentration values.","code":""},{"path":"/reference/load_to_conc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert load and discharge time series into a concentration time series. — load_to_conc","text":"","code":"if (FALSE) { # Example usage: date_load <- seq(as.Date('2000-01-01'), as.Date('2000-12-31'), by = '2 week') date_flow <- seq(as.Date('2000-01-01'), as.Date('2000-12-31'), by = 'day')  l_df <- data.frame(date = date_load,                    value = runif(length(date_load)))  f_df <- data.frame(date = date_flow,                    value = runif(length(date_flow)))  conc <- load_to_conc(load = l_df, flow = f_df, load_unit = 'tons day-1') }"},{"path":"/reference/normalize.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalize values in vector between 0 and 1 — normalize","title":"Normalize values in vector between 0 and 1 — normalize","text":"Normalize values vector 0 1","code":""},{"path":"/reference/normalize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalize values in vector between 0 and 1 — normalize","text":"","code":"normalize(x)"},{"path":"/reference/normalize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalize values in vector between 0 and 1 — normalize","text":"x Numeric vector","code":""},{"path":"/reference/normalize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalize values in vector between 0 and 1 — normalize","text":"vector normalized values.","code":""},{"path":"/reference/plot_gof.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot goodness of fit (GOF) tables — plot_gof","title":"Plot goodness of fit (GOF) tables — plot_gof","text":"plot_gof() plots summary boxplots one list GOF tables ggplots.","code":""},{"path":"/reference/plot_gof.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot goodness of fit (GOF) tables — plot_gof","text":"","code":"plot_gof(gof_tbls, gofs = NULL, colors = NULL, n_col = 3)"},{"path":"/reference/plot_gof.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot goodness of fit (GOF) tables — plot_gof","text":"gof_tbls data.frame containing goodness fit values, list tables. gofs (optional) character vector indicating selected GOFs plot. Default NULL GOFs provided gof_tbls plotted colors (optional) character vector define fill colors boxes. Must length number tables plot. Default NULL default color pallette used. n_col (optional) Number columns plot panels plot. Default n_col = 3","code":""},{"path":"/reference/plot_gof.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot goodness of fit (GOF) tables — plot_gof","text":"ggplot object boxplots GOF values.","code":""},{"path":[]},{"path":"/reference/plot_gof.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot goodness of fit (GOF) tables — plot_gof","text":"","code":"if (FALSE) { library(SWATrunR)  # Generate dummy gof table n <- 50 gof_cal <- data.frame(run   = id_to_run(1:n, n),                       nse   = runif(n, 0.4, 0.7),                       pbias = runif(n, -25, 0),                       kge   = runif(n, 0.5, 0.8))  # Plot single glof table plot_gof(gof_cal)  # Plot list of gof tables gof_val <- data.frame(run   = id_to_run(1:n, n),                       nse   = runif(n, 0.2, 0.55),                       pbias = runif(n, -20, 10),                       kge   = runif(n, 0.3, 0.55))  gof_tbls <- list(calibration = gof_cal, validation = gof_val)  plot_gof(gof_tbls) }"},{"path":"/reference/prepare_plant_parameter.html","id":null,"dir":"Reference","previous_headings":"","what":"Rearrange parameter change tables to SWATrunR format — prepare_plant_parameter","title":"Rearrange parameter change tables to SWATrunR format — prepare_plant_parameter","text":"Rearrange parameter change tables SWATrunR format","code":""},{"path":"/reference/prepare_plant_parameter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rearrange parameter change tables to SWATrunR format — prepare_plant_parameter","text":"","code":"prepare_plant_parameter(par_tbl)"},{"path":"/reference/prepare_plant_parameter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rearrange parameter change tables to SWATrunR format — prepare_plant_parameter","text":"par_tbl table parameter changes first column 'plant_name' following columns parameters change definitions.","code":""},{"path":"/reference/prepare_plant_parameter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rearrange parameter change tables to SWATrunR format — prepare_plant_parameter","text":"resturctured SWATrunR parameter table","code":""},{"path":"/reference/rank_gof.html","id":null,"dir":"Reference","previous_headings":"","what":"Rank lines in a table of goodness-of-fit values. — rank_gof","title":"Rank lines in a table of goodness-of-fit values. — rank_gof","text":"rank_gof() ranks column goodness--fit table either absolute ranks normalized GOF values calculates total rank line.","code":""},{"path":"/reference/rank_gof.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rank lines in a table of goodness-of-fit values. — rank_gof","text":"","code":"rank_gof(gof_tbl, weights = NULL, type = \"rank\")"},{"path":"/reference/rank_gof.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rank lines in a table of goodness-of-fit values. — rank_gof","text":"gof_tbl Table goodness--fit values, column provides values runs one GOF index weights (optional) weights vector apply different weights goodness--fit indices calculation total rank. type Either 'rank' calculate absolute ranks 'norm' use normalized values indices.","code":""},{"path":"/reference/rank_gof.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rank lines in a table of goodness-of-fit values. — rank_gof","text":"rank table goodness--fit columns total rank.","code":""},{"path":"/reference/run_to_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert run_names to integer ID values — run_to_id","title":"Convert run_names to integer ID values — run_to_id","text":"Convert run_names integer ID values","code":""},{"path":"/reference/run_to_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert run_names to integer ID values — run_to_id","text":"","code":"run_to_id(run_names)"},{"path":"/reference/run_to_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert run_names to integer ID values — run_to_id","text":"run_names Character vector providing run names","code":""},{"path":"/reference/run_to_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert run_names to integer ID values — run_to_id","text":"integer vector run IDs","code":""},{"path":"/reference/run_to_id.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert run_names to integer ID values — run_to_id","text":"","code":"if (FALSE) { run_sel <- paste0('run_', sprintf('%04d', c(1,36, 598, 2311))) run_to_id(run_sel) }"},{"path":"/reference/sample_days_mat.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample days to maturity values — sample_days_mat","title":"Sample days to maturity values — sample_days_mat","text":"sample_days_mat() reads initial days maturity values selected crop_names unchanged plants.plt file (saved ./backup/plants.plt) generates parameter table can used SWATrunR function run_swatplus() perform simulations changed days maturity values selected crops.","code":""},{"path":"/reference/sample_days_mat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample days to maturity values — sample_days_mat","text":"","code":"sample_days_mat(   crop_names,   change_min = -60,   change_max = 90,   change_step = 10 )"},{"path":"/reference/sample_days_mat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample days to maturity values — sample_days_mat","text":"crop_names Character vector names selected crops. crops must defined plants.plt backup file saved ./backup/plants.plt change_min Minimum value change days maturity. Default -60. change_max Minimum value change days maturity. Default 90. change_step Minimum value change days maturity. Default 10.","code":""},{"path":"/reference/sample_days_mat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample days to maturity values — sample_days_mat","text":"parameter input table input argument parameter SWATrunR function run_swatplus().","code":""},{"path":"/reference/sample_days_mat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample days to maturity values — sample_days_mat","text":"","code":"if (FALSE) { library(SWATtunR)  # Crops for which days to maturity values are sampled crop_names <- c('csil', 'wbar', 'sgbt', 'wwht')  # Generate a days to maturity parameter table par_dmat <- sample_dmat(crop_names)  par_dmat }"},{"path":"/reference/sum_variables.html","id":null,"dir":"Reference","previous_headings":"","what":"Sum values of simulated variables — sum_variables","title":"Sum values of simulated variables — sum_variables","text":"sum_variables() sums values provided simulated variable tables. date unit columns excluded. elements summed element wise. useful e.g. calculate total Nitrogen simulated N fractions.","code":""},{"path":"/reference/sum_variables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sum values of simulated variables — sum_variables","text":"","code":"sum_variables(...)"},{"path":"/reference/sum_variables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sum values of simulated variables — sum_variables","text":"... Variable tables summed .","code":""},{"path":"/reference/sum_variables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sum values of simulated variables — sum_variables","text":"Returns variable table element wise summed values.","code":""},{"path":"/reference/sum_variables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sum values of simulated variables — sum_variables","text":"","code":"if (FALSE) { no3_sim  <- sim$simulation$no3_day nh3_sim  <- sim$simulation$nh3_day no2_sim  <- sim$simulation$no2_day orgn_sim <- sim$simulation$orgn_day  ntot_sim <- sum_variables(no3_sim, nh3_sim, no2_sim, orgn_sim) }"},{"path":"/reference/translate_to_boundaries.html","id":null,"dir":"Reference","previous_headings":"","what":"Translate the normalized sampled values of a parameter to ranges of groups\r\nof that parameter (e.g. when perco should have different ranges based on the\r\ninitial values of perco in all HRUs) — translate_to_boundaries","title":"Translate the normalized sampled values of a parameter to ranges of groups\r\nof that parameter (e.g. when perco should have different ranges based on the\r\ninitial values of perco in all HRUs) — translate_to_boundaries","text":"Translate normalized sampled values parameter ranges groups parameter (e.g. perco different ranges based initial values perco HRUs)","code":""},{"path":"/reference/translate_to_boundaries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Translate the normalized sampled values of a parameter to ranges of groups\r\nof that parameter (e.g. when perco should have different ranges based on the\r\ninitial values of perco in all HRUs) — translate_to_boundaries","text":"","code":"translate_to_boundaries(par_tbl, par_name, par_bound, par_group)"},{"path":"/reference/translate_to_boundaries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Translate the normalized sampled values of a parameter to ranges of groups\r\nof that parameter (e.g. when perco should have different ranges based on the\r\ninitial values of perco in all HRUs) — translate_to_boundaries","text":"par_tbl Table sampled parameter combinations par_name Name parameter translated par_bound List parameter boundaries normalized values transformed . par_group (named) Integer vector defines groups spatial unit belongs .","code":""},{"path":"/reference/translate_to_boundaries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Translate the normalized sampled values of a parameter to ranges of groups\r\nof that parameter (e.g. when perco should have different ranges based on the\r\ninitial values of perco in all HRUs) — translate_to_boundaries","text":"table parameter samples, normalized parameter replaced several columns updated parameter boundaries correct names assigned, parameter boundaries correctly applied.","code":""},{"path":"/reference/add_timestamp.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a time stamp to the save name — add_timestamp","title":"Add a time stamp to the save name — add_timestamp","text":"Add time stamp save name","code":""},{"path":"/reference/add_timestamp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a time stamp to the save name — add_timestamp","text":"","code":"add_timestamp(save_name)"},{"path":"/reference/add_timestamp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a time stamp to the save name — add_timestamp","text":"save_name Name saved simulation run","code":""},{"path":"/reference/add_timestamp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a time stamp to the save name — add_timestamp","text":"name simulation run added time stamp","code":""},{"path":"/reference/calc_wyr.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate water yield ratio — calc_wyr","title":"Calculate water yield ratio — calc_wyr","text":"Calculate water yield ratio simulated average annual water balance components. simulation run must provide precip Variable 'basin_wb_aa' output file. surq_cha Variable 'basin_wb_aa' output file. surq_res Variable 'basin_wb_aa' output file. latq_cha Variable 'basin_wb_aa' output file. latq_res Variable 'basin_wb_aa' output file. qtile Variable 'basin_wb_aa' output file. flo Variable ''basin_aqu_aa' output file.","code":""},{"path":"/reference/calc_wyr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate water yield ratio — calc_wyr","text":"","code":"calc_wyr(sim)"},{"path":"/reference/calc_wyr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate water yield ratio — calc_wyr","text":"sim SWATrunR simulation run listed simulated variables.","code":""},{"path":"/reference/calc_wyr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate water yield ratio — calc_wyr","text":"water yield ratio.","code":""},{"path":"/reference/plot_esco_epco.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot esco (and epco) to identify appropriate parameter ranges. — plot_esco_epco","title":"Plot esco (and epco) to identify appropriate parameter ranges. — plot_esco_epco","text":"Dependent whether esco (epco) used calibration runs, plot_esco_epco() plots simulatated water yield ratios parameter ranges support manual selection parameter values/ranges.","code":""},{"path":"/reference/plot_esco_epco.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot esco (and epco) to identify appropriate parameter ranges. — plot_esco_epco","text":"","code":"plot_esco_epco(sim, wyr_target, rel_wyr_limit = 0.05)"},{"path":"/reference/plot_esco_epco.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot esco (and epco) to identify appropriate parameter ranges. — plot_esco_epco","text":"sim simulation results water balance data. Including: precip Variable 'basin_wb_aa' output file. surq_cha Variable 'basin_wb_aa' output file. surq_res Variable 'basin_wb_aa' output file. latq_cha Variable 'basin_wb_aa' output file. latq_res Variable 'basin_wb_aa' output file. qtile Variable 'basin_wb_aa' output file. flo Variable ''basin_aqu_aa' output file. wyr_target numeric value representing target water yield ratio. rel_wyr_limit numeric value specifying relative range acceptable error.","code":""},{"path":"/reference/plot_esco_epco.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot esco (and epco) to identify appropriate parameter ranges. — plot_esco_epco","text":"ggplot object.","code":""},{"path":"/reference/initialize_hardcal.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize a hard calibration workflow — initialize_hardcal","title":"Initialize a hard calibration workflow — initialize_hardcal","text":"initialize_hardcal() initializes template hard calibration project. template project provides template simulation workflow folder '/workflow'. folders '/observation' '/simulation' generated use simulation workflow. R project initialized loaded new folder structure.","code":""},{"path":"/reference/initialize_hardcal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize a hard calibration workflow — initialize_hardcal","text":"","code":"initialize_hardcal(project_name, path, model_path, start_new_session = FALSE)"},{"path":"/reference/initialize_hardcal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize a hard calibration workflow — initialize_hardcal","text":"project_name Name hard calibration project. path Path hard calibration project initialized. model_path Path SWAT+ model. start_new_session Open R project new current R session.","code":""},{"path":"/reference/initialize_hardcal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize a hard calibration workflow — initialize_hardcal","text":"Opens template R project SWAT+ hard calibration.","code":""},{"path":"/reference/initialize_hardcal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialize a hard calibration workflow — initialize_hardcal","text":"","code":"if (FALSE) { initialize_hardcal('hardcal_test', '~/', 'Path:/to/txt_inout') }"},{"path":"/reference/plot_timeseries.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot time series of simulation results and observations — plot_timeseries","title":"Plot time series of simulation results and observations — plot_timeseries","text":"plot_timeseries() plots time series comparing simulated data observed data.","code":""},{"path":"/reference/plot_timeseries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot time series of simulation results and observations — plot_timeseries","text":"","code":"plot_timeseries(   sim,   obs = NULL,   run_sel = NULL,   run_ids = NULL,   plot_bands = TRUE,   sim_pointshape = 1,   obs_pointshape = 1,   sim_linetype = \"solid\",   obs_linetype = \"dotted\",   run_sel_color = \"#A50F15\",   run_ids_color = NULL,   obs_color = \"black\",   band_color = \"#CB181D\",   band_alpha = 0.2,   run_sel_label = \"Simulation\",   obs_label = \"Observation\",   band_label = \"Simulated range\",   x_label = \"Date\",   y_label = expression(Discharge ~ (m^3 ~ s^{      -1  })),   legend_pos = c(1, 0.99, 0.99),   split_years = NULL,   free_y = FALSE )"},{"path":"/reference/plot_timeseries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot time series of simulation results and observations — plot_timeseries","text":"sim Data frame one date column one many columns values simulated variable. obs (optional) Data frame one date one value column. Default obs = NULL, simulations plotted. run_sel (optional) Integer value name simulation run plotted 'selected' run. Default run_sel = NULL run plotted 'selected' run. case run_ids must selected plotting. run_ids (optional) Integer vector character vector run IDs run names plot. Default run_ids = NULL. case 'seleced' simulation run run_sel plotted. plot_bands = TRUE selected run_ids used calculate plot upper lower boundaries plotted band. plot_bands = FALSE maximum number 10 run_ids can selected plotting. plot_bands (optional) TRUE, upper lower boundary values calculated selected run_ids band plotted . FALSE individual selected runs run_ids plotted. Default plot_bands = TRUE. sim_pointshape (optional) Integer value defining shape points plotted simulated time series run_sel. value must value 0 25. inputs points plotted. Default sim_pointshape = 1. obs_pointshape (optional) Integer value defining shape points plotted observation time series. value must value 0 25. inputs points plotted. Default obs_pointshape = 1. sim_linetype (optional) Type line plotted simulated time series. linetype must one 'blank', 'solid', 'dashed', 'dotted', 'dotdash', 'longdash, 'twodash'. 'blank' line plotted. Default sim_linetype = 'solid'`. obs_linetype Type line plotted observation time series. linetype must one 'blank', 'solid', 'dashed', 'dotted', 'dotdash', 'longdash, 'twodash'. 'blank' line plotted. Default obs_linetype = 'dotted'`. run_sel_color (optional) Color line points plotted simulation time series run_sel. Default run_sel_color = '#A50F15'. run_ids_color (optional) Colors lines plotted simulation time series selected run_ids. colors used plot_bands = FALSE individual timeseries plotted. color vector must length selected runs run_ids. Default run_ids_color = NULL default color pallete used. obs_color (optional) Color line points plotted observation time series. Default obs_color = 'black'. band_color (optional) Color band plotted fur run_ids. color used plot_bands = TRUE. Default band_color = '#CB181D'. band_alpha (optional) Transparency value band plotted fur run_ids. value used plot_bands = TRUE. value must set 0 1. Default band_alpha = 0.2. run_sel_label (optional) Label plotted legend indicate selected simulation run run_sel. Default run_sel_label = 'Simulation'. obs_label (optional) Label plotted legend indicate observation time series. Default run_obs = 'Observation'. band_label (optional) Label plotted legend indicate simulation band run_ids. Default band_label = 'Simulated range'. x_label (optional) x-Axis label. Default x_label = 'Date'. y_label (optional) y-Axis label. Default x_label = expression(Discharge~(m^3~s^{-1})). legend_pos (optional) Position legend inside plot panel. split_years (optional) Integer value used split time series time intervals length split_years plot time periods separate plot panels. advantage plotting long time series. Default split_years = NULL entire time series plotted one plot panel. free_y split_years defined y-Axis can scaled individually plot panels free_y = TRUE. Default free_y = FALSE plot panels y plot range.","code":""},{"path":"/reference/plot_timeseries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot time series of simulation results and observations — plot_timeseries","text":"ggplot object plotted time series.","code":""},{"path":"/reference/view_timeseries.html","id":null,"dir":"Reference","previous_headings":"","what":"View interactive time series of simulation results and observations — view_timeseries","title":"View interactive time series of simulation results and observations — view_timeseries","text":"function plots interactive time series comparing simulated data observed data.","code":""},{"path":"/reference/view_timeseries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"View interactive time series of simulation results and observations — view_timeseries","text":"","code":"view_timeseries(   sim,   obs = NULL,   run_ids = NULL,   run_sel = NULL,   plot_bands = TRUE,   period = NULL,   fn_summarize = \"mean\",   x_label = \"Date\",   y_label = \"Discharge (m<sup>3<\/sup> s<sup>-1<\/sup>)\" )"},{"path":"/reference/view_timeseries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"View interactive time series of simulation results and observations — view_timeseries","text":"sim Data frame one date column one many columns values simulated variable. obs (optional) Data frame one date one value column. Default obs = NULL, simulations plotted. run_ids (optional) Integer vector run IDs plot. Default run_ids = NULL requires input run_sel. run_sel (optional) Integer vector run IDs emphasize plot. Default run_sel = NULL requires input run_ids. plot_bands (optional) Logical. TRUE, includes lower upper bands results. Default plot_bands = TRUE. period (optional) Character defining time step aggregation. Options include \"day\", \"week\", \"month\", \"year\", etc. Use \"average monthly\" multi-annual monthly values. Default period = NULL provides aggregation. See lubridate::floor_date details. fn_summarize Function summarize time intervals. Default fn_summarize =\"mean\", examples \"median\", \"sum\". See dplyr::summarise details. x_label (optional) Character x axis label. Default x_label = \"Date\". y_label (optional) Character y axis label. Default y_label = \"Discharge (m³/s)\".","code":""},{"path":"/reference/view_timeseries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"View interactive time series of simulation results and observations — view_timeseries","text":"Interactive plot simulated observed data.","code":""},{"path":"/reference/view_timeseries.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"View interactive time series of simulation results and observations — view_timeseries","text":"","code":"if (FALSE) { view_timeseries(sim_flow, obs = obs, run_ids = run_sel_ids, run_sel = c(95), plot_bands = TRUE, period = \"average monthly\") }"},{"path":"/news/index.html","id":"swattunr-002","dir":"Changelog","previous_headings":"","what":"SWATtunR 0.0.2","title":"SWATtunR 0.0.2","text":"second release package SWATtunR. first version functions vignettes.","code":""},{"path":"/news/index.html","id":"swattunr-001","dir":"Changelog","previous_headings":"","what":"SWATtunR 0.0.1","title":"SWATtunR 0.0.1","text":"first release package SWATtunR.","code":""}]
